/*! For license information please see bundle.5a7f686e1a1d7be89e04.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={146:(e,t,n)=>{var a=n(404),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},l={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},i={};function s(e){return a.isMemo(e)?l:i[e.$$typeof]||r}i[a.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},i[a.Memo]=l;var c=Object.defineProperty,u=Object.getOwnPropertyNames,m=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,a){if("string"!=typeof n){if(p){var r=f(n);r&&r!==p&&e(t,r,a)}var l=u(n);m&&(l=l.concat(m(n)));for(var i=s(t),h=s(n),b=0;b<l.length;++b){var v=l[b];if(!(o[v]||a&&a[v]||h&&h[v]||i&&i[v])){var g=d(n,v);try{c(t,v,g)}catch(e){}}}}return t}},72:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,a=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,l=n?Symbol.for("react.strict_mode"):60108,i=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,m=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,b=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,E=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case u:case m:case o:case i:case l:case f:return e;default:switch(e=e&&e.$$typeof){case c:case d:case b:case h:case s:return e;default:return t}}case r:return t}}}function w(e){return x(e)===m}t.AsyncMode=u,t.ConcurrentMode=m,t.ContextConsumer=c,t.ContextProvider=s,t.Element=a,t.ForwardRef=d,t.Fragment=o,t.Lazy=b,t.Memo=h,t.Portal=r,t.Profiler=i,t.StrictMode=l,t.Suspense=f,t.isAsyncMode=function(e){return w(e)||x(e)===u},t.isConcurrentMode=w,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===b},t.isMemo=function(e){return x(e)===h},t.isPortal=function(e){return x(e)===r},t.isProfiler=function(e){return x(e)===i},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===m||e===i||e===l||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===h||e.$$typeof===s||e.$$typeof===c||e.$$typeof===d||e.$$typeof===g||e.$$typeof===y||e.$$typeof===E||e.$$typeof===v)},t.typeOf=x},404:(e,t,n)=>{e.exports=n(72)},551:(e,t,n)=>{var a=n(540),r=n(982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),m=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function h(e,t,n,a,r,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=a,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];b[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function y(e,t,n,a){var r=b.hasOwnProperty(t)?b[t]:null;(null!==r?0!==r.type:a||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,a){if(null==t||function(e,t,n,a){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!a&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,a))return!0;if(a)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,a)&&(n=null),a||null===r?function(e){return!!m.call(p,e)||!m.call(f,e)&&(d.test(e)?p[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,a=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,a?e.setAttributeNS(a,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);b[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);b[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);b[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),w=Symbol.for("react.portal"),N=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),_=Symbol.for("react.context"),R=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),I=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var A=Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=A&&e[A]||e["@@iterator"])?e:null}var L,B=Object.assign;function z(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var M=!1;function j(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var a=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){a=e}e.call(t.prototype)}else{try{throw Error()}catch(e){a=e}e()}}catch(t){if(t&&a&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),o=a.stack.split("\n"),l=r.length-1,i=o.length-1;1<=l&&0<=i&&r[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(r[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||r[l]!==o[i]){var s="\n"+r[l].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=l&&0<=i);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function U(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case N:return"Fragment";case w:return"Portal";case S:return"Profiler";case k:return"StrictMode";case P:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case R:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:q(e.type)||"Memo";case I:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),a=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){a=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return a},setValue:function(e){a=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),a="";return e&&(a=V(e)?e.checked?"true":"false":e.value),(e=a)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,a=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:a,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function X(e,t){Y(e,t);var n=$(t.value),a=t.type;if(null!=n)"number"===a?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===a||"reset"===a)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var a=t.type;if(!("submit"!==a&&"reset"!==a||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,a){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&a&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(a&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),a=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=a&&(e.defaultValue=""+a)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,me=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,a){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function be(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var a=0===n.indexOf("--"),r=he(n,t[n],a);"float"===n&&(n="cssFloat"),a?e.setProperty(n,r):e[n]=r}}Object.keys(fe).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ve=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ee=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,Ne=null,ke=null;function Se(e){if(e=yr(e)){if("function"!=typeof we)throw Error(o(280));var t=e.stateNode;t&&(t=xr(t),we(e.stateNode,e.type,t))}}function Ce(e){Ne?ke?ke.push(e):ke=[e]:Ne=e}function _e(){if(Ne){var e=Ne,t=ke;if(ke=Ne=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Re(e,t){return e(t)}function Pe(){}var Te=!1;function Oe(e,t,n){if(Te)return e(t,n);Te=!0;try{return Re(e,t,n)}finally{Te=!1,(null!==Ne||null!==ke)&&(Pe(),_e())}}function Ie(e,t){var n=e.stateNode;if(null===n)return null;var a=xr(n);if(null===a)return null;n=a[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(a=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!a;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var De=!1;if(u)try{var Ae={};Object.defineProperty(Ae,"passive",{get:function(){De=!0}}),window.addEventListener("test",Ae,Ae),window.removeEventListener("test",Ae,Ae)}catch(ue){De=!1}function Fe(e,t,n,a,r,o,l,i,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Le=!1,Be=null,ze=!1,Me=null,je={onError:function(e){Le=!0,Be=e}};function Ue(e,t,n,a,r,o,l,i,s){Le=!1,Be=null,Fe.apply(je,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(qe(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,a=t;;){var r=n.return;if(null===r)break;var l=r.alternate;if(null===l){if(null!==(a=r.return)){n=a;continue}break}if(r.child===l.child){for(l=r.child;l;){if(l===n)return $e(r),e;if(l===a)return $e(r),t;l=l.sibling}throw Error(o(188))}if(n.return!==a.return)n=r,a=l;else{for(var i=!1,s=r.child;s;){if(s===n){i=!0,n=r,a=l;break}if(s===a){i=!0,a=r,n=l;break}s=s.sibling}if(!i){for(s=l.child;s;){if(s===n){i=!0,n=l,a=r;break}if(s===a){i=!0,a=l,n=r;break}s=s.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==a)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Ge=r.unstable_scheduleCallback,Ke=r.unstable_cancelCallback,Qe=r.unstable_shouldYield,Je=r.unstable_requestPaint,Ye=r.unstable_now,Xe=r.unstable_getCurrentPriorityLevel,Ze=r.unstable_ImmediatePriority,et=r.unstable_UserBlockingPriority,tt=r.unstable_NormalPriority,nt=r.unstable_LowPriority,at=r.unstable_IdlePriority,rt=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/st|0)|0},it=Math.log,st=Math.LN2,ct=64,ut=4194304;function mt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var a=0,r=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~r;0!==i?a=mt(i):0!=(o&=l)&&(a=mt(o))}else 0!=(l=n&~r)?a=mt(l):0!==o&&(a=mt(o));if(0===a)return 0;if(0!==t&&t!==a&&!(t&r)&&((r=a&-a)>=(o=t&-t)||16===r&&4194240&o))return t;if(4&a&&(a|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=a;0<t;)r=1<<(n=31-lt(t)),a|=e[n],t&=~r;return a}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ct;return!(4194240&(ct<<=1))&&(ct=64),e}function bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var a=31-lt(n),r=1<<a;r&t|e[a]&t&&(e[a]|=t),n&=~r}}var yt=0;function Et(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var xt,wt,Nt,kt,St,Ct=!1,_t=[],Rt=null,Pt=null,Tt=null,Ot=new Map,It=new Map,Dt=[],At="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ft(e,t){switch(e){case"focusin":case"focusout":Rt=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":It.delete(t.pointerId)}}function Lt(e,t,n,a,r,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:a,nativeEvent:o,targetContainers:[r]},null!==t&&null!==(t=yr(t))&&wt(t),e):(e.eventSystemFlags|=a,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function Bt(e){var t=gr(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void St(e.priority,(function(){Nt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=yr(n))&&wt(t),e.blockedOn=n,!1;var a=new(n=e.nativeEvent).constructor(n.type,n);Ee=a,n.target.dispatchEvent(a),Ee=null,t.shift()}return!0}function Mt(e,t,n){zt(e)&&n.delete(t)}function jt(){Ct=!1,null!==Rt&&zt(Rt)&&(Rt=null),null!==Pt&&zt(Pt)&&(Pt=null),null!==Tt&&zt(Tt)&&(Tt=null),Ot.forEach(Mt),It.forEach(Mt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,jt)))}function qt(e){function t(t){return Ut(t,e)}if(0<_t.length){Ut(_t[0],e);for(var n=1;n<_t.length;n++){var a=_t[n];a.blockedOn===e&&(a.blockedOn=null)}}for(null!==Rt&&Ut(Rt,e),null!==Pt&&Ut(Pt,e),null!==Tt&&Ut(Tt,e),Ot.forEach(t),It.forEach(t),n=0;n<Dt.length;n++)(a=Dt[n]).blockedOn===e&&(a.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)Bt(n),null===n.blockedOn&&Dt.shift()}var Wt=E.ReactCurrentBatchConfig,$t=!0;function Vt(e,t,n,a){var r=yt,o=Wt.transition;Wt.transition=null;try{yt=1,Gt(e,t,n,a)}finally{yt=r,Wt.transition=o}}function Ht(e,t,n,a){var r=yt,o=Wt.transition;Wt.transition=null;try{yt=4,Gt(e,t,n,a)}finally{yt=r,Wt.transition=o}}function Gt(e,t,n,a){if($t){var r=Qt(e,t,n,a);if(null===r)$a(e,t,a,Kt,n),Ft(e,a);else if(function(e,t,n,a,r){switch(t){case"focusin":return Rt=Lt(Rt,e,t,n,a,r),!0;case"dragenter":return Pt=Lt(Pt,e,t,n,a,r),!0;case"mouseover":return Tt=Lt(Tt,e,t,n,a,r),!0;case"pointerover":var o=r.pointerId;return Ot.set(o,Lt(Ot.get(o)||null,e,t,n,a,r)),!0;case"gotpointercapture":return o=r.pointerId,It.set(o,Lt(It.get(o)||null,e,t,n,a,r)),!0}return!1}(r,e,t,n,a))a.stopPropagation();else if(Ft(e,a),4&t&&-1<At.indexOf(e)){for(;null!==r;){var o=yr(r);if(null!==o&&xt(o),null===(o=Qt(e,t,n,a))&&$a(e,t,a,Kt,n),o===r)break;r=o}null!==r&&a.stopPropagation()}else $a(e,t,a,null,n)}}var Kt=null;function Qt(e,t,n,a){if(Kt=null,null!==(e=gr(e=xe(a))))if(null===(t=qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case at:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Xt,a=n.length,r="value"in Yt?Yt.value:Yt.textContent,o=r.length;for(e=0;e<a&&n[e]===r[e];e++);var l=a-e;for(t=1;t<=l&&n[a-t]===r[o-t];t++);return Zt=r.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function an(){return!1}function rn(e){function t(t,n,a,r,o){for(var l in this._reactName=t,this._targetInst=a,this.type=n,this.nativeEvent=r,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(r):r[l]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?nn:an,this.isPropagationStopped=an,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=rn(cn),mn=B({},cn,{view:0,detail:0}),dn=rn(mn),fn=B({},mn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),pn=rn(fn),hn=rn(B({},fn,{dataTransfer:0})),bn=rn(B({},mn,{relatedTarget:0})),vn=rn(B({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=B({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=rn(gn),En=rn(B({},cn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Nn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Nn[e])&&!!t[e]}function Sn(){return kn}var Cn=B({},mn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=rn(Cn),Rn=rn(B({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=rn(B({},mn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),Tn=rn(B({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=B({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=rn(On),Dn=[9,13,27,32],An=u&&"CompositionEvent"in window,Fn=null;u&&"documentMode"in document&&(Fn=document.documentMode);var Ln=u&&"TextEvent"in window&&!Fn,Bn=u&&(!An||Fn&&8<Fn&&11>=Fn),zn=String.fromCharCode(32),Mn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Vn(e,t,n,a){Ce(a),0<(t=Ha(t,"onChange")).length&&(n=new un("onChange","change",null,n,a),e.push({event:n,listeners:t}))}var Hn=null,Gn=null;function Kn(e){za(e,0)}function Qn(e){if(G(Er(e)))return e}function Jn(e,t){if("change"===e)return t}var Yn=!1;if(u){var Xn;if(u){var Zn="oninput"in document;if(!Zn){var ea=document.createElement("div");ea.setAttribute("oninput","return;"),Zn="function"==typeof ea.oninput}Xn=Zn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function ta(){Hn&&(Hn.detachEvent("onpropertychange",na),Gn=Hn=null)}function na(e){if("value"===e.propertyName&&Qn(Gn)){var t=[];Vn(t,Gn,e,xe(e)),Oe(Kn,t)}}function aa(e,t,n){"focusin"===e?(ta(),Gn=n,(Hn=t).attachEvent("onpropertychange",na)):"focusout"===e&&ta()}function ra(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Gn)}function oa(e,t){if("click"===e)return Qn(t)}function la(e,t){if("input"===e||"change"===e)return Qn(t)}var ia="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sa(e,t){if(ia(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(a=0;a<n.length;a++){var r=n[a];if(!m.call(t,r)||!ia(e[r],t[r]))return!1}return!0}function ca(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ua(e,t){var n,a=ca(e);for(e=0;a;){if(3===a.nodeType){if(n=e+a.textContent.length,e<=t&&n>=t)return{node:a,offset:t-e};e=n}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=ca(a)}}function ma(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?ma(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function da(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fa(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pa(e){var t=da(),n=e.focusedElem,a=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&ma(n.ownerDocument.documentElement,n)){if(null!==a&&fa(n))if(t=a.start,void 0===(e=a.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var r=n.textContent.length,o=Math.min(a.start,r);a=void 0===a.end?o:Math.min(a.end,r),!e.extend&&o>a&&(r=a,a=o,o=r),r=ua(n,o);var l=ua(n,a);r&&l&&(1!==e.rangeCount||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(r.node,r.offset),e.removeAllRanges(),o>a?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ha=u&&"documentMode"in document&&11>=document.documentMode,ba=null,va=null,ga=null,ya=!1;function Ea(e,t,n){var a=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ya||null==ba||ba!==K(a)||(a="selectionStart"in(a=ba)&&fa(a)?{start:a.selectionStart,end:a.selectionEnd}:{anchorNode:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset},ga&&sa(ga,a)||(ga=a,0<(a=Ha(va,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:a}),t.target=ba)))}function xa(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wa={animationend:xa("Animation","AnimationEnd"),animationiteration:xa("Animation","AnimationIteration"),animationstart:xa("Animation","AnimationStart"),transitionend:xa("Transition","TransitionEnd")},Na={},ka={};function Sa(e){if(Na[e])return Na[e];if(!wa[e])return e;var t,n=wa[e];for(t in n)if(n.hasOwnProperty(t)&&t in ka)return Na[e]=n[t];return e}u&&(ka=document.createElement("div").style,"AnimationEvent"in window||(delete wa.animationend.animation,delete wa.animationiteration.animation,delete wa.animationstart.animation),"TransitionEvent"in window||delete wa.transitionend.transition);var Ca=Sa("animationend"),_a=Sa("animationiteration"),Ra=Sa("animationstart"),Pa=Sa("transitionend"),Ta=new Map,Oa="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ia(e,t){Ta.set(e,t),s(t,[e])}for(var Da=0;Da<Oa.length;Da++){var Aa=Oa[Da];Ia(Aa.toLowerCase(),"on"+(Aa[0].toUpperCase()+Aa.slice(1)))}Ia(Ca,"onAnimationEnd"),Ia(_a,"onAnimationIteration"),Ia(Ra,"onAnimationStart"),Ia("dblclick","onDoubleClick"),Ia("focusin","onFocus"),Ia("focusout","onBlur"),Ia(Pa,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Fa="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),La=new Set("cancel close invalid load scroll toggle".split(" ").concat(Fa));function Ba(e,t,n){var a=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,a,r,l,i,s,c){if(Ue.apply(this,arguments),Le){if(!Le)throw Error(o(198));var u=Be;Le=!1,Be=null,ze||(ze=!0,Me=u)}}(a,t,void 0,e),e.currentTarget=null}function za(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var a=e[n],r=a.event;a=a.listeners;e:{var o=void 0;if(t)for(var l=a.length-1;0<=l;l--){var i=a[l],s=i.instance,c=i.currentTarget;if(i=i.listener,s!==o&&r.isPropagationStopped())break e;Ba(r,i,c),o=s}else for(l=0;l<a.length;l++){if(s=(i=a[l]).instance,c=i.currentTarget,i=i.listener,s!==o&&r.isPropagationStopped())break e;Ba(r,i,c),o=s}}}if(ze)throw e=Me,ze=!1,Me=null,e}function Ma(e,t){var n=t[hr];void 0===n&&(n=t[hr]=new Set);var a=e+"__bubble";n.has(a)||(Wa(t,e,2,!1),n.add(a))}function ja(e,t,n){var a=0;t&&(a|=4),Wa(n,e,a,t)}var Ua="_reactListening"+Math.random().toString(36).slice(2);function qa(e){if(!e[Ua]){e[Ua]=!0,l.forEach((function(t){"selectionchange"!==t&&(La.has(t)||ja(t,!1,e),ja(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ua]||(t[Ua]=!0,ja("selectionchange",!1,t))}}function Wa(e,t,n,a){switch(Jt(t)){case 1:var r=Vt;break;case 4:r=Ht;break;default:r=Gt}n=r.bind(null,t,n,e),r=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),a?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function $a(e,t,n,a,r){var o=a;if(!(1&t||2&t||null===a))e:for(;;){if(null===a)return;var l=a.tag;if(3===l||4===l){var i=a.stateNode.containerInfo;if(i===r||8===i.nodeType&&i.parentNode===r)break;if(4===l)for(l=a.return;null!==l;){var s=l.tag;if((3===s||4===s)&&((s=l.stateNode.containerInfo)===r||8===s.nodeType&&s.parentNode===r))return;l=l.return}for(;null!==i;){if(null===(l=gr(i)))return;if(5===(s=l.tag)||6===s){a=o=l;continue e}i=i.parentNode}}a=a.return}Oe((function(){var a=o,r=xe(n),l=[];e:{var i=Ta.get(e);if(void 0!==i){var s=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=_n;break;case"focusin":c="focus",s=bn;break;case"focusout":c="blur",s=bn;break;case"beforeblur":case"afterblur":s=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Pn;break;case Ca:case _a:case Ra:s=vn;break;case Pa:s=Tn;break;case"scroll":s=dn;break;case"wheel":s=In;break;case"copy":case"cut":case"paste":s=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Rn}var u=!!(4&t),m=!u&&"scroll"===e,d=u?null!==i?i+"Capture":null:i;u=[];for(var f,p=a;null!==p;){var h=(f=p).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==d&&null!=(h=Ie(p,d))&&u.push(Va(p,h,f))),m)break;p=p.return}0<u.length&&(i=new s(i,c,null,n,r),l.push({event:i,listeners:u}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Ee||!(c=n.relatedTarget||n.fromElement)||!gr(c)&&!c[pr])&&(s||i)&&(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=a,null!==(c=(c=n.relatedTarget||n.toElement)?gr(c):null)&&(c!==(m=qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=a),s!==c)){if(u=pn,h="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Rn,h="onPointerLeave",d="onPointerEnter",p="pointer"),m=null==s?i:Er(s),f=null==c?i:Er(c),(i=new u(h,p+"leave",s,n,r)).target=m,i.relatedTarget=f,h=null,gr(r)===a&&((u=new u(d,p+"enter",c,n,r)).target=f,u.relatedTarget=m,h=u),m=h,s&&c)e:{for(d=c,p=0,f=u=s;f;f=Ga(f))p++;for(f=0,h=d;h;h=Ga(h))f++;for(;0<p-f;)u=Ga(u),p--;for(;0<f-p;)d=Ga(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break e;u=Ga(u),d=Ga(d)}u=null}else u=null;null!==s&&Ka(l,i,s,u,!1),null!==c&&null!==m&&Ka(l,m,c,u,!0)}if("select"===(s=(i=a?Er(a):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var b=Jn;else if($n(i))if(Yn)b=la;else{b=ra;var v=aa}else(s=i.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(b=oa);switch(b&&(b=b(e,a))?Vn(l,b,n,r):(v&&v(e,i,a),"focusout"===e&&(v=i._wrapperState)&&v.controlled&&"number"===i.type&&ee(i,"number",i.value)),v=a?Er(a):window,e){case"focusin":($n(v)||"true"===v.contentEditable)&&(ba=v,va=a,ga=null);break;case"focusout":ga=va=ba=null;break;case"mousedown":ya=!0;break;case"contextmenu":case"mouseup":case"dragend":ya=!1,Ea(l,n,r);break;case"selectionchange":if(ha)break;case"keydown":case"keyup":Ea(l,n,r)}var g;if(An)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else qn?jn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Bn&&"ko"!==n.locale&&(qn||"onCompositionStart"!==y?"onCompositionEnd"===y&&qn&&(g=en()):(Xt="value"in(Yt=r)?Yt.value:Yt.textContent,qn=!0)),0<(v=Ha(a,y)).length&&(y=new En(y,e,null,n,r),l.push({event:y,listeners:v}),(g||null!==(g=Un(n)))&&(y.data=g))),(g=Ln?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Mn=!0,zn);case"textInput":return(e=t.data)===zn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!An&&jn(e,t)?(e=en(),Zt=Xt=Yt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(a=Ha(a,"onBeforeInput")).length&&(r=new En("onBeforeInput","beforeinput",null,n,r),l.push({event:r,listeners:a}),r.data=g)}za(l,t)}))}function Va(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ha(e,t){for(var n=t+"Capture",a=[];null!==e;){var r=e,o=r.stateNode;5===r.tag&&null!==o&&(r=o,null!=(o=Ie(e,n))&&a.unshift(Va(e,o,r)),null!=(o=Ie(e,t))&&a.push(Va(e,o,r))),e=e.return}return a}function Ga(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ka(e,t,n,a,r){for(var o=t._reactName,l=[];null!==n&&n!==a;){var i=n,s=i.alternate,c=i.stateNode;if(null!==s&&s===a)break;5===i.tag&&null!==c&&(i=c,r?null!=(s=Ie(n,o))&&l.unshift(Va(n,s,i)):r||null!=(s=Ie(n,o))&&l.push(Va(n,s,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Qa=/\r\n?/g,Ja=/\u0000|\uFFFD/g;function Ya(e){return("string"==typeof e?e:""+e).replace(Qa,"\n").replace(Ja,"")}function Xa(e,t,n){if(t=Ya(t),Ya(e)!==t&&n)throw Error(o(425))}function Za(){}var er=null,tr=null;function nr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ar="function"==typeof setTimeout?setTimeout:void 0,rr="function"==typeof clearTimeout?clearTimeout:void 0,or="function"==typeof Promise?Promise:void 0,lr="function"==typeof queueMicrotask?queueMicrotask:void 0!==or?function(e){return or.resolve(null).then(e).catch(ir)}:ar;function ir(e){setTimeout((function(){throw e}))}function sr(e,t){var n=t,a=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&8===r.nodeType)if("/$"===(n=r.data)){if(0===a)return e.removeChild(r),void qt(t);a--}else"$"!==n&&"$?"!==n&&"$!"!==n||a++;n=r}while(n);qt(t)}function cr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ur(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var mr=Math.random().toString(36).slice(2),dr="__reactFiber$"+mr,fr="__reactProps$"+mr,pr="__reactContainer$"+mr,hr="__reactEvents$"+mr,br="__reactListeners$"+mr,vr="__reactHandles$"+mr;function gr(e){var t=e[dr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pr]||n[dr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ur(e);null!==e;){if(n=e[dr])return n;e=ur(e)}return t}n=(e=n).parentNode}return null}function yr(e){return!(e=e[dr]||e[pr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Er(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xr(e){return e[fr]||null}var wr=[],Nr=-1;function kr(e){return{current:e}}function Sr(e){0>Nr||(e.current=wr[Nr],wr[Nr]=null,Nr--)}function Cr(e,t){Nr++,wr[Nr]=e.current,e.current=t}var _r={},Rr=kr(_r),Pr=kr(!1),Tr=_r;function Or(e,t){var n=e.type.contextTypes;if(!n)return _r;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===t)return a.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in n)o[r]=t[r];return a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ir(e){return null!=e.childContextTypes}function Dr(){Sr(Pr),Sr(Rr)}function Ar(e,t,n){if(Rr.current!==_r)throw Error(o(168));Cr(Rr,t),Cr(Pr,n)}function Fr(e,t,n){var a=e.stateNode;if(t=t.childContextTypes,"function"!=typeof a.getChildContext)return n;for(var r in a=a.getChildContext())if(!(r in t))throw Error(o(108,W(e)||"Unknown",r));return B({},n,a)}function Lr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_r,Tr=Rr.current,Cr(Rr,e),Cr(Pr,Pr.current),!0}function Br(e,t,n){var a=e.stateNode;if(!a)throw Error(o(169));n?(e=Fr(e,t,Tr),a.__reactInternalMemoizedMergedChildContext=e,Sr(Pr),Sr(Rr),Cr(Rr,e)):Sr(Pr),Cr(Pr,n)}var zr=null,Mr=!1,jr=!1;function Ur(e){null===zr?zr=[e]:zr.push(e)}function qr(){if(!jr&&null!==zr){jr=!0;var e=0,t=yt;try{var n=zr;for(yt=1;e<n.length;e++){var a=n[e];do{a=a(!0)}while(null!==a)}zr=null,Mr=!1}catch(t){throw null!==zr&&(zr=zr.slice(e+1)),Ge(Ze,qr),t}finally{yt=t,jr=!1}}return null}var Wr=[],$r=0,Vr=null,Hr=0,Gr=[],Kr=0,Qr=null,Jr=1,Yr="";function Xr(e,t){Wr[$r++]=Hr,Wr[$r++]=Vr,Vr=e,Hr=t}function Zr(e,t,n){Gr[Kr++]=Jr,Gr[Kr++]=Yr,Gr[Kr++]=Qr,Qr=e;var a=Jr;e=Yr;var r=32-lt(a)-1;a&=~(1<<r),n+=1;var o=32-lt(t)+r;if(30<o){var l=r-r%5;o=(a&(1<<l)-1).toString(32),a>>=l,r-=l,Jr=1<<32-lt(t)+r|n<<r|a,Yr=o+e}else Jr=1<<o|n<<r|a,Yr=e}function eo(e){null!==e.return&&(Xr(e,1),Zr(e,1,0))}function to(e){for(;e===Vr;)Vr=Wr[--$r],Wr[$r]=null,Hr=Wr[--$r],Wr[$r]=null;for(;e===Qr;)Qr=Gr[--Kr],Gr[Kr]=null,Yr=Gr[--Kr],Gr[Kr]=null,Jr=Gr[--Kr],Gr[Kr]=null}var no=null,ao=null,ro=!1,oo=null;function lo(e,t){var n=Oc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ao=cr(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ao=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qr?{id:Jr,overflow:Yr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Oc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ao=null,!0);default:return!1}}function so(e){return!(!(1&e.mode)||128&e.flags)}function co(e){if(ro){var t=ao;if(t){var n=t;if(!io(e,t)){if(so(e))throw Error(o(418));t=cr(n.nextSibling);var a=no;t&&io(e,t)?lo(a,n):(e.flags=-4097&e.flags|2,ro=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ro=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function mo(e){if(e!==no)return!1;if(!ro)return uo(e),ro=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nr(e.type,e.memoizedProps)),t&&(t=ao)){if(so(e))throw fo(),Error(o(418));for(;t;)lo(e,t),t=cr(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ao=cr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ao=null}}else ao=no?cr(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ao;e;)e=cr(e.nextSibling)}function po(){ao=no=null,ro=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var bo=E.ReactCurrentBatchConfig;function vo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var a=n.stateNode}if(!a)throw Error(o(147,e));var r=a,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=r.refs;null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function go(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function yo(e){return(0,e._init)(e._payload)}function Eo(e){function t(t,n){if(e){var a=t.deletions;null===a?(t.deletions=[n],t.flags|=16):a.push(n)}}function n(n,a){if(!e)return null;for(;null!==a;)t(n,a),a=a.sibling;return null}function a(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Dc(e,t)).index=0,e.sibling=null,e}function l(t,n,a){return t.index=a,e?null!==(a=t.alternate)?(a=a.index)<n?(t.flags|=2,n):a:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,a){return null===t||6!==t.tag?((t=Bc(n,e.mode,a)).return=e,t):((t=r(t,n)).return=e,t)}function c(e,t,n,a){var o=n.type;return o===N?m(e,t,n.props.children,a,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===I&&yo(o)===t.type)?((a=r(t,n.props)).ref=vo(e,t,n),a.return=e,a):((a=Ac(n.type,n.key,n.props,null,e.mode,a)).ref=vo(e,t,n),a.return=e,a)}function u(e,t,n,a){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,a)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function m(e,t,n,a,o){return null===t||7!==t.tag?((t=Fc(n,e.mode,a,o)).return=e,t):((t=r(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Ac(t.type,t.key,t.props,null,e.mode,n)).ref=vo(e,null,t),n.return=e,n;case w:return(t=zc(t,e.mode,n)).return=e,t;case I:return d(e,(0,t._init)(t._payload),n)}if(te(t)||F(t))return(t=Fc(t,e.mode,n,null)).return=e,t;go(e,t)}return null}function f(e,t,n,a){var r=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==r?null:s(e,t,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===r?c(e,t,n,a):null;case w:return n.key===r?u(e,t,n,a):null;case I:return f(e,t,(r=n._init)(n._payload),a)}if(te(n)||F(n))return null!==r?null:m(e,t,n,a,null);go(e,n)}return null}function p(e,t,n,a,r){if("string"==typeof a&&""!==a||"number"==typeof a)return s(t,e=e.get(n)||null,""+a,r);if("object"==typeof a&&null!==a){switch(a.$$typeof){case x:return c(t,e=e.get(null===a.key?n:a.key)||null,a,r);case w:return u(t,e=e.get(null===a.key?n:a.key)||null,a,r);case I:return p(e,t,n,(0,a._init)(a._payload),r)}if(te(a)||F(a))return m(t,e=e.get(n)||null,a,r,null);go(t,a)}return null}function h(r,o,i,s){for(var c=null,u=null,m=o,h=o=0,b=null;null!==m&&h<i.length;h++){m.index>h?(b=m,m=null):b=m.sibling;var v=f(r,m,i[h],s);if(null===v){null===m&&(m=b);break}e&&m&&null===v.alternate&&t(r,m),o=l(v,o,h),null===u?c=v:u.sibling=v,u=v,m=b}if(h===i.length)return n(r,m),ro&&Xr(r,h),c;if(null===m){for(;h<i.length;h++)null!==(m=d(r,i[h],s))&&(o=l(m,o,h),null===u?c=m:u.sibling=m,u=m);return ro&&Xr(r,h),c}for(m=a(r,m);h<i.length;h++)null!==(b=p(m,r,h,i[h],s))&&(e&&null!==b.alternate&&m.delete(null===b.key?h:b.key),o=l(b,o,h),null===u?c=b:u.sibling=b,u=b);return e&&m.forEach((function(e){return t(r,e)})),ro&&Xr(r,h),c}function b(r,i,s,c){var u=F(s);if("function"!=typeof u)throw Error(o(150));if(null==(s=u.call(s)))throw Error(o(151));for(var m=u=null,h=i,b=i=0,v=null,g=s.next();null!==h&&!g.done;b++,g=s.next()){h.index>b?(v=h,h=null):v=h.sibling;var y=f(r,h,g.value,c);if(null===y){null===h&&(h=v);break}e&&h&&null===y.alternate&&t(r,h),i=l(y,i,b),null===m?u=y:m.sibling=y,m=y,h=v}if(g.done)return n(r,h),ro&&Xr(r,b),u;if(null===h){for(;!g.done;b++,g=s.next())null!==(g=d(r,g.value,c))&&(i=l(g,i,b),null===m?u=g:m.sibling=g,m=g);return ro&&Xr(r,b),u}for(h=a(r,h);!g.done;b++,g=s.next())null!==(g=p(h,r,b,g.value,c))&&(e&&null!==g.alternate&&h.delete(null===g.key?b:g.key),i=l(g,i,b),null===m?u=g:m.sibling=g,m=g);return e&&h.forEach((function(e){return t(r,e)})),ro&&Xr(r,b),u}return function e(a,o,l,s){if("object"==typeof l&&null!==l&&l.type===N&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case x:e:{for(var c=l.key,u=o;null!==u;){if(u.key===c){if((c=l.type)===N){if(7===u.tag){n(a,u.sibling),(o=r(u,l.props.children)).return=a,a=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===I&&yo(c)===u.type){n(a,u.sibling),(o=r(u,l.props)).ref=vo(a,u,l),o.return=a,a=o;break e}n(a,u);break}t(a,u),u=u.sibling}l.type===N?((o=Fc(l.props.children,a.mode,s,l.key)).return=a,a=o):((s=Ac(l.type,l.key,l.props,null,a.mode,s)).ref=vo(a,o,l),s.return=a,a=s)}return i(a);case w:e:{for(u=l.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(a,o.sibling),(o=r(o,l.children||[])).return=a,a=o;break e}n(a,o);break}t(a,o),o=o.sibling}(o=zc(l,a.mode,s)).return=a,a=o}return i(a);case I:return e(a,o,(u=l._init)(l._payload),s)}if(te(l))return h(a,o,l,s);if(F(l))return b(a,o,l,s);go(a,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(a,o.sibling),(o=r(o,l)).return=a,a=o):(n(a,o),(o=Bc(l,a.mode,s)).return=a,a=o),i(a)):n(a,o)}}var xo=Eo(!0),wo=Eo(!1),No=kr(null),ko=null,So=null,Co=null;function _o(){Co=So=ko=null}function Ro(e){var t=No.current;Sr(No),e._currentValue=t}function Po(e,t,n){for(;null!==e;){var a=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==a&&(a.childLanes|=t)):null!==a&&(a.childLanes&t)!==t&&(a.childLanes|=t),e===n)break;e=e.return}}function To(e,t){ko=e,Co=So=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(yi=!0),e.firstContext=null)}function Oo(e){var t=e._currentValue;if(Co!==e)if(e={context:e,memoizedValue:t,next:null},null===So){if(null===ko)throw Error(o(308));So=e,ko.dependencies={lanes:0,firstContext:e}}else So=So.next=e;return t}var Io=null;function Do(e){null===Io?Io=[e]:Io.push(e)}function Ao(e,t,n,a){var r=t.interleaved;return null===r?(n.next=n,Do(t)):(n.next=r.next,r.next=n),t.interleaved=n,Fo(e,a)}function Fo(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Lo=!1;function Bo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function jo(e,t,n){var a=e.updateQueue;if(null===a)return null;if(a=a.shared,2&Rs){var r=a.pending;return null===r?t.next=t:(t.next=r.next,r.next=t),a.pending=t,Fo(e,n)}return null===(r=a.interleaved)?(t.next=t,Do(a)):(t.next=r.next,r.next=t),a.interleaved=t,Fo(e,n)}function Uo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var a=t.lanes;n|=a&=e.pendingLanes,t.lanes=n,gt(e,n)}}function qo(e,t){var n=e.updateQueue,a=e.alternate;if(null!==a&&n===(a=a.updateQueue)){var r=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?r=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?r=o=t:o=o.next=t}else r=o=t;return n={baseState:a.baseState,firstBaseUpdate:r,lastBaseUpdate:o,shared:a.shared,effects:a.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Wo(e,t,n,a){var r=e.updateQueue;Lo=!1;var o=r.firstBaseUpdate,l=r.lastBaseUpdate,i=r.shared.pending;if(null!==i){r.shared.pending=null;var s=i,c=s.next;s.next=null,null===l?o=c:l.next=c,l=s;var u=e.alternate;null!==u&&(i=(u=u.updateQueue).lastBaseUpdate)!==l&&(null===i?u.firstBaseUpdate=c:i.next=c,u.lastBaseUpdate=s)}if(null!==o){var m=r.baseState;for(l=0,u=c=s=null,i=o;;){var d=i.lane,f=i.eventTime;if((a&d)===d){null!==u&&(u=u.next={eventTime:f,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var p=e,h=i;switch(d=t,f=n,h.tag){case 1:if("function"==typeof(p=h.payload)){m=p.call(f,m,d);break e}m=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(d="function"==typeof(p=h.payload)?p.call(f,m,d):p))break e;m=B({},m,d);break e;case 2:Lo=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(d=r.effects)?r.effects=[i]:d.push(i))}else f={eventTime:f,lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===u?(c=u=f,s=m):u=u.next=f,l|=d;if(null===(i=i.next)){if(null===(i=r.shared.pending))break;i=(d=i).next,d.next=null,r.lastBaseUpdate=d,r.shared.pending=null}}if(null===u&&(s=m),r.baseState=s,r.firstBaseUpdate=c,r.lastBaseUpdate=u,null!==(t=r.shared.interleaved)){r=t;do{l|=r.lane,r=r.next}while(r!==t)}else null===o&&(r.shared.lanes=0);Ls|=l,e.lanes=l,e.memoizedState=m}}function $o(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var a=e[t],r=a.callback;if(null!==r){if(a.callback=null,a=n,"function"!=typeof r)throw Error(o(191,r));r.call(a)}}}var Vo={},Ho=kr(Vo),Go=kr(Vo),Ko=kr(Vo);function Qo(e){if(e===Vo)throw Error(o(174));return e}function Jo(e,t){switch(Cr(Ko,t),Cr(Go,e),Cr(Ho,Vo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Sr(Ho),Cr(Ho,t)}function Yo(){Sr(Ho),Sr(Go),Sr(Ko)}function Xo(e){Qo(Ko.current);var t=Qo(Ho.current),n=se(t,e.type);t!==n&&(Cr(Go,e),Cr(Ho,n))}function Zo(e){Go.current===e&&(Sr(Ho),Sr(Go))}var el=kr(0);function tl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var nl=[];function al(){for(var e=0;e<nl.length;e++)nl[e]._workInProgressVersionPrimary=null;nl.length=0}var rl=E.ReactCurrentDispatcher,ol=E.ReactCurrentBatchConfig,ll=0,il=null,sl=null,cl=null,ul=!1,ml=!1,dl=0,fl=0;function pl(){throw Error(o(321))}function hl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ia(e[n],t[n]))return!1;return!0}function bl(e,t,n,a,r,l){if(ll=l,il=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,rl.current=null===e||null===e.memoizedState?Zl:ei,e=n(a,r),ml){l=0;do{if(ml=!1,dl=0,25<=l)throw Error(o(301));l+=1,cl=sl=null,t.updateQueue=null,rl.current=ti,e=n(a,r)}while(ml)}if(rl.current=Xl,t=null!==sl&&null!==sl.next,ll=0,cl=sl=il=null,ul=!1,t)throw Error(o(300));return e}function vl(){var e=0!==dl;return dl=0,e}function gl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===cl?il.memoizedState=cl=e:cl=cl.next=e,cl}function yl(){if(null===sl){var e=il.alternate;e=null!==e?e.memoizedState:null}else e=sl.next;var t=null===cl?il.memoizedState:cl.next;if(null!==t)cl=t,sl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(sl=e).memoizedState,baseState:sl.baseState,baseQueue:sl.baseQueue,queue:sl.queue,next:null},null===cl?il.memoizedState=cl=e:cl=cl.next=e}return cl}function El(e,t){return"function"==typeof t?t(e):t}function xl(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var a=sl,r=a.baseQueue,l=n.pending;if(null!==l){if(null!==r){var i=r.next;r.next=l.next,l.next=i}a.baseQueue=r=l,n.pending=null}if(null!==r){l=r.next,a=a.baseState;var s=i=null,c=null,u=l;do{var m=u.lane;if((ll&m)===m)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),a=u.hasEagerState?u.eagerState:e(a,u.action);else{var d={lane:m,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=d,i=a):c=c.next=d,il.lanes|=m,Ls|=m}u=u.next}while(null!==u&&u!==l);null===c?i=a:c.next=s,ia(a,t.memoizedState)||(yi=!0),t.memoizedState=a,t.baseState=i,t.baseQueue=c,n.lastRenderedState=a}if(null!==(e=n.interleaved)){r=e;do{l=r.lane,il.lanes|=l,Ls|=l,r=r.next}while(r!==e)}else null===r&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function wl(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var a=n.dispatch,r=n.pending,l=t.memoizedState;if(null!==r){n.pending=null;var i=r=r.next;do{l=e(l,i.action),i=i.next}while(i!==r);ia(l,t.memoizedState)||(yi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,a]}function Nl(){}function kl(e,t){var n=il,a=yl(),r=t(),l=!ia(a.memoizedState,r);if(l&&(a.memoizedState=r,yi=!0),a=a.queue,Ll(_l.bind(null,n,a,e),[e]),a.getSnapshot!==t||l||null!==cl&&1&cl.memoizedState.tag){if(n.flags|=2048,Ol(9,Cl.bind(null,n,a,r,t),void 0,null),null===Ps)throw Error(o(349));30&ll||Sl(n,t,r)}return r}function Sl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Cl(e,t,n,a){t.value=n,t.getSnapshot=a,Rl(t)&&Pl(e)}function _l(e,t,n){return n((function(){Rl(t)&&Pl(e)}))}function Rl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ia(e,n)}catch(e){return!0}}function Pl(e){var t=Fo(e,1);null!==t&&nc(t,e,1,-1)}function Tl(e){var t=gl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:El,lastRenderedState:e},t.queue=e,e=e.dispatch=Kl.bind(null,il,e),[t.memoizedState,e]}function Ol(e,t,n,a){return e={tag:e,create:t,destroy:n,deps:a,next:null},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(a=n.next,n.next=e,e.next=a,t.lastEffect=e),e}function Il(){return yl().memoizedState}function Dl(e,t,n,a){var r=gl();il.flags|=e,r.memoizedState=Ol(1|t,n,void 0,void 0===a?null:a)}function Al(e,t,n,a){var r=yl();a=void 0===a?null:a;var o=void 0;if(null!==sl){var l=sl.memoizedState;if(o=l.destroy,null!==a&&hl(a,l.deps))return void(r.memoizedState=Ol(t,n,o,a))}il.flags|=e,r.memoizedState=Ol(1|t,n,o,a)}function Fl(e,t){return Dl(8390656,8,e,t)}function Ll(e,t){return Al(2048,8,e,t)}function Bl(e,t){return Al(4,2,e,t)}function zl(e,t){return Al(4,4,e,t)}function Ml(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function jl(e,t,n){return n=null!=n?n.concat([e]):null,Al(4,4,Ml.bind(null,t,e),n)}function Ul(){}function ql(e,t){var n=yl();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&hl(t,a[1])?a[0]:(n.memoizedState=[e,t],e)}function Wl(e,t){var n=yl();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&hl(t,a[1])?a[0]:(e=e(),n.memoizedState=[e,t],e)}function $l(e,t,n){return 21&ll?(ia(n,t)||(n=ht(),il.lanes|=n,Ls|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,yi=!0),e.memoizedState=n)}function Vl(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var a=ol.transition;ol.transition={};try{e(!1),t()}finally{yt=n,ol.transition=a}}function Hl(){return yl().memoizedState}function Gl(e,t,n){var a=tc(e);n={lane:a,action:n,hasEagerState:!1,eagerState:null,next:null},Ql(e)?Jl(t,n):null!==(n=Ao(e,t,n,a))&&(nc(n,e,a,ec()),Yl(n,t,a))}function Kl(e,t,n){var a=tc(e),r={lane:a,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ql(e))Jl(t,r);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(r.hasEagerState=!0,r.eagerState=i,ia(i,l)){var s=t.interleaved;return null===s?(r.next=r,Do(t)):(r.next=s.next,s.next=r),void(t.interleaved=r)}}catch(e){}null!==(n=Ao(e,t,r,a))&&(nc(n,e,a,r=ec()),Yl(n,t,a))}}function Ql(e){var t=e.alternate;return e===il||null!==t&&t===il}function Jl(e,t){ml=ul=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Yl(e,t,n){if(4194240&n){var a=t.lanes;n|=a&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Xl={readContext:Oo,useCallback:pl,useContext:pl,useEffect:pl,useImperativeHandle:pl,useInsertionEffect:pl,useLayoutEffect:pl,useMemo:pl,useReducer:pl,useRef:pl,useState:pl,useDebugValue:pl,useDeferredValue:pl,useTransition:pl,useMutableSource:pl,useSyncExternalStore:pl,useId:pl,unstable_isNewReconciler:!1},Zl={readContext:Oo,useCallback:function(e,t){return gl().memoizedState=[e,void 0===t?null:t],e},useContext:Oo,useEffect:Fl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Dl(4194308,4,Ml.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Dl(4194308,4,e,t)},useInsertionEffect:function(e,t){return Dl(4,2,e,t)},useMemo:function(e,t){var n=gl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var a=gl();return t=void 0!==n?n(t):t,a.memoizedState=a.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},a.queue=e,e=e.dispatch=Gl.bind(null,il,e),[a.memoizedState,e]},useRef:function(e){return e={current:e},gl().memoizedState=e},useState:Tl,useDebugValue:Ul,useDeferredValue:function(e){return gl().memoizedState=e},useTransition:function(){var e=Tl(!1),t=e[0];return e=Vl.bind(null,e[1]),gl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var a=il,r=gl();if(ro){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Ps)throw Error(o(349));30&ll||Sl(a,t,n)}r.memoizedState=n;var l={value:n,getSnapshot:t};return r.queue=l,Fl(_l.bind(null,a,l,e),[e]),a.flags|=2048,Ol(9,Cl.bind(null,a,l,n,t),void 0,null),n},useId:function(){var e=gl(),t=Ps.identifierPrefix;if(ro){var n=Yr;t=":"+t+"R"+(n=(Jr&~(1<<32-lt(Jr)-1)).toString(32)+n),0<(n=dl++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ei={readContext:Oo,useCallback:ql,useContext:Oo,useEffect:Ll,useImperativeHandle:jl,useInsertionEffect:Bl,useLayoutEffect:zl,useMemo:Wl,useReducer:xl,useRef:Il,useState:function(){return xl(El)},useDebugValue:Ul,useDeferredValue:function(e){return $l(yl(),sl.memoizedState,e)},useTransition:function(){return[xl(El)[0],yl().memoizedState]},useMutableSource:Nl,useSyncExternalStore:kl,useId:Hl,unstable_isNewReconciler:!1},ti={readContext:Oo,useCallback:ql,useContext:Oo,useEffect:Ll,useImperativeHandle:jl,useInsertionEffect:Bl,useLayoutEffect:zl,useMemo:Wl,useReducer:wl,useRef:Il,useState:function(){return wl(El)},useDebugValue:Ul,useDeferredValue:function(e){var t=yl();return null===sl?t.memoizedState=e:$l(t,sl.memoizedState,e)},useTransition:function(){return[wl(El)[0],yl().memoizedState]},useMutableSource:Nl,useSyncExternalStore:kl,useId:Hl,unstable_isNewReconciler:!1};function ni(e,t){if(e&&e.defaultProps){for(var n in t=B({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ai(e,t,n,a){n=null==(n=n(a,t=e.memoizedState))?t:B({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ri={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var a=ec(),r=tc(e),o=Mo(a,r);o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,r))&&(nc(t,e,r,a),Uo(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var a=ec(),r=tc(e),o=Mo(a,r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,r))&&(nc(t,e,r,a),Uo(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),a=tc(e),r=Mo(n,a);r.tag=2,null!=t&&(r.callback=t),null!==(t=jo(e,r,a))&&(nc(t,e,a,n),Uo(t,e,a))}};function oi(e,t,n,a,r,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(a,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&sa(n,a)&&sa(r,o))}function li(e,t,n){var a=!1,r=_r,o=t.contextType;return"object"==typeof o&&null!==o?o=Oo(o):(r=Ir(t)?Tr:Rr.current,o=(a=null!=(a=t.contextTypes))?Or(e,r):_r),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ri,e.stateNode=t,t._reactInternals=e,a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=o),t}function ii(e,t,n,a){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,a),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,a),t.state!==e&&ri.enqueueReplaceState(t,t.state,null)}function si(e,t,n,a){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs={},Bo(e);var o=t.contextType;"object"==typeof o&&null!==o?r.context=Oo(o):(o=Ir(t)?Tr:Rr.current,r.context=Or(e,o)),r.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ai(e,t,o,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&ri.enqueueReplaceState(r,r.state,null),Wo(e,n,r,a),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4194308)}function ci(e,t){try{var n="",a=t;do{n+=U(a),a=a.return}while(a);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r,digest:null}}function ui(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function mi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var di="function"==typeof WeakMap?WeakMap:Map;function fi(e,t,n){(n=Mo(-1,n)).tag=3,n.payload={element:null};var a=t.value;return n.callback=function(){$s||($s=!0,Vs=a),mi(0,t)},n}function pi(e,t,n){(n=Mo(-1,n)).tag=3;var a=e.type.getDerivedStateFromError;if("function"==typeof a){var r=t.value;n.payload=function(){return a(r)},n.callback=function(){mi(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){mi(0,t),"function"!=typeof a&&(null===Hs?Hs=new Set([this]):Hs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hi(e,t,n){var a=e.pingCache;if(null===a){a=e.pingCache=new di;var r=new Set;a.set(t,r)}else void 0===(r=a.get(t))&&(r=new Set,a.set(t,r));r.has(n)||(r.add(n),e=Sc.bind(null,e,t,n),t.then(e,e))}function bi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vi(e,t,n,a,r){return 1&e.mode?(e.flags|=65536,e.lanes=r,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Mo(-1,1)).tag=2,jo(n,t,1))),n.lanes|=1),e)}var gi=E.ReactCurrentOwner,yi=!1;function Ei(e,t,n,a){t.child=null===e?wo(t,null,n,a):xo(t,e.child,n,a)}function xi(e,t,n,a,r){n=n.render;var o=t.ref;return To(t,r),a=bl(e,t,n,a,o,r),n=vl(),null===e||yi?(ro&&n&&eo(t),t.flags|=1,Ei(e,t,a,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,$i(e,t,r))}function wi(e,t,n,a,r){if(null===e){var o=n.type;return"function"!=typeof o||Ic(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ac(n.type,null,a,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ni(e,t,o,a,r))}if(o=e.child,!(e.lanes&r)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:sa)(l,a)&&e.ref===t.ref)return $i(e,t,r)}return t.flags|=1,(e=Dc(o,a)).ref=t.ref,e.return=t,t.child=e}function Ni(e,t,n,a,r){if(null!==e){var o=e.memoizedProps;if(sa(o,a)&&e.ref===t.ref){if(yi=!1,t.pendingProps=a=o,!(e.lanes&r))return t.lanes=e.lanes,$i(e,t,r);131072&e.flags&&(yi=!0)}}return Ci(e,t,n,a,r)}function ki(e,t,n){var a=t.pendingProps,r=a.children,o=null!==e?e.memoizedState:null;if("hidden"===a.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Cr(Ds,Is),Is|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},a=null!==o?o.baseLanes:n,Cr(Ds,Is),Is|=a}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Cr(Ds,Is),Is|=n;else null!==o?(a=o.baseLanes|n,t.memoizedState=null):a=n,Cr(Ds,Is),Is|=a;return Ei(e,t,r,n),t.child}function Si(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ci(e,t,n,a,r){var o=Ir(n)?Tr:Rr.current;return o=Or(t,o),To(t,r),n=bl(e,t,n,a,o,r),a=vl(),null===e||yi?(ro&&a&&eo(t),t.flags|=1,Ei(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,$i(e,t,r))}function _i(e,t,n,a,r){if(Ir(n)){var o=!0;Lr(t)}else o=!1;if(To(t,r),null===t.stateNode)Wi(e,t),li(t,n,a),si(t,n,a,r),a=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var s=l.context,c=n.contextType;c="object"==typeof c&&null!==c?Oo(c):Or(t,c=Ir(n)?Tr:Rr.current);var u=n.getDerivedStateFromProps,m="function"==typeof u||"function"==typeof l.getSnapshotBeforeUpdate;m||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==a||s!==c)&&ii(t,l,a,c),Lo=!1;var d=t.memoizedState;l.state=d,Wo(t,a,l,r),s=t.memoizedState,i!==a||d!==s||Pr.current||Lo?("function"==typeof u&&(ai(t,n,u,a),s=t.memoizedState),(i=Lo||oi(t,n,i,a,d,s,c))?(m||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=a,t.memoizedState=s),l.props=a,l.state=s,l.context=c,a=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),a=!1)}else{l=t.stateNode,zo(e,t),i=t.memoizedProps,c=t.type===t.elementType?i:ni(t.type,i),l.props=c,m=t.pendingProps,d=l.context,s="object"==typeof(s=n.contextType)&&null!==s?Oo(s):Or(t,s=Ir(n)?Tr:Rr.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==m||d!==s)&&ii(t,l,a,s),Lo=!1,d=t.memoizedState,l.state=d,Wo(t,a,l,r);var p=t.memoizedState;i!==m||d!==p||Pr.current||Lo?("function"==typeof f&&(ai(t,n,f,a),p=t.memoizedState),(c=Lo||oi(t,n,c,a,d,p,s)||!1)?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(a,p,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(a,p,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=a,t.memoizedState=p),l.props=a,l.state=p,l.context=s,a=c):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),a=!1)}return Ri(e,t,n,a,o,r)}function Ri(e,t,n,a,r,o){Si(e,t);var l=!!(128&t.flags);if(!a&&!l)return r&&Br(t,n,!1),$i(e,t,o);a=t.stateNode,gi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:a.render();return t.flags|=1,null!==e&&l?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,i,o)):Ei(e,t,i,o),t.memoizedState=a.state,r&&Br(t,n,!0),t.child}function Pi(e){var t=e.stateNode;t.pendingContext?Ar(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ar(0,t.context,!1),Jo(e,t.containerInfo)}function Ti(e,t,n,a,r){return po(),ho(r),t.flags|=256,Ei(e,t,n,a),t.child}var Oi,Ii,Di,Ai,Fi={dehydrated:null,treeContext:null,retryLane:0};function Li(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bi(e,t,n){var a,r=t.pendingProps,l=el.current,i=!1,s=!!(128&t.flags);if((a=s)||(a=(null===e||null!==e.memoizedState)&&!!(2&l)),a?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Cr(el,1&l),null===e)return co(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=r.children,e=r.fallback,i?(r=t.mode,i=t.child,s={mode:"hidden",children:s},1&r||null===i?i=Lc(s,r,0,null):(i.childLanes=0,i.pendingProps=s),e=Fc(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Li(n),t.memoizedState=Fi,e):zi(t,s));if(null!==(l=e.memoizedState)&&null!==(a=l.dehydrated))return function(e,t,n,a,r,l,i){if(n)return 256&t.flags?(t.flags&=-257,Mi(e,t,i,a=ui(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=a.fallback,r=t.mode,a=Lc({mode:"visible",children:a.children},r,0,null),(l=Fc(l,r,i,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,1&t.mode&&xo(t,e.child,null,i),t.child.memoizedState=Li(i),t.memoizedState=Fi,l);if(!(1&t.mode))return Mi(e,t,i,null);if("$!"===r.data){if(a=r.nextSibling&&r.nextSibling.dataset)var s=a.dgst;return a=s,Mi(e,t,i,a=ui(l=Error(o(419)),a,void 0))}if(s=!!(i&e.childLanes),yi||s){if(null!==(a=Ps)){switch(i&-i){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}0!==(r=r&(a.suspendedLanes|i)?0:r)&&r!==l.retryLane&&(l.retryLane=r,Fo(e,r),nc(a,e,r,-1))}return hc(),Mi(e,t,i,a=ui(Error(o(421))))}return"$?"===r.data?(t.flags|=128,t.child=e.child,t=_c.bind(null,e),r._reactRetry=t,null):(e=l.treeContext,ao=cr(r.nextSibling),no=t,ro=!0,oo=null,null!==e&&(Gr[Kr++]=Jr,Gr[Kr++]=Yr,Gr[Kr++]=Qr,Jr=e.id,Yr=e.overflow,Qr=t),(t=zi(t,a.children)).flags|=4096,t)}(e,t,s,r,a,l,n);if(i){i=r.fallback,s=t.mode,a=(l=e.child).sibling;var c={mode:"hidden",children:r.children};return 1&s||t.child===l?(r=Dc(l,c)).subtreeFlags=14680064&l.subtreeFlags:((r=t.child).childLanes=0,r.pendingProps=c,t.deletions=null),null!==a?i=Dc(a,i):(i=Fc(i,s,n,null)).flags|=2,i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,s=null===(s=e.child.memoizedState)?Li(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},i.memoizedState=s,i.childLanes=e.childLanes&~n,t.memoizedState=Fi,r}return e=(i=e.child).sibling,r=Dc(i,{mode:"visible",children:r.children}),!(1&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function zi(e,t){return(t=Lc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Mi(e,t,n,a){return null!==a&&ho(a),xo(t,e.child,null,n),(e=zi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ji(e,t,n){e.lanes|=t;var a=e.alternate;null!==a&&(a.lanes|=t),Po(e.return,t,n)}function Ui(e,t,n,a,r){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:a,tail:n,tailMode:r}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=a,o.tail=n,o.tailMode=r)}function qi(e,t,n){var a=t.pendingProps,r=a.revealOrder,o=a.tail;if(Ei(e,t,a.children,n),2&(a=el.current))a=1&a|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,n,t);else if(19===e.tag)ji(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}a&=1}if(Cr(el,a),1&t.mode)switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===tl(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Ui(t,!1,r,n,o);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===tl(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Ui(t,!0,n,null,o);break;case"together":Ui(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Wi(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $i(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Dc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Dc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vi(e,t){if(!ro)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var a=null;null!==n;)null!==n.alternate&&(a=n),n=n.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function Hi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,a=0;if(t)for(var r=e.child;null!==r;)n|=r.lanes|r.childLanes,a|=14680064&r.subtreeFlags,a|=14680064&r.flags,r.return=e,r=r.sibling;else for(r=e.child;null!==r;)n|=r.lanes|r.childLanes,a|=r.subtreeFlags,a|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=a,e.childLanes=n,t}function Gi(e,t,n){var a=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hi(t),null;case 1:case 17:return Ir(t.type)&&Dr(),Hi(t),null;case 3:return a=t.stateNode,Yo(),Sr(Pr),Sr(Rr),al(),a.pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==e&&null!==e.child||(mo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(lc(oo),oo=null))),Ii(e,t),Hi(t),null;case 5:Zo(t);var r=Qo(Ko.current);if(n=t.type,null!==e&&null!=t.stateNode)Di(e,t,n,a,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!a){if(null===t.stateNode)throw Error(o(166));return Hi(t),null}if(e=Qo(Ho.current),mo(t)){a=t.stateNode,n=t.type;var l=t.memoizedProps;switch(a[dr]=t,a[fr]=l,e=!!(1&t.mode),n){case"dialog":Ma("cancel",a),Ma("close",a);break;case"iframe":case"object":case"embed":Ma("load",a);break;case"video":case"audio":for(r=0;r<Fa.length;r++)Ma(Fa[r],a);break;case"source":Ma("error",a);break;case"img":case"image":case"link":Ma("error",a),Ma("load",a);break;case"details":Ma("toggle",a);break;case"input":J(a,l),Ma("invalid",a);break;case"select":a._wrapperState={wasMultiple:!!l.multiple},Ma("invalid",a);break;case"textarea":re(a,l),Ma("invalid",a)}for(var s in ge(n,l),r=null,l)if(l.hasOwnProperty(s)){var c=l[s];"children"===s?"string"==typeof c?a.textContent!==c&&(!0!==l.suppressHydrationWarning&&Xa(a.textContent,c,e),r=["children",c]):"number"==typeof c&&a.textContent!==""+c&&(!0!==l.suppressHydrationWarning&&Xa(a.textContent,c,e),r=["children",""+c]):i.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&Ma("scroll",a)}switch(n){case"input":H(a),Z(a,l,!0);break;case"textarea":H(a),le(a);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(a.onclick=Za)}a=r,t.updateQueue=a,null!==a&&(t.flags|=4)}else{s=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof a.is?e=s.createElement(n,{is:a.is}):(e=s.createElement(n),"select"===n&&(s=e,a.multiple?s.multiple=!0:a.size&&(s.size=a.size))):e=s.createElementNS(e,n),e[dr]=t,e[fr]=a,Oi(e,t,!1,!1),t.stateNode=e;e:{switch(s=ye(n,a),n){case"dialog":Ma("cancel",e),Ma("close",e),r=a;break;case"iframe":case"object":case"embed":Ma("load",e),r=a;break;case"video":case"audio":for(r=0;r<Fa.length;r++)Ma(Fa[r],e);r=a;break;case"source":Ma("error",e),r=a;break;case"img":case"image":case"link":Ma("error",e),Ma("load",e),r=a;break;case"details":Ma("toggle",e),r=a;break;case"input":J(e,a),r=Q(e,a),Ma("invalid",e);break;case"option":default:r=a;break;case"select":e._wrapperState={wasMultiple:!!a.multiple},r=B({},a,{value:void 0}),Ma("invalid",e);break;case"textarea":re(e,a),r=ae(e,a),Ma("invalid",e)}for(l in ge(n,r),c=r)if(c.hasOwnProperty(l)){var u=c[l];"style"===l?be(e,u):"dangerouslySetInnerHTML"===l?null!=(u=u?u.__html:void 0)&&me(e,u):"children"===l?"string"==typeof u?("textarea"!==n||""!==u)&&de(e,u):"number"==typeof u&&de(e,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=u&&"onScroll"===l&&Ma("scroll",e):null!=u&&y(e,l,u,s))}switch(n){case"input":H(e),Z(e,a,!1);break;case"textarea":H(e),le(e);break;case"option":null!=a.value&&e.setAttribute("value",""+$(a.value));break;case"select":e.multiple=!!a.multiple,null!=(l=a.value)?ne(e,!!a.multiple,l,!1):null!=a.defaultValue&&ne(e,!!a.multiple,a.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=Za)}switch(n){case"button":case"input":case"select":case"textarea":a=!!a.autoFocus;break e;case"img":a=!0;break e;default:a=!1}}a&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hi(t),null;case 6:if(e&&null!=t.stateNode)Ai(e,t,e.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(o(166));if(n=Qo(Ko.current),Qo(Ho.current),mo(t)){if(a=t.stateNode,n=t.memoizedProps,a[dr]=t,(l=a.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xa(a.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xa(a.nodeValue,n,!!(1&e.mode))}l&&(t.flags|=4)}else(a=(9===n.nodeType?n:n.ownerDocument).createTextNode(a))[dr]=t,t.stateNode=a}return Hi(t),null;case 13:if(Sr(el),a=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ro&&null!==ao&&1&t.mode&&!(128&t.flags))fo(),po(),t.flags|=98560,l=!1;else if(l=mo(t),null!==a&&null!==a.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[dr]=t}else po(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hi(t),l=!1}else null!==oo&&(lc(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((a=null!==a)!=(null!==e&&null!==e.memoizedState)&&a&&(t.child.flags|=8192,1&t.mode&&(null===e||1&el.current?0===As&&(As=3):hc())),null!==t.updateQueue&&(t.flags|=4),Hi(t),null);case 4:return Yo(),Ii(e,t),null===e&&qa(t.stateNode.containerInfo),Hi(t),null;case 10:return Ro(t.type._context),Hi(t),null;case 19:if(Sr(el),null===(l=t.memoizedState))return Hi(t),null;if(a=!!(128&t.flags),null===(s=l.rendering))if(a)Vi(l,!1);else{if(0!==As||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(s=tl(e))){for(t.flags|=128,Vi(l,!1),null!==(a=s.updateQueue)&&(t.updateQueue=a,t.flags|=4),t.subtreeFlags=0,a=n,n=t.child;null!==n;)e=a,(l=n).flags&=14680066,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Cr(el,1&el.current|2),t.child}e=e.sibling}null!==l.tail&&Ye()>qs&&(t.flags|=128,a=!0,Vi(l,!1),t.lanes=4194304)}else{if(!a)if(null!==(e=tl(s))){if(t.flags|=128,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!s.alternate&&!ro)return Hi(t),null}else 2*Ye()-l.renderingStartTime>qs&&1073741824!==n&&(t.flags|=128,a=!0,Vi(l,!1),t.lanes=4194304);l.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=l.last)?n.sibling=s:t.child=s,l.last=s)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Ye(),t.sibling=null,n=el.current,Cr(el,a?1&n|2:1&n),t):(Hi(t),null);case 22:case 23:return mc(),a=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==a&&(t.flags|=8192),a&&1&t.mode?!!(1073741824&Is)&&(Hi(t),6&t.subtreeFlags&&(t.flags|=8192)):Hi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ki(e,t){switch(to(t),t.tag){case 1:return Ir(t.type)&&Dr(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Yo(),Sr(Pr),Sr(Rr),al(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(Sr(el),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));po()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Sr(el),null;case 4:return Yo(),null;case 10:return Ro(t.type._context),null;case 22:case 23:return mc(),null;default:return null}}Oi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ii=function(){},Di=function(e,t,n,a){var r=e.memoizedProps;if(r!==a){e=t.stateNode,Qo(Ho.current);var o,l=null;switch(n){case"input":r=Q(e,r),a=Q(e,a),l=[];break;case"select":r=B({},r,{value:void 0}),a=B({},a,{value:void 0}),l=[];break;case"textarea":r=ae(e,r),a=ae(e,a),l=[];break;default:"function"!=typeof r.onClick&&"function"==typeof a.onClick&&(e.onclick=Za)}for(u in ge(n,a),n=null,r)if(!a.hasOwnProperty(u)&&r.hasOwnProperty(u)&&null!=r[u])if("style"===u){var s=r[u];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(i.hasOwnProperty(u)?l||(l=[]):(l=l||[]).push(u,null));for(u in a){var c=a[u];if(s=null!=r?r[u]:void 0,a.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(o in s)!s.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&s[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(l||(l=[]),l.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(i.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Ma("scroll",e),l||s===c||(l=[])):(l=l||[]).push(u,c))}n&&(l=l||[]).push("style",n);var u=l;(t.updateQueue=u)&&(t.flags|=4)}},Ai=function(e,t,n,a){n!==a&&(t.flags|=4)};var Qi=!1,Ji=!1,Yi="function"==typeof WeakSet?WeakSet:Set,Xi=null;function Zi(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function es(e,t,n){try{n()}catch(n){kc(e,t,n)}}var ts=!1;function ns(e,t,n){var a=t.updateQueue;if(null!==(a=null!==a?a.lastEffect:null)){var r=a=a.next;do{if((r.tag&e)===e){var o=r.destroy;r.destroy=void 0,void 0!==o&&es(t,n,o)}r=r.next}while(r!==a)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var a=n.create;n.destroy=a()}n=n.next}while(n!==t)}}function rs(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function os(e){var t=e.alternate;null!==t&&(e.alternate=null,os(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[dr],delete t[fr],delete t[hr],delete t[br],delete t[vr]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function is(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ss(e,t,n){var a=e.tag;if(5===a||6===a)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Za));else if(4!==a&&null!==(e=e.child))for(ss(e,t,n),e=e.sibling;null!==e;)ss(e,t,n),e=e.sibling}function cs(e,t,n){var a=e.tag;if(5===a||6===a)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==a&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var us=null,ms=!1;function ds(e,t,n){for(n=n.child;null!==n;)fs(e,t,n),n=n.sibling}function fs(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(rt,n)}catch(e){}switch(n.tag){case 5:Ji||Zi(n,t);case 6:var a=us,r=ms;us=null,ds(e,t,n),ms=r,null!==(us=a)&&(ms?(e=us,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):us.removeChild(n.stateNode));break;case 18:null!==us&&(ms?(e=us,n=n.stateNode,8===e.nodeType?sr(e.parentNode,n):1===e.nodeType&&sr(e,n),qt(e)):sr(us,n.stateNode));break;case 4:a=us,r=ms,us=n.stateNode.containerInfo,ms=!0,ds(e,t,n),us=a,ms=r;break;case 0:case 11:case 14:case 15:if(!Ji&&null!==(a=n.updateQueue)&&null!==(a=a.lastEffect)){r=a=a.next;do{var o=r,l=o.destroy;o=o.tag,void 0!==l&&(2&o||4&o)&&es(n,t,l),r=r.next}while(r!==a)}ds(e,t,n);break;case 1:if(!Ji&&(Zi(n,t),"function"==typeof(a=n.stateNode).componentWillUnmount))try{a.props=n.memoizedProps,a.state=n.memoizedState,a.componentWillUnmount()}catch(e){kc(n,t,e)}ds(e,t,n);break;case 21:ds(e,t,n);break;case 22:1&n.mode?(Ji=(a=Ji)||null!==n.memoizedState,ds(e,t,n),Ji=a):ds(e,t,n);break;default:ds(e,t,n)}}function ps(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Yi),t.forEach((function(t){var a=Rc.bind(null,e,t);n.has(t)||(n.add(t),t.then(a,a))}))}}function hs(e,t){var n=t.deletions;if(null!==n)for(var a=0;a<n.length;a++){var r=n[a];try{var l=e,i=t,s=i;e:for(;null!==s;){switch(s.tag){case 5:us=s.stateNode,ms=!1;break e;case 3:case 4:us=s.stateNode.containerInfo,ms=!0;break e}s=s.return}if(null===us)throw Error(o(160));fs(l,i,r),us=null,ms=!1;var c=r.alternate;null!==c&&(c.return=null),r.return=null}catch(e){kc(r,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)bs(t,e),t=t.sibling}function bs(e,t){var n=e.alternate,a=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hs(t,e),vs(e),4&a){try{ns(3,e,e.return),as(3,e)}catch(t){kc(e,e.return,t)}try{ns(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:hs(t,e),vs(e),512&a&&null!==n&&Zi(n,n.return);break;case 5:if(hs(t,e),vs(e),512&a&&null!==n&&Zi(n,n.return),32&e.flags){var r=e.stateNode;try{de(r,"")}catch(t){kc(e,e.return,t)}}if(4&a&&null!=(r=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,s=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===s&&"radio"===l.type&&null!=l.name&&Y(r,l),ye(s,i);var u=ye(s,l);for(i=0;i<c.length;i+=2){var m=c[i],d=c[i+1];"style"===m?be(r,d):"dangerouslySetInnerHTML"===m?me(r,d):"children"===m?de(r,d):y(r,m,d,u)}switch(s){case"input":X(r,l);break;case"textarea":oe(r,l);break;case"select":var f=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!l.multiple;var p=l.value;null!=p?ne(r,!!l.multiple,p,!1):f!==!!l.multiple&&(null!=l.defaultValue?ne(r,!!l.multiple,l.defaultValue,!0):ne(r,!!l.multiple,l.multiple?[]:"",!1))}r[fr]=l}catch(t){kc(e,e.return,t)}}break;case 6:if(hs(t,e),vs(e),4&a){if(null===e.stateNode)throw Error(o(162));r=e.stateNode,l=e.memoizedProps;try{r.nodeValue=l}catch(t){kc(e,e.return,t)}}break;case 3:if(hs(t,e),vs(e),4&a&&null!==n&&n.memoizedState.isDehydrated)try{qt(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:hs(t,e),vs(e);break;case 13:hs(t,e),vs(e),8192&(r=e.child).flags&&(l=null!==r.memoizedState,r.stateNode.isHidden=l,!l||null!==r.alternate&&null!==r.alternate.memoizedState||(Us=Ye())),4&a&&ps(e);break;case 22:if(m=null!==n&&null!==n.memoizedState,1&e.mode?(Ji=(u=Ji)||m,hs(t,e),Ji=u):hs(t,e),vs(e),8192&a){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!m&&1&e.mode)for(Xi=e,m=e.child;null!==m;){for(d=Xi=m;null!==Xi;){switch(p=(f=Xi).child,f.tag){case 0:case 11:case 14:case 15:ns(4,f,f.return);break;case 1:Zi(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){a=f,n=f.return;try{t=a,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){kc(a,n,e)}}break;case 5:Zi(f,f.return);break;case 22:if(null!==f.memoizedState){xs(d);continue}}null!==p?(p.return=f,Xi=p):xs(d)}m=m.sibling}e:for(m=null,d=e;;){if(5===d.tag){if(null===m){m=d;try{r=d.stateNode,u?"function"==typeof(l=r.style).setProperty?l.setProperty("display","none","important"):l.display="none":(s=d.stateNode,i=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,s.style.display=he("display",i))}catch(t){kc(e,e.return,t)}}}else if(6===d.tag){if(null===m)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;m===d&&(m=null),d=d.return}m===d&&(m=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:hs(t,e),vs(e),4&a&&ps(e);case 21:}}function vs(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var a=n;break e}n=n.return}throw Error(o(160))}switch(a.tag){case 5:var r=a.stateNode;32&a.flags&&(de(r,""),a.flags&=-33),cs(e,is(e),r);break;case 3:case 4:var l=a.stateNode.containerInfo;ss(e,is(e),l);break;default:throw Error(o(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gs(e,t,n){Xi=e,ys(e,t,n)}function ys(e,t,n){for(var a=!!(1&e.mode);null!==Xi;){var r=Xi,o=r.child;if(22===r.tag&&a){var l=null!==r.memoizedState||Qi;if(!l){var i=r.alternate,s=null!==i&&null!==i.memoizedState||Ji;i=Qi;var c=Ji;if(Qi=l,(Ji=s)&&!c)for(Xi=r;null!==Xi;)s=(l=Xi).child,22===l.tag&&null!==l.memoizedState?ws(r):null!==s?(s.return=l,Xi=s):ws(r);for(;null!==o;)Xi=o,ys(o,t,n),o=o.sibling;Xi=r,Qi=i,Ji=c}Es(e)}else 8772&r.subtreeFlags&&null!==o?(o.return=r,Xi=o):Es(e)}}function Es(e){for(;null!==Xi;){var t=Xi;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Ji||as(5,t);break;case 1:var a=t.stateNode;if(4&t.flags&&!Ji)if(null===n)a.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:ni(t.type,n.memoizedProps);a.componentDidUpdate(r,n.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&$o(t,l,a);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}$o(t,i,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var m=u.memoizedState;if(null!==m){var d=m.dehydrated;null!==d&&qt(d)}}}break;default:throw Error(o(163))}Ji||512&t.flags&&rs(t)}catch(e){kc(t,t.return,e)}}if(t===e){Xi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xi=n;break}Xi=t.return}}function xs(e){for(;null!==Xi;){var t=Xi;if(t===e){Xi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xi=n;break}Xi=t.return}}function ws(e){for(;null!==Xi;){var t=Xi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{as(4,t)}catch(e){kc(t,n,e)}break;case 1:var a=t.stateNode;if("function"==typeof a.componentDidMount){var r=t.return;try{a.componentDidMount()}catch(e){kc(t,r,e)}}var o=t.return;try{rs(t)}catch(e){kc(t,o,e)}break;case 5:var l=t.return;try{rs(t)}catch(e){kc(t,l,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Xi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Xi=i;break}Xi=t.return}}var Ns,ks=Math.ceil,Ss=E.ReactCurrentDispatcher,Cs=E.ReactCurrentOwner,_s=E.ReactCurrentBatchConfig,Rs=0,Ps=null,Ts=null,Os=0,Is=0,Ds=kr(0),As=0,Fs=null,Ls=0,Bs=0,zs=0,Ms=null,js=null,Us=0,qs=1/0,Ws=null,$s=!1,Vs=null,Hs=null,Gs=!1,Ks=null,Qs=0,Js=0,Ys=null,Xs=-1,Zs=0;function ec(){return 6&Rs?Ye():-1!==Xs?Xs:Xs=Ye()}function tc(e){return 1&e.mode?2&Rs&&0!==Os?Os&-Os:null!==bo.transition?(0===Zs&&(Zs=ht()),Zs):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Jt(e.type):1}function nc(e,t,n,a){if(50<Js)throw Js=0,Ys=null,Error(o(185));vt(e,n,a),2&Rs&&e===Ps||(e===Ps&&(!(2&Rs)&&(Bs|=n),4===As&&ic(e,Os)),ac(e,a),1===n&&0===Rs&&!(1&t.mode)&&(qs=Ye()+500,Mr&&qr()))}function ac(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,a=e.pingedLanes,r=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,s=r[l];-1===s?i&n&&!(i&a)||(r[l]=ft(i,t)):s<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var a=dt(e,e===Ps?Os:0);if(0===a)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=a&-a,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Mr=!0,Ur(e)}(sc.bind(null,e)):Ur(sc.bind(null,e)),lr((function(){!(6&Rs)&&qr()})),n=null;else{switch(Et(a)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=at}n=Pc(n,rc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rc(e,t){if(Xs=-1,Zs=0,6&Rs)throw Error(o(327));var n=e.callbackNode;if(wc()&&e.callbackNode!==n)return null;var a=dt(e,e===Ps?Os:0);if(0===a)return null;if(30&a||a&e.expiredLanes||t)t=bc(e,a);else{t=a;var r=Rs;Rs|=2;var l=pc();for(Ps===e&&Os===t||(Ws=null,qs=Ye()+500,dc(e,t));;)try{gc();break}catch(t){fc(e,t)}_o(),Ss.current=l,Rs=r,null!==Ts?t=0:(Ps=null,Os=0,t=As)}if(0!==t){if(2===t&&0!==(r=pt(e))&&(a=r,t=oc(e,r)),1===t)throw n=Fs,dc(e,0),ic(e,a),ac(e,Ye()),n;if(6===t)ic(e,a);else{if(r=e.current.alternate,!(30&a||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var a=0;a<n.length;a++){var r=n[a],o=r.getSnapshot;r=r.value;try{if(!ia(o(),r))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(r)||(t=bc(e,a),2===t&&(l=pt(e),0!==l&&(a=l,t=oc(e,l))),1!==t)))throw n=Fs,dc(e,0),ic(e,a),ac(e,Ye()),n;switch(e.finishedWork=r,e.finishedLanes=a,t){case 0:case 1:throw Error(o(345));case 2:case 5:xc(e,js,Ws);break;case 3:if(ic(e,a),(130023424&a)===a&&10<(t=Us+500-Ye())){if(0!==dt(e,0))break;if(((r=e.suspendedLanes)&a)!==a){ec(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=ar(xc.bind(null,e,js,Ws),t);break}xc(e,js,Ws);break;case 4:if(ic(e,a),(4194240&a)===a)break;for(t=e.eventTimes,r=-1;0<a;){var i=31-lt(a);l=1<<i,(i=t[i])>r&&(r=i),a&=~l}if(a=r,10<(a=(120>(a=Ye()-a)?120:480>a?480:1080>a?1080:1920>a?1920:3e3>a?3e3:4320>a?4320:1960*ks(a/1960))-a)){e.timeoutHandle=ar(xc.bind(null,e,js,Ws),a);break}xc(e,js,Ws);break;default:throw Error(o(329))}}}return ac(e,Ye()),e.callbackNode===n?rc.bind(null,e):null}function oc(e,t){var n=Ms;return e.current.memoizedState.isDehydrated&&(dc(e,t).flags|=256),2!==(e=bc(e,t))&&(t=js,js=n,null!==t&&lc(t)),e}function lc(e){null===js?js=e:js.push.apply(js,e)}function ic(e,t){for(t&=~zs,t&=~Bs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),a=1<<n;e[n]=-1,t&=~a}}function sc(e){if(6&Rs)throw Error(o(327));wc();var t=dt(e,0);if(!(1&t))return ac(e,Ye()),null;var n=bc(e,t);if(0!==e.tag&&2===n){var a=pt(e);0!==a&&(t=a,n=oc(e,a))}if(1===n)throw n=Fs,dc(e,0),ic(e,t),ac(e,Ye()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xc(e,js,Ws),ac(e,Ye()),null}function cc(e,t){var n=Rs;Rs|=1;try{return e(t)}finally{0===(Rs=n)&&(qs=Ye()+500,Mr&&qr())}}function uc(e){null!==Ks&&0===Ks.tag&&!(6&Rs)&&wc();var t=Rs;Rs|=1;var n=_s.transition,a=yt;try{if(_s.transition=null,yt=1,e)return e()}finally{yt=a,_s.transition=n,!(6&(Rs=t))&&qr()}}function mc(){Is=Ds.current,Sr(Ds)}function dc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,rr(n)),null!==Ts)for(n=Ts.return;null!==n;){var a=n;switch(to(a),a.tag){case 1:null!=(a=a.type.childContextTypes)&&Dr();break;case 3:Yo(),Sr(Pr),Sr(Rr),al();break;case 5:Zo(a);break;case 4:Yo();break;case 13:case 19:Sr(el);break;case 10:Ro(a.type._context);break;case 22:case 23:mc()}n=n.return}if(Ps=e,Ts=e=Dc(e.current,null),Os=Is=t,As=0,Fs=null,zs=Bs=Ls=0,js=Ms=null,null!==Io){for(t=0;t<Io.length;t++)if(null!==(a=(n=Io[t]).interleaved)){n.interleaved=null;var r=a.next,o=n.pending;if(null!==o){var l=o.next;o.next=r,a.next=l}n.pending=a}Io=null}return e}function fc(e,t){for(;;){var n=Ts;try{if(_o(),rl.current=Xl,ul){for(var a=il.memoizedState;null!==a;){var r=a.queue;null!==r&&(r.pending=null),a=a.next}ul=!1}if(ll=0,cl=sl=il=null,ml=!1,dl=0,Cs.current=null,null===n||null===n.return){As=1,Fs=t,Ts=null;break}e:{var l=e,i=n.return,s=n,c=t;if(t=Os,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,m=s,d=m.tag;if(!(1&m.mode||0!==d&&11!==d&&15!==d)){var f=m.alternate;f?(m.updateQueue=f.updateQueue,m.memoizedState=f.memoizedState,m.lanes=f.lanes):(m.updateQueue=null,m.memoizedState=null)}var p=bi(i);if(null!==p){p.flags&=-257,vi(p,i,s,0,t),1&p.mode&&hi(l,u,t),c=u;var h=(t=p).updateQueue;if(null===h){var b=new Set;b.add(c),t.updateQueue=b}else h.add(c);break e}if(!(1&t)){hi(l,u,t),hc();break e}c=Error(o(426))}else if(ro&&1&s.mode){var v=bi(i);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vi(v,i,s,0,t),ho(ci(c,s));break e}}l=c=ci(c,s),4!==As&&(As=2),null===Ms?Ms=[l]:Ms.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,qo(l,fi(0,c,t));break e;case 1:s=c;var g=l.type,y=l.stateNode;if(!(128&l.flags||"function"!=typeof g.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Hs&&Hs.has(y)))){l.flags|=65536,t&=-t,l.lanes|=t,qo(l,pi(l,s,t));break e}}l=l.return}while(null!==l)}Ec(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function pc(){var e=Ss.current;return Ss.current=Xl,null===e?Xl:e}function hc(){0!==As&&3!==As&&2!==As||(As=4),null===Ps||!(268435455&Ls)&&!(268435455&Bs)||ic(Ps,Os)}function bc(e,t){var n=Rs;Rs|=2;var a=pc();for(Ps===e&&Os===t||(Ws=null,dc(e,t));;)try{vc();break}catch(t){fc(e,t)}if(_o(),Rs=n,Ss.current=a,null!==Ts)throw Error(o(261));return Ps=null,Os=0,As}function vc(){for(;null!==Ts;)yc(Ts)}function gc(){for(;null!==Ts&&!Qe();)yc(Ts)}function yc(e){var t=Ns(e.alternate,e,Is);e.memoizedProps=e.pendingProps,null===t?Ec(e):Ts=t,Cs.current=null}function Ec(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Ts=n);if(null===e)return As=6,void(Ts=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Gi(n,t,Is)))return void(Ts=n);if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===As&&(As=5)}function xc(e,t,n){var a=yt,r=_s.transition;try{_s.transition=null,yt=1,function(e,t,n,a){do{wc()}while(null!==Ks);if(6&Rs)throw Error(o(327));n=e.finishedWork;var r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var a=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-lt(n),o=1<<r;t[r]=0,a[r]=-1,e[r]=-1,n&=~o}}(e,l),e===Ps&&(Ts=Ps=null,Os=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Gs||(Gs=!0,Pc(tt,(function(){return wc(),null}))),l=!!(15990&n.flags),15990&n.subtreeFlags||l){l=_s.transition,_s.transition=null;var i=yt;yt=1;var s=Rs;Rs|=4,Cs.current=null,function(e,t){if(er=$t,fa(e=da())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var a=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(a&&0!==a.rangeCount){n=a.anchorNode;var r=a.anchorOffset,l=a.focusNode;a=a.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,s=-1,c=-1,u=0,m=0,d=e,f=null;t:for(;;){for(var p;d!==n||0!==r&&3!==d.nodeType||(s=i+r),d!==l||0!==a&&3!==d.nodeType||(c=i+a),3===d.nodeType&&(i+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===e)break t;if(f===n&&++u===r&&(s=i),f===l&&++m===a&&(c=i),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(tr={focusedElem:e,selectionRange:n},$t=!1,Xi=t;null!==Xi;)if(e=(t=Xi).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xi=e;else for(;null!==Xi;){t=Xi;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var b=h.memoizedProps,v=h.memoizedState,g=t.stateNode,y=g.getSnapshotBeforeUpdate(t.elementType===t.type?b:ni(t.type,b),v);g.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var E=t.stateNode.containerInfo;1===E.nodeType?E.textContent="":9===E.nodeType&&E.documentElement&&E.removeChild(E.documentElement);break;default:throw Error(o(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xi=e;break}Xi=t.return}h=ts,ts=!1}(e,n),bs(n,e),pa(tr),$t=!!er,tr=er=null,e.current=n,gs(n,e,r),Je(),Rs=s,yt=i,_s.transition=l}else e.current=n;if(Gs&&(Gs=!1,Ks=e,Qs=r),0===(l=e.pendingLanes)&&(Hs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(rt,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ac(e,Ye()),null!==t)for(a=e.onRecoverableError,n=0;n<t.length;n++)a((r=t[n]).value,{componentStack:r.stack,digest:r.digest});if($s)throw $s=!1,e=Vs,Vs=null,e;!!(1&Qs)&&0!==e.tag&&wc(),1&(l=e.pendingLanes)?e===Ys?Js++:(Js=0,Ys=e):Js=0,qr()}(e,t,n,a)}finally{_s.transition=r,yt=a}return null}function wc(){if(null!==Ks){var e=Et(Qs),t=_s.transition,n=yt;try{if(_s.transition=null,yt=16>e?16:e,null===Ks)var a=!1;else{if(e=Ks,Ks=null,Qs=0,6&Rs)throw Error(o(331));var r=Rs;for(Rs|=4,Xi=e.current;null!==Xi;){var l=Xi,i=l.child;if(16&Xi.flags){var s=l.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Xi=u;null!==Xi;){var m=Xi;switch(m.tag){case 0:case 11:case 15:ns(8,m,l)}var d=m.child;if(null!==d)d.return=m,Xi=d;else for(;null!==Xi;){var f=(m=Xi).sibling,p=m.return;if(os(m),m===u){Xi=null;break}if(null!==f){f.return=p,Xi=f;break}Xi=p}}}var h=l.alternate;if(null!==h){var b=h.child;if(null!==b){h.child=null;do{var v=b.sibling;b.sibling=null,b=v}while(null!==b)}}Xi=l}}if(2064&l.subtreeFlags&&null!==i)i.return=l,Xi=i;else e:for(;null!==Xi;){if(2048&(l=Xi).flags)switch(l.tag){case 0:case 11:case 15:ns(9,l,l.return)}var g=l.sibling;if(null!==g){g.return=l.return,Xi=g;break e}Xi=l.return}}var y=e.current;for(Xi=y;null!==Xi;){var E=(i=Xi).child;if(2064&i.subtreeFlags&&null!==E)E.return=i,Xi=E;else e:for(i=y;null!==Xi;){if(2048&(s=Xi).flags)try{switch(s.tag){case 0:case 11:case 15:as(9,s)}}catch(e){kc(s,s.return,e)}if(s===i){Xi=null;break e}var x=s.sibling;if(null!==x){x.return=s.return,Xi=x;break e}Xi=s.return}}if(Rs=r,qr(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(rt,e)}catch(e){}a=!0}return a}finally{yt=n,_s.transition=t}}return!1}function Nc(e,t,n){e=jo(e,t=fi(0,t=ci(n,t),1),1),t=ec(),null!==e&&(vt(e,1,t),ac(e,t))}function kc(e,t,n){if(3===e.tag)Nc(e,e,n);else for(;null!==t;){if(3===t.tag){Nc(t,e,n);break}if(1===t.tag){var a=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&(null===Hs||!Hs.has(a))){t=jo(t,e=pi(t,e=ci(n,e),1),1),e=ec(),null!==t&&(vt(t,1,e),ac(t,e));break}}t=t.return}}function Sc(e,t,n){var a=e.pingCache;null!==a&&a.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Ps===e&&(Os&n)===n&&(4===As||3===As&&(130023424&Os)===Os&&500>Ye()-Us?dc(e,0):zs|=n),ac(e,t)}function Cc(e,t){0===t&&(1&e.mode?(t=ut,!(130023424&(ut<<=1))&&(ut=4194304)):t=1);var n=ec();null!==(e=Fo(e,t))&&(vt(e,t,n),ac(e,n))}function _c(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cc(e,n)}function Rc(e,t){var n=0;switch(e.tag){case 13:var a=e.stateNode,r=e.memoizedState;null!==r&&(n=r.retryLane);break;case 19:a=e.stateNode;break;default:throw Error(o(314))}null!==a&&a.delete(t),Cc(e,n)}function Pc(e,t){return Ge(e,t)}function Tc(e,t,n,a){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Oc(e,t,n,a){return new Tc(e,t,n,a)}function Ic(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dc(e,t){var n=e.alternate;return null===n?((n=Oc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ac(e,t,n,a,r,l){var i=2;if(a=e,"function"==typeof e)Ic(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case N:return Fc(n.children,r,l,t);case k:i=8,r|=8;break;case S:return(e=Oc(12,n,t,2|r)).elementType=S,e.lanes=l,e;case P:return(e=Oc(13,n,t,r)).elementType=P,e.lanes=l,e;case T:return(e=Oc(19,n,t,r)).elementType=T,e.lanes=l,e;case D:return Lc(n,r,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:i=10;break e;case _:i=9;break e;case R:i=11;break e;case O:i=14;break e;case I:i=16,a=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Oc(i,n,t,r)).elementType=e,t.type=a,t.lanes=l,t}function Fc(e,t,n,a){return(e=Oc(7,e,a,t)).lanes=n,e}function Lc(e,t,n,a){return(e=Oc(22,e,a,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function Bc(e,t,n){return(e=Oc(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=Oc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Mc(e,t,n,a,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=bt(0),this.expirationTimes=bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=bt(0),this.identifierPrefix=a,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function jc(e,t,n,a,r,o,l,i,s){return e=new Mc(e,t,n,i,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Oc(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:a,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Bo(o),e}function Uc(e){if(!e)return _r;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ir(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ir(n))return Fr(e,n,t)}return t}function qc(e,t,n,a,r,o,l,i,s){return(e=jc(n,a,!0,e,0,o,0,i,s)).context=Uc(null),n=e.current,(o=Mo(a=ec(),r=tc(n))).callback=null!=t?t:null,jo(n,o,r),e.current.lanes=r,vt(e,r,a),ac(e,a),e}function Wc(e,t,n,a){var r=t.current,o=ec(),l=tc(r);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Mo(o,l)).payload={element:e},null!==(a=void 0===a?null:a)&&(t.callback=a),null!==(e=jo(r,t,l))&&(nc(e,r,l,o),Uo(e,r,l)),l}function $c(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hc(e,t){Vc(e,t),(e=e.alternate)&&Vc(e,t)}Ns=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pr.current)yi=!0;else{if(!(e.lanes&n||128&t.flags))return yi=!1,function(e,t,n){switch(t.tag){case 3:Pi(t),po();break;case 5:Xo(t);break;case 1:Ir(t.type)&&Lr(t);break;case 4:Jo(t,t.stateNode.containerInfo);break;case 10:var a=t.type._context,r=t.memoizedProps.value;Cr(No,a._currentValue),a._currentValue=r;break;case 13:if(null!==(a=t.memoizedState))return null!==a.dehydrated?(Cr(el,1&el.current),t.flags|=128,null):n&t.child.childLanes?Bi(e,t,n):(Cr(el,1&el.current),null!==(e=$i(e,t,n))?e.sibling:null);Cr(el,1&el.current);break;case 19:if(a=!!(n&t.childLanes),128&e.flags){if(a)return qi(e,t,n);t.flags|=128}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),Cr(el,el.current),a)break;return null;case 22:case 23:return t.lanes=0,ki(e,t,n)}return $i(e,t,n)}(e,t,n);yi=!!(131072&e.flags)}else yi=!1,ro&&1048576&t.flags&&Zr(t,Hr,t.index);switch(t.lanes=0,t.tag){case 2:var a=t.type;Wi(e,t),e=t.pendingProps;var r=Or(t,Rr.current);To(t,n),r=bl(null,t,a,e,r,n);var l=vl();return t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ir(a)?(l=!0,Lr(t)):l=!1,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,Bo(t),r.updater=ri,t.stateNode=r,r._reactInternals=t,si(t,a,e,n),t=Ri(null,t,a,!0,l,n)):(t.tag=0,ro&&l&&eo(t),Ei(null,t,r,n),t=t.child),t;case 16:a=t.elementType;e:{switch(Wi(e,t),e=t.pendingProps,a=(r=a._init)(a._payload),t.type=a,r=t.tag=function(e){if("function"==typeof e)return Ic(e)?1:0;if(null!=e){if((e=e.$$typeof)===R)return 11;if(e===O)return 14}return 2}(a),e=ni(a,e),r){case 0:t=Ci(null,t,a,e,n);break e;case 1:t=_i(null,t,a,e,n);break e;case 11:t=xi(null,t,a,e,n);break e;case 14:t=wi(null,t,a,ni(a.type,e),n);break e}throw Error(o(306,a,""))}return t;case 0:return a=t.type,r=t.pendingProps,Ci(e,t,a,r=t.elementType===a?r:ni(a,r),n);case 1:return a=t.type,r=t.pendingProps,_i(e,t,a,r=t.elementType===a?r:ni(a,r),n);case 3:e:{if(Pi(t),null===e)throw Error(o(387));a=t.pendingProps,r=(l=t.memoizedState).element,zo(e,t),Wo(t,a,null,n);var i=t.memoizedState;if(a=i.element,l.isDehydrated){if(l={element:a,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Ti(e,t,a,n,r=ci(Error(o(423)),t));break e}if(a!==r){t=Ti(e,t,a,n,r=ci(Error(o(424)),t));break e}for(ao=cr(t.stateNode.containerInfo.firstChild),no=t,ro=!0,oo=null,n=wo(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(po(),a===r){t=$i(e,t,n);break e}Ei(e,t,a,n)}t=t.child}return t;case 5:return Xo(t),null===e&&co(t),a=t.type,r=t.pendingProps,l=null!==e?e.memoizedProps:null,i=r.children,nr(a,r)?i=null:null!==l&&nr(a,l)&&(t.flags|=32),Si(e,t),Ei(e,t,i,n),t.child;case 6:return null===e&&co(t),null;case 13:return Bi(e,t,n);case 4:return Jo(t,t.stateNode.containerInfo),a=t.pendingProps,null===e?t.child=xo(t,null,a,n):Ei(e,t,a,n),t.child;case 11:return a=t.type,r=t.pendingProps,xi(e,t,a,r=t.elementType===a?r:ni(a,r),n);case 7:return Ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(a=t.type._context,r=t.pendingProps,l=t.memoizedProps,i=r.value,Cr(No,a._currentValue),a._currentValue=i,null!==l)if(ia(l.value,i)){if(l.children===r.children&&!Pr.current){t=$i(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){i=l.child;for(var c=s.firstContext;null!==c;){if(c.context===a){if(1===l.tag){(c=Mo(-1,n&-n)).tag=2;var u=l.updateQueue;if(null!==u){var m=(u=u.shared).pending;null===m?c.next=c:(c.next=m.next,m.next=c),u.pending=c}}l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Po(l.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Po(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}Ei(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,a=t.pendingProps.children,To(t,n),a=a(r=Oo(r)),t.flags|=1,Ei(e,t,a,n),t.child;case 14:return r=ni(a=t.type,t.pendingProps),wi(e,t,a,r=ni(a.type,r),n);case 15:return Ni(e,t,t.type,t.pendingProps,n);case 17:return a=t.type,r=t.pendingProps,r=t.elementType===a?r:ni(a,r),Wi(e,t),t.tag=1,Ir(a)?(e=!0,Lr(t)):e=!1,To(t,n),li(t,a,r),si(t,a,r,n),Ri(null,t,a,!0,e,n);case 19:return qi(e,t,n);case 22:return ki(e,t,n)}throw Error(o(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Kc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Yc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xc(){}function Zc(e,t,n,a,r){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof r){var i=r;r=function(){var e=$c(l);i.call(e)}}Wc(t,l,e,r)}else l=function(e,t,n,a,r){if(r){if("function"==typeof a){var o=a;a=function(){var e=$c(l);o.call(e)}}var l=qc(t,a,e,0,null,!1,0,"",Xc);return e._reactRootContainer=l,e[pr]=l.current,qa(8===e.nodeType?e.parentNode:e),uc(),l}for(;r=e.lastChild;)e.removeChild(r);if("function"==typeof a){var i=a;a=function(){var e=$c(s);i.call(e)}}var s=jc(e,0,!1,null,0,!1,0,"",Xc);return e._reactRootContainer=s,e[pr]=s.current,qa(8===e.nodeType?e.parentNode:e),uc((function(){Wc(t,s,n,a)})),s}(n,t,e,r,a);return $c(l)}Qc.prototype.render=Kc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Wc(e,t,null,null)},Qc.prototype.unmount=Kc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Wc(null,e,null,null)})),t[pr]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&Bt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=mt(t.pendingLanes);0!==n&&(gt(t,1|n),ac(t,Ye()),!(6&Rs)&&(qs=Ye()+500,qr()))}break;case 13:uc((function(){var t=Fo(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Hc(e,1)}},wt=function(e){if(13===e.tag){var t=Fo(e,134217728);null!==t&&nc(t,e,134217728,ec()),Hc(e,134217728)}},Nt=function(e){if(13===e.tag){var t=tc(e),n=Fo(e,t);null!==n&&nc(n,e,t,ec()),Hc(e,t)}},kt=function(){return yt},St=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},we=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var a=n[t];if(a!==e&&a.form===e.form){var r=xr(a);if(!r)throw Error(o(90));G(a),X(a,r)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Re=cc,Pe=uc;var eu={usingClientEntryPoint:!1,Events:[yr,Er,xr,Ce,_e,cc]},tu={findFiberByHostInstance:gr,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var au=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!au.isDisabled&&au.supportsFiber)try{rt=au.inject(nu),ot=au}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jc(t))throw Error(o(200));return function(e,t,n){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==a?null:""+a,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Jc(e))throw Error(o(299));var n=!1,a="",r=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(r=t.onRecoverableError)),t=jc(e,1,!1,null,0,n,0,a,r),e[pr]=t.current,qa(8===e.nodeType?e.parentNode:e),new Kc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Yc(t))throw Error(o(200));return Zc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Jc(e))throw Error(o(405));var a=null!=n&&n.hydratedSources||null,r=!1,l="",i=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=qc(t,null,e,1,null!=n?n:null,r,0,l,i),e[pr]=t.current,qa(e),a)for(e=0;e<a.length;e++)r=(r=(n=a[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new Qc(t)},t.render=function(e,t,n){if(!Yc(t))throw Error(o(200));return Zc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Yc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){Zc(null,null,e,!1,(function(){e._reactRootContainer=null,e[pr]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,a){if(!Yc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zc(e,t,n,!1,a)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,n)=>{var a=n(961);t.createRoot=a.createRoot,t.hydrateRoot=a.hydrateRoot},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},799:(e,t)=>{if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},363:(e,t,n)=>{n(799)},287:(e,t)=>{var n=Symbol.for("react.element"),a=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),m=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,b={};function v(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||p}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||p}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var E=y.prototype=new g;E.constructor=y,h(E,v.prototype),E.isPureReactComponent=!0;var x=Array.isArray,w=Object.prototype.hasOwnProperty,N={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,a){var r,o={},l=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=a;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:N.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,r,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var s=!1;if(null===e)s=!0;else switch(i){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case a:s=!0}}if(s)return l=l(s=e),e=""===o?"."+R(s,0):o,x(l)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),P(l,t,r,"",(function(e){return e}))):null!=l&&(C(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,r+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(s=0,o=""===o?".":o+":",x(e))for(var c=0;c<e.length;c++){var u=o+R(i=e[c],c);s+=P(i,t,r,u,l)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(i=e.next()).done;)s+=P(i=i.value,t,r,u=o+R(i,c++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function T(e,t,n){if(null==e)return e;var a=[],r=0;return P(e,a,"","",(function(e){return t.call(n,e,r++)})),a}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var I={current:null},D={transition:null},A={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:D,ReactCurrentOwner:N};function F(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=r,t.Profiler=l,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.act=F,t.cloneElement=function(e,t,a){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=h({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=N.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!k.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=a;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];r.children=s}return{$$typeof:n,type:e.type,key:o,ref:l,props:r,_owner:i}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=F,t.useCallback=function(e,t){return I.current.useCallback(e,t)},t.useContext=function(e){return I.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return I.current.useDeferredValue(e)},t.useEffect=function(e,t){return I.current.useEffect(e,t)},t.useId=function(){return I.current.useId()},t.useImperativeHandle=function(e,t,n){return I.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return I.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return I.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return I.current.useMemo(e,t)},t.useReducer=function(e,t,n){return I.current.useReducer(e,t,n)},t.useRef=function(e){return I.current.useRef(e)},t.useState=function(e){return I.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return I.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return I.current.useTransition()},t.version="18.3.1"},540:(e,t,n)=>{e.exports=n(287)},463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var a=n-1>>>1,r=e[a];if(!(0<o(r,t)))break e;e[a]=t,e[n]=r,n=a}}function a(e){return 0===e.length?null:e[0]}function r(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var a=0,r=e.length,l=r>>>1;a<l;){var i=2*(a+1)-1,s=e[i],c=i+1,u=e[c];if(0>o(s,n))c<r&&0>o(u,s)?(e[a]=u,e[c]=n,a=c):(e[a]=s,e[i]=n,a=i);else{if(!(c<r&&0>o(u,n)))break e;e[a]=u,e[c]=n,a=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,s=i.now();t.unstable_now=function(){return i.now()-s}}var c=[],u=[],m=1,d=null,f=3,p=!1,h=!1,b=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function E(e){for(var t=a(u);null!==t;){if(null===t.callback)r(u);else{if(!(t.startTime<=e))break;r(u),t.sortIndex=t.expirationTime,n(c,t)}t=a(u)}}function x(e){if(b=!1,E(e),!h)if(null!==a(c))h=!0,D(w);else{var t=a(u);null!==t&&A(x,t.startTime-e)}}function w(e,n){h=!1,b&&(b=!1,g(C),C=-1),p=!0;var o=f;try{for(E(n),d=a(c);null!==d&&(!(d.expirationTime>n)||e&&!P());){var l=d.callback;if("function"==typeof l){d.callback=null,f=d.priorityLevel;var i=l(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?d.callback=i:d===a(c)&&r(c),E(n)}else r(c);d=a(c)}if(null!==d)var s=!0;else{var m=a(u);null!==m&&A(x,m.startTime-n),s=!1}return s}finally{d=null,f=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var N,k=!1,S=null,C=-1,_=5,R=-1;function P(){return!(t.unstable_now()-R<_)}function T(){if(null!==S){var e=t.unstable_now();R=e;var n=!0;try{n=S(!0,e)}finally{n?N():(k=!1,S=null)}}else k=!1}if("function"==typeof y)N=function(){y(T)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,I=O.port2;O.port1.onmessage=T,N=function(){I.postMessage(null)}}else N=function(){v(T,0)};function D(e){S=e,k||(k=!0,N())}function A(e,n){C=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||p||(h=!0,D(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return a(c)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,r,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:m++,callback:r,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(u,e),null===a(c)&&e===a(u)&&(b?(g(C),C=-1):b=!0,A(x,o-l))):(e.sortIndex=i,n(c,e),h||p||(h=!0,D(w))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},982:(e,t,n)=>{e.exports=n(463)},154:(e,t,n)=>{var a=n(540),r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},o=a.useSyncExternalStore,l=a.useRef,i=a.useEffect,s=a.useMemo,c=a.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,a,u){var m=l(null);if(null===m.current){var d={hasValue:!1,value:null};m.current=d}else d=m.current;m=s((function(){function e(e){if(!i){if(i=!0,o=e,e=a(e),void 0!==u&&d.hasValue){var t=d.value;if(u(t,e))return l=t}return l=e}if(t=l,r(o,e))return t;var n=a(e);return void 0!==u&&u(t,n)?t:(o=e,l=n)}var o,l,i=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,a,u]);var f=o(e,m[0],m[1]);return i((function(){d.hasValue=!0,d.value=f}),[f]),c(f),f}},418:(e,t,n)=>{e.exports=n(154)}},a={};function r(e){var t=a[e];if(void 0!==t)return t.exports;var o=a[e]={exports:{}};return n[e](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(n,a){if(1&a&&(n=this(n)),8&a)return n;if("object"==typeof n&&n){if(4&a&&n.__esModule)return n;if(16&a&&"function"==typeof n.then)return n}var o=Object.create(null);r.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&a&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,r.d(o,l),o},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.p="/";var o={};r.r(o),r.d(o,{hasBrowserEnv:()=>Nt,hasStandardBrowserEnv:()=>kt,hasStandardBrowserWebWorkerEnv:()=>Ct,origin:()=>_t});var l,i=r(540),s=r.t(i,2),c=r(338),u=r(961),m=r.t(u,2);function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},d.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(l||(l={}));const f="popstate";function p(e,t){if(!1===e||null==e)throw new Error(t)}function h(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function b(e,t){return{usr:e.state,key:e.key,idx:t}}function v(e,t,n,a){return void 0===n&&(n=null),d({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?y(t):t,{state:n,key:t&&t.key||a||Math.random().toString(36).substr(2,8)})}function g(e){let{pathname:t="/",search:n="",hash:a=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),a&&"#"!==a&&(t+="#"===a.charAt(0)?a:"#"+a),t}function y(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let a=e.indexOf("?");a>=0&&(t.search=e.substr(a),e=e.substr(0,a)),e&&(t.pathname=e)}return t}var E;function x(e,t,n){return void 0===n&&(n="/"),function(e,t,n,a){let r=F(("string"==typeof t?y(t):t).pathname||"/",n);if(null==r)return null;let o=w(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let l=null;for(let e=0;null==l&&e<o.length;++e){let t=A(r);l=I(o[e],t,a)}return l}(e,t,n,!1)}function w(e,t,n,a){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===a&&(a="");let r=(e,r,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};l.relativePath.startsWith("/")&&(p(l.relativePath.startsWith(a),'Absolute route path "'+l.relativePath+'" nested under path "'+a+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(a.length));let i=B([a,l.relativePath]),s=n.concat(l);e.children&&e.children.length>0&&(p(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),w(e.children,t,s,i)),(null!=e.path||e.index)&&t.push({path:i,score:O(i,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of N(e.path))r(e,t,n);else r(e,t)})),t}function N(e){let t=e.split("/");if(0===t.length)return[];let[n,...a]=t,r=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===a.length)return r?[o,""]:[o];let l=N(a.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),r&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(E||(E={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const k=/^:[\w-]+$/,S=3,C=2,_=1,R=10,P=-2,T=e=>"*"===e;function O(e,t){let n=e.split("/"),a=n.length;return n.some(T)&&(a+=P),t&&(a+=C),n.filter((e=>!T(e))).reduce(((e,t)=>e+(k.test(t)?S:""===t?_:R)),a)}function I(e,t,n){void 0===n&&(n=!1);let{routesMeta:a}=e,r={},o="/",l=[];for(let e=0;e<a.length;++e){let i=a[e],s=e===a.length-1,c="/"===o?t:t.slice(o.length)||"/",u=D({path:i.relativePath,caseSensitive:i.caseSensitive,end:s},c),m=i.route;if(!u&&s&&n&&!a[a.length-1].route.index&&(u=D({path:i.relativePath,caseSensitive:i.caseSensitive,end:!1},c)),!u)return null;Object.assign(r,u.params),l.push({params:r,pathname:B([o,u.pathname]),pathnameBase:z(B([o,u.pathnameBase])),route:m}),"/"!==u.pathnameBase&&(o=B([o,u.pathnameBase]))}return l}function D(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,a]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),h("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let a=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(a.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(a.push({paramName:"*"}),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?r+="\\/*$":""!==e&&"/"!==e&&(r+="(?:(?=\\/|$))"),[new RegExp(r,t?void 0:"i"),a]}(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let o=r[0],l=o.replace(/(.)\/+$/,"$1"),i=r.slice(1),s=a.reduce(((e,t,n)=>{let{paramName:a,isOptional:r}=t;if("*"===a){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const s=i[n];return e[a]=r&&!s?void 0:(s||"").replace(/%2F/g,"/"),e}),{});return{params:s,pathname:o,pathnameBase:l,pattern:e}}function A(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return h(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function F(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,a=e.charAt(n);return a&&"/"!==a?null:e.slice(n)||"/"}function L(e,t,n,a){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(a)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}const B=e=>e.join("/").replace(/\/\/+/g,"/"),z=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),M=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",j=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const U=["post","put","patch","delete"],q=(new Set(U),["get",...U]);function W(){return W=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},W.apply(this,arguments)}new Set(q),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const $=i.createContext(null),V=i.createContext(null),H=i.createContext(null),G=i.createContext(null),K=i.createContext({outlet:null,matches:[],isDataRoute:!1}),Q=i.createContext(null);function J(){return null!=i.useContext(G)}function Y(){return J()||p(!1),i.useContext(G).location}function X(e){i.useContext(H).static||i.useLayoutEffect(e)}function Z(){let{isDataRoute:e}=i.useContext(K);return e?function(){let{router:e}=function(e){let t=i.useContext($);return t||p(!1),t}(ie.UseNavigateStable),t=ce(se.UseNavigateStable),n=i.useRef(!1);return X((()=>{n.current=!0})),i.useCallback((function(a,r){void 0===r&&(r={}),n.current&&("number"==typeof a?e.navigate(a):e.navigate(a,W({fromRouteId:t},r)))}),[e,t])}():function(){J()||p(!1);let e=i.useContext($),{basename:t,future:n,navigator:a}=i.useContext(H),{matches:r}=i.useContext(K),{pathname:o}=Y(),l=JSON.stringify(function(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}(r,n.v7_relativeSplatPath)),s=i.useRef(!1);return X((()=>{s.current=!0})),i.useCallback((function(n,r){if(void 0===r&&(r={}),!s.current)return;if("number"==typeof n)return void a.go(n);let i=function(e,t,n,a){let r;void 0===a&&(a=!1),"string"==typeof e?r=y(e):(r=d({},e),p(!r.pathname||!r.pathname.includes("?"),L("?","pathname","search",r)),p(!r.pathname||!r.pathname.includes("#"),L("#","pathname","hash",r)),p(!r.search||!r.search.includes("#"),L("#","search","hash",r)));let o,l=""===e||""===r.pathname,i=l?"/":r.pathname;if(null==i)o=n;else{let e=t.length-1;if(!a&&i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;r.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:a="",hash:r=""}="string"==typeof e?y(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:M(a),hash:j(r)}}(r,o),c=i&&"/"!==i&&i.endsWith("/"),u=(l||"."===i)&&n.endsWith("/");return s.pathname.endsWith("/")||!c&&!u||(s.pathname+="/"),s}(n,JSON.parse(l),o,"path"===r.relative);null==e&&"/"!==t&&(i.pathname="/"===i.pathname?t:B([t,i.pathname])),(r.replace?a.replace:a.push)(i,r.state,r)}),[t,a,l,o,e])}()}const ee=i.createContext(null);function te(){let{matches:e}=i.useContext(K),t=e[e.length-1];return t?t.params:{}}function ne(e,t,n,a){J()||p(!1);let{navigator:r}=i.useContext(H),{matches:o}=i.useContext(K),s=o[o.length-1],c=s?s.params:{},u=(s&&s.pathname,s?s.pathnameBase:"/");s&&s.route;let m,d=Y();if(t){var f;let e="string"==typeof t?y(t):t;"/"===u||(null==(f=e.pathname)?void 0:f.startsWith(u))||p(!1),m=e}else m=d;let h=m.pathname||"/",b=h;if("/"!==u){let e=u.replace(/^\//,"").split("/");b="/"+h.replace(/^\//,"").split("/").slice(e.length).join("/")}let v=x(e,{pathname:b}),g=function(e,t,n,a){var r;if(void 0===t&&(t=[]),void 0===n&&(n=null),void 0===a&&(a=null),null==e){var o;if(null==(o=n)||!o.errors)return null;e=n.matches}let l=e,s=null==(r=n)?void 0:r.errors;if(null!=s){let e=l.findIndex((e=>e.route.id&&void 0!==(null==s?void 0:s[e.route.id])));e>=0||p(!1),l=l.slice(0,Math.min(l.length,e+1))}let c=!1,u=-1;if(n&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(u=e),t.route.id){let{loaderData:e,errors:a}=n,r=t.route.loader&&void 0===e[t.route.id]&&(!a||void 0===a[t.route.id]);if(t.route.lazy||r){c=!0,l=u>=0?l.slice(0,u+1):[l[0]];break}}}return l.reduceRight(((e,a,r)=>{let o,m=!1,d=null,f=null;n&&(o=s&&a.route.id?s[a.route.id]:void 0,d=a.route.errorElement||re,c&&(u<0&&0===r?(function(e,t,n){!1||ue[e]||(ue[e]=!0)}("route-fallback"),m=!0,f=null):u===r&&(m=!0,f=a.route.hydrateFallbackElement||null)));let p=t.concat(l.slice(0,r+1)),h=()=>{let t;return t=o?d:m?f:a.route.Component?i.createElement(a.route.Component,null):a.route.element?a.route.element:e,i.createElement(le,{match:a,routeContext:{outlet:e,matches:p,isDataRoute:null!=n},children:t})};return n&&(a.route.ErrorBoundary||a.route.errorElement||0===r)?i.createElement(oe,{location:n.location,revalidation:n.revalidation,component:d,error:o,children:h(),routeContext:{outlet:null,matches:p,isDataRoute:!0}}):h()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:B([u,r.encodeLocation?r.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:B([u,r.encodeLocation?r.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,n,a);return t&&g?i.createElement(G.Provider,{value:{location:W({pathname:"/",search:"",hash:"",state:null,key:"default"},m),navigationType:l.Pop}},g):g}function ae(){let e=function(){var e;let t=i.useContext(Q),n=function(e){let t=i.useContext(V);return t||p(!1),t}(se.UseRouteError),a=ce(se.UseRouteError);return void 0!==t?t:null==(e=n.errors)?void 0:e[a]}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return i.createElement(i.Fragment,null,i.createElement("h2",null,"Unexpected Application Error!"),i.createElement("h3",{style:{fontStyle:"italic"}},t),n?i.createElement("pre",{style:a},n):null,null)}const re=i.createElement(ae,null);class oe extends i.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?i.createElement(K.Provider,{value:this.props.routeContext},i.createElement(Q.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function le(e){let{routeContext:t,match:n,children:a}=e,r=i.useContext($);return r&&r.static&&r.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=n.route.id),i.createElement(K.Provider,{value:t},a)}var ie=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ie||{}),se=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(se||{});function ce(e){let t=function(e){let t=i.useContext(K);return t||p(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||p(!1),n.route.id}const ue={};function me(e){return function(e){let t=i.useContext(K).outlet;return t?i.createElement(ee.Provider,{value:e},t):t}(e.context)}function de(e){p(!1)}function fe(e){let{basename:t="/",children:n=null,location:a,navigationType:r=l.Pop,navigator:o,static:s=!1,future:c}=e;J()&&p(!1);let u=t.replace(/^\/*/,"/"),m=i.useMemo((()=>({basename:u,navigator:o,static:s,future:W({v7_relativeSplatPath:!1},c)})),[u,c,o,s]);"string"==typeof a&&(a=y(a));let{pathname:d="/",search:f="",hash:h="",state:b=null,key:v="default"}=a,g=i.useMemo((()=>{let e=F(d,u);return null==e?null:{location:{pathname:e,search:f,hash:h,state:b,key:v},navigationType:r}}),[u,d,f,h,b,v,r]);return null==g?null:i.createElement(H.Provider,{value:m},i.createElement(G.Provider,{children:n,value:g}))}function pe(e){let{children:t,location:n}=e;return ne(he(t),n)}function he(e,t){void 0===t&&(t=[]);let n=[];return i.Children.forEach(e,((e,a)=>{if(!i.isValidElement(e))return;let r=[...t,a];if(e.type===i.Fragment)return void n.push.apply(n,he(e.props.children,r));e.type!==de&&p(!1),e.props.index&&e.props.children&&p(!1);let o={id:e.props.id||r.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=he(e.props.children,r)),n.push(o)})),n}s.startTransition,new Promise((()=>{})),i.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);try{window.__reactRouterVersion="6"}catch(e){}new Map;const be=s.startTransition;function ve(e){let{basename:t,children:n,future:a,window:r}=e,o=i.useRef();var s;null==o.current&&(o.current=(void 0===(s={window:r,v5Compat:!0})&&(s={}),function(e,t,n,a){void 0===a&&(a={});let{window:r=document.defaultView,v5Compat:o=!1}=a,i=r.history,s=l.Pop,c=null,u=m();function m(){return(i.state||{idx:null}).idx}function h(){s=l.Pop;let e=m(),t=null==e?null:e-u;u=e,c&&c({action:s,location:E.location,delta:t})}function y(e){let t="null"!==r.location.origin?r.location.origin:r.location.href,n="string"==typeof e?e:g(e);return n=n.replace(/ $/,"%20"),p(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,i.replaceState(d({},i.state,{idx:u}),""));let E={get action(){return s},get location(){return e(r,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return r.addEventListener(f,h),c=e,()=>{r.removeEventListener(f,h),c=null}},createHref:e=>t(r,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){s=l.Push;let a=v(E.location,e,t);n&&n(a,e),u=m()+1;let d=b(a,u),f=E.createHref(a);try{i.pushState(d,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;r.location.assign(f)}o&&c&&c({action:s,location:E.location,delta:1})},replace:function(e,t){s=l.Replace;let a=v(E.location,e,t);n&&n(a,e),u=m();let r=b(a,u),d=E.createHref(a);i.replaceState(r,"",d),o&&c&&c({action:s,location:E.location,delta:0})},go:e=>i.go(e)};return E}((function(e,t){let{pathname:n,search:a,hash:r}=e.location;return v("",{pathname:n,search:a,hash:r},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:g(t)}),null,s)));let c=o.current,[u,m]=i.useState({action:c.action,location:c.location}),{v7_startTransition:h}=a||{},y=i.useCallback((e=>{h&&be?be((()=>m(e))):m(e)}),[m,h]);return i.useLayoutEffect((()=>c.listen(y)),[c,y]),i.createElement(fe,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:c,future:a})}var ge,ye;m.flushSync,s.useId,"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"}(ge||(ge={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ye||(ye={}));const Ee=()=>i.createElement(i.Fragment,null);function xe(e,t){return function(){return e.apply(t,arguments)}}const{toString:we}=Object.prototype,{getPrototypeOf:Ne}=Object,ke=(e=>t=>{const n=we.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),Se=e=>(e=e.toLowerCase(),t=>ke(t)===e),Ce=e=>t=>typeof t===e,{isArray:_e}=Array,Re=Ce("undefined"),Pe=Se("ArrayBuffer"),Te=Ce("string"),Oe=Ce("function"),Ie=Ce("number"),De=e=>null!==e&&"object"==typeof e,Ae=e=>{if("object"!==ke(e))return!1;const t=Ne(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Fe=Se("Date"),Le=Se("File"),Be=Se("Blob"),ze=Se("FileList"),Me=Se("URLSearchParams"),[je,Ue,qe,We]=["ReadableStream","Request","Response","Headers"].map(Se);function $e(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let a,r;if("object"!=typeof e&&(e=[e]),_e(e))for(a=0,r=e.length;a<r;a++)t.call(null,e[a],a,e);else{const r=n?Object.getOwnPropertyNames(e):Object.keys(e),o=r.length;let l;for(a=0;a<o;a++)l=r[a],t.call(null,e[l],l,e)}}function Ve(e,t){t=t.toLowerCase();const n=Object.keys(e);let a,r=n.length;for(;r-- >0;)if(a=n[r],t===a.toLowerCase())return a;return null}const He="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Ge=e=>!Re(e)&&e!==He,Ke=(Qe="undefined"!=typeof Uint8Array&&Ne(Uint8Array),e=>Qe&&e instanceof Qe);var Qe;const Je=Se("HTMLFormElement"),Ye=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Xe=Se("RegExp"),Ze=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),a={};$e(n,((n,r)=>{let o;!1!==(o=t(n,r,e))&&(a[r]=o||n)})),Object.defineProperties(e,a)},et="abcdefghijklmnopqrstuvwxyz",tt="0123456789",nt={DIGIT:tt,ALPHA:et,ALPHA_DIGIT:et+et.toUpperCase()+tt},at=Se("AsyncFunction"),rt={isArray:_e,isArrayBuffer:Pe,isBuffer:function(e){return null!==e&&!Re(e)&&null!==e.constructor&&!Re(e.constructor)&&Oe(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||Oe(e.append)&&("formdata"===(t=ke(e))||"object"===t&&Oe(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Pe(e.buffer),t},isString:Te,isNumber:Ie,isBoolean:e=>!0===e||!1===e,isObject:De,isPlainObject:Ae,isReadableStream:je,isRequest:Ue,isResponse:qe,isHeaders:We,isUndefined:Re,isDate:Fe,isFile:Le,isBlob:Be,isRegExp:Xe,isFunction:Oe,isStream:e=>De(e)&&Oe(e.pipe),isURLSearchParams:Me,isTypedArray:Ke,isFileList:ze,forEach:$e,merge:function e(){const{caseless:t}=Ge(this)&&this||{},n={},a=(a,r)=>{const o=t&&Ve(n,r)||r;Ae(n[o])&&Ae(a)?n[o]=e(n[o],a):Ae(a)?n[o]=e({},a):_e(a)?n[o]=a.slice():n[o]=a};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&$e(arguments[e],a);return n},extend:(e,t,n,{allOwnKeys:a}={})=>($e(t,((t,a)=>{n&&Oe(t)?e[a]=xe(t,n):e[a]=t}),{allOwnKeys:a}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,a)=>{e.prototype=Object.create(t.prototype,a),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,a)=>{let r,o,l;const i={};if(t=t||{},null==e)return t;do{for(r=Object.getOwnPropertyNames(e),o=r.length;o-- >0;)l=r[o],a&&!a(l,e,t)||i[l]||(t[l]=e[l],i[l]=!0);e=!1!==n&&Ne(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:ke,kindOfTest:Se,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const a=e.indexOf(t,n);return-1!==a&&a===n},toArray:e=>{if(!e)return null;if(_e(e))return e;let t=e.length;if(!Ie(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let a;for(;(a=n.next())&&!a.done;){const n=a.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const a=[];for(;null!==(n=e.exec(t));)a.push(n);return a},isHTMLForm:Je,hasOwnProperty:Ye,hasOwnProp:Ye,reduceDescriptors:Ze,freezeMethods:e=>{Ze(e,((t,n)=>{if(Oe(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const a=e[n];Oe(a)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},a=e=>{e.forEach((e=>{n[e]=!0}))};return _e(e)?a(e):a(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:Ve,global:He,isContextDefined:Ge,ALPHABET:nt,generateString:(e=16,t=nt.ALPHA_DIGIT)=>{let n="";const{length:a}=t;for(;e--;)n+=t[Math.random()*a|0];return n},isSpecCompliantForm:function(e){return!!(e&&Oe(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,a)=>{if(De(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[a]=e;const r=_e(e)?[]:{};return $e(e,((e,t)=>{const o=n(e,a+1);!Re(o)&&(r[t]=o)})),t[a]=void 0,r}}return e};return n(e,0)},isAsyncFn:at,isThenable:e=>e&&(De(e)||Oe(e))&&Oe(e.then)&&Oe(e.catch)};function ot(e,t,n,a,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),a&&(this.request=a),r&&(this.response=r)}rt.inherits(ot,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:rt.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const lt=ot.prototype,it={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{it[e]={value:e}})),Object.defineProperties(ot,it),Object.defineProperty(lt,"isAxiosError",{value:!0}),ot.from=(e,t,n,a,r,o)=>{const l=Object.create(lt);return rt.toFlatObject(e,l,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ot.call(l,e.message,t,n,a,r),l.cause=e,l.name=e.name,o&&Object.assign(l,o),l};const st=ot;function ct(e){return rt.isPlainObject(e)||rt.isArray(e)}function ut(e){return rt.endsWith(e,"[]")?e.slice(0,-2):e}function mt(e,t,n){return e?e.concat(t).map((function(e,t){return e=ut(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const dt=rt.toFlatObject(rt,{},null,(function(e){return/^is[A-Z]/.test(e)})),ft=function(e,t,n){if(!rt.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const a=(n=rt.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!rt.isUndefined(t[e])}))).metaTokens,r=n.visitor||c,o=n.dots,l=n.indexes,i=(n.Blob||"undefined"!=typeof Blob&&Blob)&&rt.isSpecCompliantForm(t);if(!rt.isFunction(r))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(rt.isDate(e))return e.toISOString();if(!i&&rt.isBlob(e))throw new st("Blob is not supported. Use a Buffer instead.");return rt.isArrayBuffer(e)||rt.isTypedArray(e)?i&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,r){let i=e;if(e&&!r&&"object"==typeof e)if(rt.endsWith(n,"{}"))n=a?n:n.slice(0,-2),e=JSON.stringify(e);else if(rt.isArray(e)&&function(e){return rt.isArray(e)&&!e.some(ct)}(e)||(rt.isFileList(e)||rt.endsWith(n,"[]"))&&(i=rt.toArray(e)))return n=ut(n),i.forEach((function(e,a){!rt.isUndefined(e)&&null!==e&&t.append(!0===l?mt([n],a,o):null===l?n:n+"[]",s(e))})),!1;return!!ct(e)||(t.append(mt(r,n,o),s(e)),!1)}const u=[],m=Object.assign(dt,{defaultVisitor:c,convertValue:s,isVisitable:ct});if(!rt.isObject(e))throw new TypeError("data must be an object");return function e(n,a){if(!rt.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+a.join("."));u.push(n),rt.forEach(n,(function(n,o){!0===(!(rt.isUndefined(n)||null===n)&&r.call(t,n,rt.isString(o)?o.trim():o,a,m))&&e(n,a?a.concat(o):[o])})),u.pop()}}(e),t};function pt(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function ht(e,t){this._pairs=[],e&&ft(e,this,t)}const bt=ht.prototype;bt.append=function(e,t){this._pairs.push([e,t])},bt.toString=function(e){const t=e?function(t){return e.call(this,t,pt)}:pt;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const vt=ht;function gt(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function yt(e,t,n){if(!t)return e;const a=n&&n.encode||gt,r=n&&n.serialize;let o;if(o=r?r(t,n):rt.isURLSearchParams(t)?t.toString():new vt(t,n).toString(a),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const Et=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){rt.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},xt={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},wt={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:vt,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},Nt="undefined"!=typeof window&&"undefined"!=typeof document,kt=(St="undefined"!=typeof navigator&&navigator.product,Nt&&["ReactNative","NativeScript","NS"].indexOf(St)<0);var St;const Ct="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,_t=Nt&&window.location.href||"http://localhost",Rt={...o,...wt},Pt=function(e){function t(e,n,a,r){let o=e[r++];if("__proto__"===o)return!0;const l=Number.isFinite(+o),i=r>=e.length;return o=!o&&rt.isArray(a)?a.length:o,i?(rt.hasOwnProp(a,o)?a[o]=[a[o],n]:a[o]=n,!l):(a[o]&&rt.isObject(a[o])||(a[o]=[]),t(e,n,a[o],r)&&rt.isArray(a[o])&&(a[o]=function(e){const t={},n=Object.keys(e);let a;const r=n.length;let o;for(a=0;a<r;a++)o=n[a],t[o]=e[o];return t}(a[o])),!l)}if(rt.isFormData(e)&&rt.isFunction(e.entries)){const n={};return rt.forEachEntry(e,((e,a)=>{t(function(e){return rt.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),a,n,0)})),n}return null},Tt={transitional:xt,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",a=n.indexOf("application/json")>-1,r=rt.isObject(e);if(r&&rt.isHTMLForm(e)&&(e=new FormData(e)),rt.isFormData(e))return a?JSON.stringify(Pt(e)):e;if(rt.isArrayBuffer(e)||rt.isBuffer(e)||rt.isStream(e)||rt.isFile(e)||rt.isBlob(e)||rt.isReadableStream(e))return e;if(rt.isArrayBufferView(e))return e.buffer;if(rt.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(r){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return ft(e,new Rt.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,a){return Rt.isNode&&rt.isBuffer(e)?(this.append(t,e.toString("base64")),!1):a.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((o=rt.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return ft(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return r||a?(t.setContentType("application/json",!1),function(e,t,n){if(rt.isString(e))try{return(0,JSON.parse)(e),rt.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Tt.transitional,n=t&&t.forcedJSONParsing,a="json"===this.responseType;if(rt.isResponse(e)||rt.isReadableStream(e))return e;if(e&&rt.isString(e)&&(n&&!this.responseType||a)){const n=!(t&&t.silentJSONParsing)&&a;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw st.from(e,st.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Rt.classes.FormData,Blob:Rt.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};rt.forEach(["delete","get","head","post","put","patch"],(e=>{Tt.headers[e]={}}));const Ot=Tt,It=rt.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Dt=Symbol("internals");function At(e){return e&&String(e).trim().toLowerCase()}function Ft(e){return!1===e||null==e?e:rt.isArray(e)?e.map(Ft):String(e)}function Lt(e,t,n,a,r){return rt.isFunction(a)?a.call(this,t,n):(r&&(t=n),rt.isString(t)?rt.isString(a)?-1!==t.indexOf(a):rt.isRegExp(a)?a.test(t):void 0:void 0)}class Bt{constructor(e){e&&this.set(e)}set(e,t,n){const a=this;function r(e,t,n){const r=At(t);if(!r)throw new Error("header name must be a non-empty string");const o=rt.findKey(a,r);(!o||void 0===a[o]||!0===n||void 0===n&&!1!==a[o])&&(a[o||t]=Ft(e))}const o=(e,t)=>rt.forEach(e,((e,n)=>r(e,n,t)));if(rt.isPlainObject(e)||e instanceof this.constructor)o(e,t);else if(rt.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))o((e=>{const t={};let n,a,r;return e&&e.split("\n").forEach((function(e){r=e.indexOf(":"),n=e.substring(0,r).trim().toLowerCase(),a=e.substring(r+1).trim(),!n||t[n]&&It[n]||("set-cookie"===n?t[n]?t[n].push(a):t[n]=[a]:t[n]=t[n]?t[n]+", "+a:a)})),t})(e),t);else if(rt.isHeaders(e))for(const[t,a]of e.entries())r(a,t,n);else null!=e&&r(t,e,n);return this}get(e,t){if(e=At(e)){const n=rt.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let a;for(;a=n.exec(e);)t[a[1]]=a[2];return t}(e);if(rt.isFunction(t))return t.call(this,e,n);if(rt.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=At(e)){const n=rt.findKey(this,e);return!(!n||void 0===this[n]||t&&!Lt(0,this[n],n,t))}return!1}delete(e,t){const n=this;let a=!1;function r(e){if(e=At(e)){const r=rt.findKey(n,e);!r||t&&!Lt(0,n[r],r,t)||(delete n[r],a=!0)}}return rt.isArray(e)?e.forEach(r):r(e),a}clear(e){const t=Object.keys(this);let n=t.length,a=!1;for(;n--;){const r=t[n];e&&!Lt(0,this[r],r,e,!0)||(delete this[r],a=!0)}return a}normalize(e){const t=this,n={};return rt.forEach(this,((a,r)=>{const o=rt.findKey(n,r);if(o)return t[o]=Ft(a),void delete t[r];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(r):String(r).trim();l!==r&&delete t[r],t[l]=Ft(a),n[l]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return rt.forEach(this,((n,a)=>{null!=n&&!1!==n&&(t[a]=e&&rt.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[Dt]=this[Dt]={accessors:{}}).accessors,n=this.prototype;function a(e){const a=At(e);t[a]||(function(e,t){const n=rt.toCamelCase(" "+t);["get","set","has"].forEach((a=>{Object.defineProperty(e,a+n,{value:function(e,n,r){return this[a].call(this,t,e,n,r)},configurable:!0})}))}(n,e),t[a]=!0)}return rt.isArray(e)?e.forEach(a):a(e),this}}Bt.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),rt.reduceDescriptors(Bt.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),rt.freezeMethods(Bt);const zt=Bt;function Mt(e,t){const n=this||Ot,a=t||n,r=zt.from(a.headers);let o=a.data;return rt.forEach(e,(function(e){o=e.call(n,o,r.normalize(),t?t.status:void 0)})),r.normalize(),o}function jt(e){return!(!e||!e.__CANCEL__)}function Ut(e,t,n){st.call(this,null==e?"canceled":e,st.ERR_CANCELED,t,n),this.name="CanceledError"}rt.inherits(Ut,st,{__CANCEL__:!0});const qt=Ut;function Wt(e,t,n){const a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(new st("Request failed with status code "+n.status,[st.ERR_BAD_REQUEST,st.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const $t=(e,t,n=3)=>{let a=0;const r=function(e,t){e=e||10;const n=new Array(e),a=new Array(e);let r,o=0,l=0;return t=void 0!==t?t:1e3,function(i){const s=Date.now(),c=a[l];r||(r=s),n[o]=i,a[o]=s;let u=l,m=0;for(;u!==o;)m+=n[u++],u%=e;if(o=(o+1)%e,o===l&&(l=(l+1)%e),s-r<t)return;const d=c&&s-c;return d?Math.round(1e3*m/d):void 0}}(50,250);return function(e,t){let n=0;const a=1e3/t;let r=null;return function(){const t=!0===this,o=Date.now();if(t||o-n>a)return r&&(clearTimeout(r),r=null),n=o,e.apply(null,arguments);r||(r=setTimeout((()=>(r=null,n=Date.now(),e.apply(null,arguments))),a-(o-n)))}}((n=>{const o=n.loaded,l=n.lengthComputable?n.total:void 0,i=o-a,s=r(i);a=o;const c={loaded:o,total:l,progress:l?o/l:void 0,bytes:i,rate:s||void 0,estimated:s&&l&&o<=l?(l-o)/s:void 0,event:n,lengthComputable:null!=l};c[t?"download":"upload"]=!0,e(c)}),n)},Vt=Rt.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function a(n){let a=n;return e&&(t.setAttribute("href",a),a=t.href),t.setAttribute("href",a),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=a(window.location.href),function(e){const t=rt.isString(e)?a(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0},Ht=Rt.hasStandardBrowserEnv?{write(e,t,n,a,r,o){const l=[e+"="+encodeURIComponent(t)];rt.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),rt.isString(a)&&l.push("path="+a),rt.isString(r)&&l.push("domain="+r),!0===o&&l.push("secure"),document.cookie=l.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Gt(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Kt=e=>e instanceof zt?{...e}:e;function Qt(e,t){t=t||{};const n={};function a(e,t,n){return rt.isPlainObject(e)&&rt.isPlainObject(t)?rt.merge.call({caseless:n},e,t):rt.isPlainObject(t)?rt.merge({},t):rt.isArray(t)?t.slice():t}function r(e,t,n){return rt.isUndefined(t)?rt.isUndefined(e)?void 0:a(void 0,e,n):a(e,t,n)}function o(e,t){if(!rt.isUndefined(t))return a(void 0,t)}function l(e,t){return rt.isUndefined(t)?rt.isUndefined(e)?void 0:a(void 0,e):a(void 0,t)}function i(n,r,o){return o in t?a(n,r):o in e?a(void 0,n):void 0}const s={url:o,method:o,data:o,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:i,headers:(e,t)=>r(Kt(e),Kt(t),!0)};return rt.forEach(Object.keys(Object.assign({},e,t)),(function(a){const o=s[a]||r,l=o(e[a],t[a],a);rt.isUndefined(l)&&o!==i||(n[a]=l)})),n}const Jt=e=>{const t=Qt({},e);let n,{data:a,withXSRFToken:r,xsrfHeaderName:o,xsrfCookieName:l,headers:i,auth:s}=t;if(t.headers=i=zt.from(i),t.url=yt(Gt(t.baseURL,t.url),e.params,e.paramsSerializer),s&&i.set("Authorization","Basic "+btoa((s.username||"")+":"+(s.password?unescape(encodeURIComponent(s.password)):""))),rt.isFormData(a))if(Rt.hasStandardBrowserEnv||Rt.hasStandardBrowserWebWorkerEnv)i.setContentType(void 0);else if(!1!==(n=i.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];i.setContentType([e||"multipart/form-data",...t].join("; "))}if(Rt.hasStandardBrowserEnv&&(r&&rt.isFunction(r)&&(r=r(t)),r||!1!==r&&Vt(t.url))){const e=o&&l&&Ht.read(l);e&&i.set(o,e)}return t},Yt="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const a=Jt(e);let r=a.data;const o=zt.from(a.headers).normalize();let l,{responseType:i}=a;function s(){a.cancelToken&&a.cancelToken.unsubscribe(l),a.signal&&a.signal.removeEventListener("abort",l)}let c=new XMLHttpRequest;function u(){if(!c)return;const a=zt.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());Wt((function(e){t(e),s()}),(function(e){n(e),s()}),{data:i&&"text"!==i&&"json"!==i?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:a,config:e,request:c}),c=null}c.open(a.method.toUpperCase(),a.url,!0),c.timeout=a.timeout,"onloadend"in c?c.onloadend=u:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(u)},c.onabort=function(){c&&(n(new st("Request aborted",st.ECONNABORTED,a,c)),c=null)},c.onerror=function(){n(new st("Network Error",st.ERR_NETWORK,a,c)),c=null},c.ontimeout=function(){let e=a.timeout?"timeout of "+a.timeout+"ms exceeded":"timeout exceeded";const t=a.transitional||xt;a.timeoutErrorMessage&&(e=a.timeoutErrorMessage),n(new st(e,t.clarifyTimeoutError?st.ETIMEDOUT:st.ECONNABORTED,a,c)),c=null},void 0===r&&o.setContentType(null),"setRequestHeader"in c&&rt.forEach(o.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),rt.isUndefined(a.withCredentials)||(c.withCredentials=!!a.withCredentials),i&&"json"!==i&&(c.responseType=a.responseType),"function"==typeof a.onDownloadProgress&&c.addEventListener("progress",$t(a.onDownloadProgress,!0)),"function"==typeof a.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",$t(a.onUploadProgress)),(a.cancelToken||a.signal)&&(l=t=>{c&&(n(!t||t.type?new qt(null,e,c):t),c.abort(),c=null)},a.cancelToken&&a.cancelToken.subscribe(l),a.signal&&(a.signal.aborted?l():a.signal.addEventListener("abort",l)));const m=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(a.url);m&&-1===Rt.protocols.indexOf(m)?n(new st("Unsupported protocol "+m+":",st.ERR_BAD_REQUEST,e)):c.send(r||null)}))},Xt=(e,t)=>{let n,a=new AbortController;const r=function(e){if(!n){n=!0,l();const t=e instanceof Error?e:this.reason;a.abort(t instanceof st?t:new qt(t instanceof Error?t.message:t))}};let o=t&&setTimeout((()=>{r(new st(`timeout ${t} of ms exceeded`,st.ETIMEDOUT))}),t);const l=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach((e=>{e&&(e.removeEventListener?e.removeEventListener("abort",r):e.unsubscribe(r))})),e=null)};e.forEach((e=>e&&e.addEventListener&&e.addEventListener("abort",r)));const{signal:i}=a;return i.unsubscribe=l,[i,()=>{o&&clearTimeout(o),o=null}]},Zt=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let a,r=0;for(;r<n;)a=r+t,yield e.slice(r,a),r=a},en=(e,t,n,a,r)=>{const o=async function*(e,t,n){for await(const a of e)yield*Zt(ArrayBuffer.isView(a)?a:await n(String(a)),t)}(e,t,r);let l=0;return new ReadableStream({type:"bytes",async pull(e){const{done:t,value:r}=await o.next();if(t)return e.close(),void a();let i=r.byteLength;n&&n(l+=i),e.enqueue(new Uint8Array(r))},cancel:e=>(a(e),o.return())},{highWaterMark:2})},tn=(e,t)=>{const n=null!=e;return a=>setTimeout((()=>t({lengthComputable:n,total:e,loaded:a})))},nn="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,an=nn&&"function"==typeof ReadableStream,rn=nn&&("function"==typeof TextEncoder?(on=new TextEncoder,e=>on.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var on;const ln=an&&(()=>{let e=!1;const t=new Request(Rt.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),sn=an&&!!(()=>{try{return rt.isReadableStream(new Response("").body)}catch(e){}})(),cn={stream:sn&&(e=>e.body)};var un;nn&&(un=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!cn[e]&&(cn[e]=rt.isFunction(un[e])?t=>t[e]():(t,n)=>{throw new st(`Response type '${e}' is not supported`,st.ERR_NOT_SUPPORT,n)})})));const mn={http:null,xhr:Yt,fetch:nn&&(async e=>{let{url:t,method:n,data:a,signal:r,cancelToken:o,timeout:l,onDownloadProgress:i,onUploadProgress:s,responseType:c,headers:u,withCredentials:m="same-origin",fetchOptions:d}=Jt(e);c=c?(c+"").toLowerCase():"text";let f,p,[h,b]=r||o||l?Xt([r,o],l):[];const v=()=>{!f&&setTimeout((()=>{h&&h.unsubscribe()})),f=!0};let g;try{if(s&&ln&&"get"!==n&&"head"!==n&&0!==(g=await(async(e,t)=>{const n=rt.toFiniteNumber(e.getContentLength());return null==n?(async e=>null==e?0:rt.isBlob(e)?e.size:rt.isSpecCompliantForm(e)?(await new Request(e).arrayBuffer()).byteLength:rt.isArrayBufferView(e)?e.byteLength:(rt.isURLSearchParams(e)&&(e+=""),rt.isString(e)?(await rn(e)).byteLength:void 0))(t):n})(u,a))){let e,n=new Request(t,{method:"POST",body:a,duplex:"half"});rt.isFormData(a)&&(e=n.headers.get("content-type"))&&u.setContentType(e),n.body&&(a=en(n.body,65536,tn(g,$t(s)),null,rn))}rt.isString(m)||(m=m?"cors":"omit"),p=new Request(t,{...d,signal:h,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:a,duplex:"half",withCredentials:m});let r=await fetch(p);const o=sn&&("stream"===c||"response"===c);if(sn&&(i||o)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=r[t]}));const t=rt.toFiniteNumber(r.headers.get("content-length"));r=new Response(en(r.body,65536,i&&tn(t,$t(i,!0)),o&&v,rn),e)}c=c||"text";let l=await cn[rt.findKey(cn,c)||"text"](r,e);return!o&&v(),b&&b(),await new Promise(((t,n)=>{Wt(t,n,{data:l,headers:zt.from(r.headers),status:r.status,statusText:r.statusText,config:e,request:p})}))}catch(t){if(v(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new st("Network Error",st.ERR_NETWORK,e,p),{cause:t.cause||t});throw st.from(t,t&&t.code,e,p)}})};rt.forEach(mn,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const dn=e=>`- ${e}`,fn=e=>rt.isFunction(e)||null===e||!1===e,pn=e=>{e=rt.isArray(e)?e:[e];const{length:t}=e;let n,a;const r={};for(let o=0;o<t;o++){let t;if(n=e[o],a=n,!fn(n)&&(a=mn[(t=String(n)).toLowerCase()],void 0===a))throw new st(`Unknown adapter '${t}'`);if(a)break;r[t||"#"+o]=a}if(!a){const e=Object.entries(r).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(dn).join("\n"):" "+dn(e[0]):"as no adapter specified";throw new st("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return a};function hn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new qt(null,e)}function bn(e){return hn(e),e.headers=zt.from(e.headers),e.data=Mt.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),pn(e.adapter||Ot.adapter)(e).then((function(t){return hn(e),t.data=Mt.call(e,e.transformResponse,t),t.headers=zt.from(t.headers),t}),(function(t){return jt(t)||(hn(e),t&&t.response&&(t.response.data=Mt.call(e,e.transformResponse,t.response),t.response.headers=zt.from(t.response.headers))),Promise.reject(t)}))}const vn={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{vn[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const gn={};vn.transitional=function(e,t,n){function a(e,t){return"[Axios v1.7.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,r,o)=>{if(!1===e)throw new st(a(r," has been removed"+(t?" in "+t:"")),st.ERR_DEPRECATED);return t&&!gn[r]&&(gn[r]=!0,console.warn(a(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,o)}};const yn={assertOptions:function(e,t,n){if("object"!=typeof e)throw new st("options must be an object",st.ERR_BAD_OPTION_VALUE);const a=Object.keys(e);let r=a.length;for(;r-- >0;){const o=a[r],l=t[o];if(l){const t=e[o],n=void 0===t||l(t,o,e);if(!0!==n)throw new st("option "+o+" must be "+n,st.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new st("Unknown option "+o,st.ERR_BAD_OPTION)}},validators:vn},En=yn.validators;class xn{constructor(e){this.defaults=e,this.interceptors={request:new Et,response:new Et}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Qt(this.defaults,t);const{transitional:n,paramsSerializer:a,headers:r}=t;void 0!==n&&yn.assertOptions(n,{silentJSONParsing:En.transitional(En.boolean),forcedJSONParsing:En.transitional(En.boolean),clarifyTimeoutError:En.transitional(En.boolean)},!1),null!=a&&(rt.isFunction(a)?t.paramsSerializer={serialize:a}:yn.assertOptions(a,{encode:En.function,serialize:En.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=r&&rt.merge(r.common,r[t.method]);r&&rt.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete r[e]})),t.headers=zt.concat(o,r);const l=[];let i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,l.unshift(e.fulfilled,e.rejected))}));const s=[];let c;this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)}));let u,m=0;if(!i){const e=[bn.bind(this),void 0];for(e.unshift.apply(e,l),e.push.apply(e,s),u=e.length,c=Promise.resolve(t);m<u;)c=c.then(e[m++],e[m++]);return c}u=l.length;let d=t;for(m=0;m<u;){const e=l[m++],t=l[m++];try{d=e(d)}catch(e){t.call(this,e);break}}try{c=bn.call(this,d)}catch(e){return Promise.reject(e)}for(m=0,u=s.length;m<u;)c=c.then(s[m++],s[m++]);return c}getUri(e){return yt(Gt((e=Qt(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}rt.forEach(["delete","get","head","options"],(function(e){xn.prototype[e]=function(t,n){return this.request(Qt(n||{},{method:e,url:t,data:(n||{}).data}))}})),rt.forEach(["post","put","patch"],(function(e){function t(t){return function(n,a,r){return this.request(Qt(r||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:a}))}}xn.prototype[e]=t(),xn.prototype[e+"Form"]=t(!0)}));const wn=xn;class Nn{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const a=new Promise((e=>{n.subscribe(e),t=e})).then(e);return a.cancel=function(){n.unsubscribe(t)},a},e((function(e,a,r){n.reason||(n.reason=new qt(e,a,r),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Nn((function(t){e=t})),cancel:e}}}const kn=Nn,Sn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Sn).forEach((([e,t])=>{Sn[t]=e}));const Cn=Sn,_n=function e(t){const n=new wn(t),a=xe(wn.prototype.request,n);return rt.extend(a,wn.prototype,n,{allOwnKeys:!0}),rt.extend(a,n,null,{allOwnKeys:!0}),a.create=function(n){return e(Qt(t,n))},a}(Ot);_n.Axios=wn,_n.CanceledError=qt,_n.CancelToken=kn,_n.isCancel=jt,_n.VERSION="1.7.2",_n.toFormData=ft,_n.AxiosError=st,_n.Cancel=_n.CanceledError,_n.all=function(e){return Promise.all(e)},_n.spread=function(e){return function(t){return e.apply(null,t)}},_n.isAxiosError=function(e){return rt.isObject(e)&&!0===e.isAxiosError},_n.mergeConfig=Qt,_n.AxiosHeaders=zt,_n.formToJSON=e=>Pt(rt.isHTMLForm(e)?new FormData(e):e),_n.getAdapter=pn,_n.HttpStatusCode=Cn,_n.default=_n;const Rn=_n,Pn=()=>{const e="https://madsis.mad.ec/api/",[t,n]=(0,i.useState)([]);var a,r,o,l,s,c;const u=e=>moment(e).subtract(5,"hours").format("YYYY-MM-DD HH:mm:ss"),m=async()=>{try{return(await Rn.get(e+"roles")).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}};return(0,i.useEffect)((()=>{a=document.getElementById("kt_modal_add_role"),r=a.querySelector("#kt_modal_add_role_form"),o=new bootstrap.Modal(a),(()=>{var t=FormValidation.formValidation(r,{fields:{role_name:{validators:{notEmpty:{message:"El nombre del Rol es requerido"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap:new FormValidation.plugins.Bootstrap5({rowSelector:".fv-row",eleInvalidClass:"",eleValidClass:""})}});a.querySelector('[data-kt-roles-modal-action="close"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cerrar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Sí",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value&&o.hide()}))})),a.querySelector('[data-kt-roles-modal-action="cancel"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cancelar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Sí",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value?(r.reset(),o.hide()):"cancel"===e.dismiss&&Swal.fire({text:"¡Tu formulario no ha sido cancelado!.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})}))}));const l=a.querySelector('[data-kt-roles-modal-action="submit"]');l.addEventListener("click",(function(a){a.preventDefault();const i=r.querySelectorAll('input[type="checkbox"]');var s=Array.from(i).filter((e=>e.checked&&""!==e.value&&"kt_roles_select_all"!==e.value)).map((e=>({permissionID:e.value,description:e.name,permissionName:e.name}))),c=r.querySelector('input[name="role_name"]').value;t&&t.validate().then((function(t){if("Valid"==t&&s.length>0){var a={roleName:c,description:c,isActive:!0,permissions:s};l.setAttribute("data-kt-indicator","on"),l.disabled=!0,Rn.post(e+"roles",a,{headers:{"Content-Type":"application/json"}}).then((function(e){e?(r.reset(),swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),m().then((e=>n(e))).catch((e=>console.error("Error al obtener los datos:",e))),o.hide()):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{l.removeAttribute("data-kt-indicator"),l.disabled=!1}))}else Swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores o no seleccionó un permiso. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})}))}))})(),(()=>{const e=r.querySelector("#kt_roles_select_all"),t=r.querySelectorAll('[type="checkbox"]');e.addEventListener("change",(e=>{t.forEach((t=>{t.checked=e.target.checked}))}))})(),m().then((e=>n(e))).catch((e=>console.error("Error al obtener los datos:",e))),l=document.getElementById("kt_modal_update_role"),s=l.querySelector("#kt_modal_update_role_form"),c=new bootstrap.Modal(l),(()=>{var t=FormValidation.formValidation(s,{fields:{role_name:{validators:{notEmpty:{message:"El nombre del Rol es requerido"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap:new FormValidation.plugins.Bootstrap5({rowSelector:".fv-row",eleInvalidClass:"",eleValidClass:""})}});l.querySelector('[data-kt-roles-modal-action="close"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cerrar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Yes",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value&&c.hide()}))})),l.querySelector('[data-kt-roles-modal-action="cancel"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cancelar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Yes",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value?(s.reset(),c.hide()):"cancel"===e.dismiss&&Swal.fire({text:"¡Tu formulario no ha sido cancelado!.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})}))}));const a=l.querySelector('[data-kt-roles-modal-action="submit"]');a.addEventListener("click",(function(r){r.preventDefault();const o=s.querySelectorAll('input[type="checkbox"]');var l=Array.from(o).filter((e=>e.checked&&""!==e.value&&"kt_roles_select_all"!==e.value)).map((e=>({permissionID:e.value,description:e.name,permissionName:e.name}))),i=s.querySelector('input[name="role_name"]').value,u=s.querySelector('input[name="roleID"]').value;t&&t.validate().then((function(t){if("Valid"==t){a.setAttribute("data-kt-indicator","on"),a.disabled=!0;var r={roleID:u,roleName:i,description:i,isActive:!0,permissions:l};Rn.put(e+"roles/"+u,r,{headers:{"Content-Type":"application/json"}}).then((function(e){e?(s.reset(),swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),m().then((e=>n(e))).catch((e=>console.error("Error al obtener los datos:",e))),c.hide()):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{a.removeAttribute("data-kt-indicator"),a.disabled=!1}))}else Swal.fire({text:"Sorry, looks like there are some errors detected, please try again.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}))}))})()}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Roles"),i.createElement("ul",{class:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{class:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",class:"text-muted text-hover-primary"},"Home")),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Roles"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"row row-cols-1 row-cols-md-2 row-cols-xl-3 g-5 g-xl-9"},i.createElement("div",{className:"col-md-4"},i.createElement("div",{className:"card h-md-100"},i.createElement("div",{className:"card-body d-flex flex-center"},i.createElement("button",{type:"button",className:"btn btn-clear d-flex flex-column flex-center","data-bs-toggle":"modal","data-bs-target":"#kt_modal_add_role"},i.createElement("img",{src:"assets/media/illustrations/sketchy-1/4.png",alt:"",className:"mw-100 mh-150px mb-7"}),i.createElement("div",{className:"fw-bold fs-3 text-gray-600 text-hover-primary"},"Agregar Rol"))))),t.length>0&&i.createElement(i.Fragment,null,t.map(((t,n)=>i.createElement("div",{className:"col-md-4",key:n},i.createElement("div",{className:"card card-flush h-md-100"},i.createElement("div",{className:"card-header"},i.createElement("div",{className:"card-title"},i.createElement("h2",null,t.description))),i.createElement("div",{className:"card-body pt-1"},i.createElement("div",{className:"fw-bold text-gray-600 mb-5"},"Total de usuarios con este rol: ",t.userCount),i.createElement("div",{className:"d-flex flex-column text-gray-600"},i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Creación - ",u(t.createdAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Creado por - ",t.createdBy," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Actualización - ",u(t.updatedAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Actualizado por - ",t.updatedBy," "))),i.createElement("div",{className:"card-footer flex-wrap pt-0"},i.createElement("button",{type:"button",className:"btn btn-light btn-active-light-primary my-1",onClick:()=>(t=>{(s=document.getElementById("kt_modal_update_role_form")).elements.role_name.value=t.roleName,s.elements.roleID.value=t.roleID,(async t=>{try{return(await Rn.get(e+"roles/"+t+"/permissions")).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(t.roleID).then((e=>{e.map((e=>{console.log("item",e);const t=s.elements[e.permissionName];t&&(t.checked=!0)}))})).catch((e=>console.error("Error al obtener los datos:",e)))})(t),"data-bs-toggle":"modal","data-bs-target":"#kt_modal_update_role"},"Editar Rol")))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_add_role",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-750px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Registrar Rol"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-roles-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-lg-5 my-7"},i.createElement("form",{id:"kt_modal_add_role_form",className:"form",action:"#"},i.createElement("div",{className:"d-flex flex-column scroll-y me-n7 pe-7",id:"kt_modal_add_role_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"{default: false, lg: true}","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_add_role_header","data-kt-scroll-wrappers":"#kt_modal_add_role_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},i.createElement("span",{className:"required"},"Nombre")),i.createElement("input",{className:"form-control form-control-solid",placeholder:"Ingresa el Nombre del Rol",name:"role_name"})),i.createElement("div",{className:"fv-row"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},"Permisos"),i.createElement("div",{className:"table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5"},i.createElement("tbody",{className:"text-gray-600 fw-semibold"},i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Accesos total",i.createElement("span",{className:"ms-2","data-bs-toggle":"popover","data-bs-trigger":"hover","data-bs-html":"true","data-bs-content":"Permite el acceso total a las opciones del"},i.createElement("i",{className:"ki-outline ki-information fs-7"}))),i.createElement("td",null,i.createElement("label",{className:"form-check form-check-custom form-check-solid me-9"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"kt_roles_select_all",id:"kt_roles_select_all"}),i.createElement("span",{className:"form-check-label",htmlFor:"kt_roles_select_all"},"Seleccionar Todo")))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Gestión de Usuarios"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"1",name:"user_management_search"}),i.createElement("span",{className:"form-check-label"},"Buscar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"2",name:"user_management_write"}),i.createElement("span",{className:"form-check-label"},"Registrar Usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"3",name:"user_management_deactivate"}),i.createElement("span",{className:"form-check-label"},"Desactivar usuarios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"4",name:"user_management_edit"}),i.createElement("span",{className:"form-check-label"},"Editar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"5",name:"user_management_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20 invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"}))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Reclutamiento"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"6",name:"hunting_search"}),i.createElement("span",{className:"form-check-label"},"Buscar postulantes")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"7",name:"hunting_create_criteria"}),i.createElement("span",{className:"form-check-label"},"Registrar criterios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"8",name:"hunting_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"9",name:"hunting_export_eval"}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20 invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20  invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Roles y Permisos"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"11",name:"roles_create"}),i.createElement("span",{className:"form-check-label"},"Registrar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"10",name:"roles_edit"}),i.createElement("span",{className:"form-check-label"},"Editar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Editar Roles")))))))))),i.createElement("div",{className:"text-center pt-15"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-roles-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-roles-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_update_role",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-750px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Actualizar Rol"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-roles-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 my-7"},i.createElement("form",{id:"kt_modal_update_role_form",className:"form",action:"#"},i.createElement("input",{type:"hidden",name:"roleID",id:"roleID"}),i.createElement("div",{className:"d-flex flex-column scroll-y me-n7 pe-7",id:"kt_modal_update_role_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"{default: false, lg: true}","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_update_role_header","data-kt-scroll-wrappers":"#kt_modal_update_role_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},i.createElement("span",{className:"required"},"Nombre")),i.createElement("input",{className:"form-control form-control-solid",placeholder:"Ingresa el Nombre del Rol",name:"role_name"})),i.createElement("div",{className:"fv-row"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},"Permisos"),i.createElement("div",{className:"table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5"},i.createElement("tbody",{className:"text-gray-600 fw-semibold"},i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Accesos total",i.createElement("span",{className:"ms-2","data-bs-toggle":"popover","data-bs-trigger":"hover","data-bs-html":"true","data-bs-content":"Permite el acceso total a las opciones del"},i.createElement("i",{className:"ki-outline ki-information fs-7"}))),i.createElement("td",null,i.createElement("label",{className:"form-check form-check-custom form-check-solid me-9"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",id:"kt_roles_select_all"}),i.createElement("span",{className:"form-check-label",htmlFor:"kt_roles_select_all"},"Seleccionar Todo")))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Gestión de Usuarios"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"1",name:"user_management_search"}),i.createElement("span",{className:"form-check-label"},"Buscar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"2",name:"user_management_write"}),i.createElement("span",{className:"form-check-label"},"Registrar Usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"3",name:"user_management_deactivate"}),i.createElement("span",{className:"form-check-label"},"Desactivar usuarios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"4",name:"user_management_edit"}),i.createElement("span",{className:"form-check-label"},"Editar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"5",name:"user_management_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Editar usuarios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Reclutamiento"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"6",name:"hunting_search"}),i.createElement("span",{className:"form-check-label"},"Buscar postulantes")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"7",name:"hunting_create_criteria"}),i.createElement("span",{className:"form-check-label"},"Registrar criterios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"8",name:"hunting_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"9",name:"hunting_post_forms"}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20 invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Roles y Permisos"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"11",name:"roles_create"}),i.createElement("span",{className:"form-check-label"},"Registrar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"10",name:"roles_edit"}),i.createElement("span",{className:"form-check-label"},"Editar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:"financial_management_write"}),i.createElement("span",{className:"form-check-label"},"Editar Roles")))))))))),i.createElement("div",{className:"text-center pt-15"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-roles-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-roles-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))))))};var Tn,On=new Uint8Array(16);function In(){if(!Tn&&!(Tn="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Tn(On)}for(var Dn=[],An=0;An<256;++An)Dn.push((An+256).toString(16).slice(1));function Fn(e,t=0){return(Dn[e[t+0]]+Dn[e[t+1]]+Dn[e[t+2]]+Dn[e[t+3]]+"-"+Dn[e[t+4]]+Dn[e[t+5]]+"-"+Dn[e[t+6]]+Dn[e[t+7]]+"-"+Dn[e[t+8]]+Dn[e[t+9]]+"-"+Dn[e[t+10]]+Dn[e[t+11]]+Dn[e[t+12]]+Dn[e[t+13]]+Dn[e[t+14]]+Dn[e[t+15]]).toLowerCase()}var Ln,Bn,zn=0,Mn=0;const jn=()=>{const[e,t]=(0,i.useState)([]);let n=Z();const a="https://madsis.mad.ec/api/",r=e=>moment(e).subtract(5,"hours").format("YYYY-MM-DD HH:mm:ss");return(0,i.useEffect)((()=>{(async()=>{try{return(await Rn.get(a+"form")).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})().then((e=>t(e.forms)))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Formularios de evaluación"),i.createElement("ul",{class:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{class:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",class:"text-muted text-hover-primary"},"Home")),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Formulario de Evaluación"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card"},i.createElement("div",{className:"card-header border-0"},i.createElement("div",{className:"card-title"},i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("i",{className:"ki-outline ki-magnifier fs-3 position-absolute ms-5"}),i.createElement("input",{type:"text",id:"titleSearch",className:"form-control form-control-solid w-250px ps-13",style:{width:"450px!important"},placeholder:"Buscar por nombre"})),i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("label",{className:"form-label ms-4"},"Fecha de Creación"),i.createElement("input",{type:"date",id:"createdAtInSearch",className:"ms-4 form-control form-control-solid w-250px ps-13"})),i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("label",{className:"form-label ms-4"},"Fecha Fin"),i.createElement("input",{type:"date",id:"createdAtFnSearch",className:"ms-4 form-control form-control-solid w-250px ps-13"}))),i.createElement("div",{className:"card-toolbar"},i.createElement("div",{className:"d-flex justify-content-end","data-kt-user-table-toolbar":"base"},i.createElement("button",{type:"button",className:"btn btn-light-primary me-3",onClick:()=>{(async(e,t,n)=>{try{var r=a+"form/search";return e&&(r=r+"?title="+e),t&&n&&e&&(r=r+"&startDate="+t+"&endDate="+n),t&&n&&!e&&(r=r+"?startDate="+t+"&endDate="+n),(await Rn.get(r)).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(document.getElementById("titleSearch").value||null,document.getElementById("createdAtInSearch").value||null,document.getElementById("createdAtFnSearch").value||null).then((e=>t(e)))}},i.createElement("i",{className:"ki-outline ki-sarch fs-2"}),"Buscar"),i.createElement("button",{type:"button",onClick:()=>{const e=function(e,t,n){var a=t&&n||0,r=t||new Array(16),o=(e=e||{}).node,l=e.clockseq;if(e._v6||(o||(o=Ln),null==l&&(l=Bn)),null==o||null==l){var i=e.random||(e.rng||In)();null==o&&(o=[i[0],i[1],i[2],i[3],i[4],i[5]],Ln||e._v6||(o[0]|=1,Ln=o)),null==l&&(l=16383&(i[6]<<8|i[7]),void 0!==Bn||e._v6||(Bn=l))}var s=void 0!==e.msecs?e.msecs:Date.now(),c=void 0!==e.nsecs?e.nsecs:Mn+1,u=s-zn+(c-Mn)/1e4;if(u<0&&void 0===e.clockseq&&(l=l+1&16383),(u<0||s>zn)&&void 0===e.nsecs&&(c=0),c>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");zn=s,Mn=c,Bn=l;var m=(1e4*(268435455&(s+=122192928e5))+c)%4294967296;r[a++]=m>>>24&255,r[a++]=m>>>16&255,r[a++]=m>>>8&255,r[a++]=255&m;var d=s/4294967296*1e4&268435455;r[a++]=d>>>8&255,r[a++]=255&d,r[a++]=d>>>24&15|16,r[a++]=d>>>16&255,r[a++]=l>>>8|128,r[a++]=255&l;for(var f=0;f<6;++f)r[a+f]=o[f];return t||Fn(r)}();n("/form/"+e)},className:"btn btn-primary"},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Formulario")),i.createElement("div",{className:"d-flex justify-content-end align-items-center d-none","data-kt-user-table-toolbar":"selected"},i.createElement("div",{className:"fw-bold me-5"},i.createElement("span",{className:"me-2","data-kt-user-table-select":"selected_count"}),"Seleccionado"),i.createElement("button",{type:"button",className:"btn btn-danger","data-kt-user-table-select":"delete_selected"},"Desactivar Seleccionados"))))),i.createElement("div",{className:"row row-cols-1 row-cols-md-2 row-cols-xl-3 g-5 g-xl-9 mt-1"},e.length>0&&i.createElement(i.Fragment,null,e.map(((e,t)=>i.createElement("div",{className:"col-md-4",key:t},i.createElement("div",{className:"card card-flush h-md-100"},i.createElement("div",{className:"card-header"},i.createElement("div",{className:"card-title"},i.createElement("h2",null,e.title))),i.createElement("div",{className:"card-body pt-1"},i.createElement("div",{className:"fw-bold text-gray-600 mb-5"},"Total de Preguntas: ",e.questions.length),i.createElement("div",{className:"d-flex flex-column text-gray-600"},i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Creación - ",r(e.createdAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Creado por - ",e.createdBy," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Actualización - ",r(e.updatedAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Actualizado por - ",e.updatedBy," "))),i.createElement("div",{className:"card-footer flex-wrap pt-0"},i.createElement("button",{type:"button",className:"btn btn-light btn-active-light-primary my-1",onClick:()=>(e=>{console.log("item",e),n("/form/"+e.id)})(e)},"Editar Formulario"),i.createElement("button",{type:"button",className:"btn btn-light btn-active-light-primary my-1"},"Realizar Evaluación")))))))))))},Un=()=>i.createElement(i.Fragment,null,i.createElement(jn,null));function qn(){return qn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)({}).hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},qn.apply(null,arguments)}function Wn(e,t){if(null==e)return{};var n={};for(var a in e)if({}.hasOwnProperty.call(e,a)){if(t.includes(a))continue;n[a]=e[a]}return n}function $n(e,t){if(null==e)return{};var n,a,r=Wn(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.includes(n)||{}.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function Vn(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Vn(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}const Hn=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=Vn(e))&&(a&&(a+=" "),a+=t);return a};function Gn(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Kn(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(Gn(e.value)&&""!==e.value||t&&Gn(e.defaultValue)&&""!==e.defaultValue)}var Qn=r(146),Jn=r.n(Qn),Yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const Xn="object"===("undefined"==typeof window?"undefined":Yn(window))&&"object"===("undefined"==typeof document?"undefined":Yn(document))&&9===document.nodeType;function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}function ea(e){var t=function(e,t){if("object"!=Zn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,"string");if("object"!=Zn(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Zn(t)?t:t+""}function ta(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,ea(a.key),a)}}function na(e,t,n){return t&&ta(e.prototype,t),n&&ta(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function aa(e,t){return aa=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},aa(e,t)}function ra(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,aa(e,t)}function oa(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var la={}.constructor;function ia(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(ia);if(e.constructor!==la)return e;var t={};for(var n in e)t[n]=ia(e[n]);return t}function sa(e,t,n){void 0===e&&(e="unnamed");var a=n.jss,r=ia(t);return a.plugins.onCreateRule(e,r,n)||(e[0],null)}var ca=function(e,t){for(var n="",a=0;a<e.length&&"!important"!==e[a];a++)n&&(n+=t),n+=e[a];return n},ua=function(e){if(!Array.isArray(e))return e;var t="";if(Array.isArray(e[0]))for(var n=0;n<e.length&&"!important"!==e[n];n++)t&&(t+=", "),t+=ca(e[n]," ");else t=ca(e,", ");return"!important"===e[e.length-1]&&(t+=" !important"),t};function ma(e){return e&&!1===e.format?{linebreak:"",space:""}:{linebreak:"\n",space:" "}}function da(e,t){for(var n="",a=0;a<t;a++)n+="  ";return n+e}function fa(e,t,n){void 0===n&&(n={});var a="";if(!t)return a;var r=n.indent,o=void 0===r?0:r,l=t.fallbacks;!1===n.format&&(o=-1/0);var i=ma(n),s=i.linebreak,c=i.space;if(e&&o++,l)if(Array.isArray(l))for(var u=0;u<l.length;u++){var m=l[u];for(var d in m){var f=m[d];null!=f&&(a&&(a+=s),a+=da(d+":"+c+ua(f)+";",o))}}else for(var p in l){var h=l[p];null!=h&&(a&&(a+=s),a+=da(p+":"+c+ua(h)+";",o))}for(var b in t){var v=t[b];null!=v&&"fallbacks"!==b&&(a&&(a+=s),a+=da(b+":"+c+ua(v)+";",o))}return(a||n.allowEmpty)&&e?(a&&(a=""+s+a+s),da(""+e+c+"{"+a,--o)+da("}",o)):a}var pa=/([[\].#*$><+~=|^:(),"'`\s])/g,ha="undefined"!=typeof CSS&&CSS.escape,ba=function(e){return ha?ha(e):e.replace(pa,"\\$1")},va=function(){function e(e,t,n){this.type="style",this.isProcessed=!1;var a=n.sheet,r=n.Renderer;this.key=e,this.options=n,this.style=t,a?this.renderer=a.renderer:r&&(this.renderer=new r)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var a=!!n&&n.force;if(!a&&this.style[e]===t)return this;var r=t;n&&!1===n.process||(r=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==r||!1===r,l=e in this.style;if(o&&!l&&!a)return this;var i=o&&l;if(i?delete this.style[e]:this.style[e]=r,this.renderable&&this.renderer)return i?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,r),this;var s=this.options.sheet;return s&&s.attached,this},e}(),ga=function(e){function t(t,n,a){var r;r=e.call(this,t,n,a)||this;var o=a.selector,l=a.scoped,i=a.sheet,s=a.generateId;return o?r.selectorText=o:!1!==l&&(r.id=s(oa(oa(r)),i),r.selectorText="."+ba(r.id)),r}ra(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var a in n)t.setProperty(e,a,n[a])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=ua(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?qn({},e,{allowEmpty:!0}):e;return fa(this.selectorText,this.style,n)},na(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(va),ya={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new ga(e,t,n)}},Ea={indent:1,children:!0},xa=/@([\w-]+)/,wa=function(){function e(e,t,n){this.type="conditional",this.isProcessed=!1,this.key=e;var a=e.match(xa);for(var r in this.at=a?a[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new Ha(qn({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var a=this.rules.add(e,t,n);return a?(this.options.jss.plugins.onProcessRule(a),a):null},t.replaceRule=function(e,t,n){var a=this.rules.replace(e,t,n);return a&&this.options.jss.plugins.onProcessRule(a),a},t.toString=function(e){void 0===e&&(e=Ea);var t=ma(e).linebreak;if(null==e.indent&&(e.indent=Ea.indent),null==e.children&&(e.children=Ea.children),!1===e.children)return this.query+" {}";var n=this.rules.toString(e);return n?this.query+" {"+t+n+t+"}":""},e}(),Na=/@container|@media|@supports\s+/,ka={onCreateRule:function(e,t,n){return Na.test(e)?new wa(e,t,n):null}},Sa={indent:1,children:!0},Ca=/@keyframes\s+([\w-]+)/,_a=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.isProcessed=!1;var a=e.match(Ca);a&&a[1]?this.name=a[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var r=n.scoped,o=n.sheet,l=n.generateId;for(var i in this.id=!1===r?this.name:ba(l(this,o)),this.rules=new Ha(qn({},n,{parent:this})),t)this.rules.add(i,t[i],qn({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){void 0===e&&(e=Sa);var t=ma(e).linebreak;if(null==e.indent&&(e.indent=Sa.indent),null==e.children&&(e.children=Sa.children),!1===e.children)return this.at+" "+this.id+" {}";var n=this.rules.toString(e);return n&&(n=""+t+n+t),this.at+" "+this.id+" {"+n+"}"},e}(),Ra=/@keyframes\s+/,Pa=/\$([\w-]+)/g,Ta=function(e,t){return"string"==typeof e?e.replace(Pa,(function(e,n){return n in t?t[n]:e})):e},Oa=function(e,t,n){var a=e[t],r=Ta(a,n);r!==a&&(e[t]=r)},Ia={onCreateRule:function(e,t,n){return"string"==typeof e&&Ra.test(e)?new _a(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&Oa(e,"animation-name",n.keyframes),"animation"in e&&Oa(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var a=n.options.sheet;if(!a)return e;switch(t){case"animation":case"animation-name":return Ta(e,a.keyframes);default:return e}}},Da=function(e){function t(){return e.apply(this,arguments)||this}return ra(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?qn({},e,{allowEmpty:!0}):e;return fa(this.key,this.style,n)},t}(va),Aa={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new Da(e,t,n):null}},Fa=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.isProcessed=!1,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){var t=ma(e).linebreak;if(Array.isArray(this.style)){for(var n="",a=0;a<this.style.length;a++)n+=fa(this.at,this.style[a]),this.style[a+1]&&(n+=t);return n}return fa(this.at,this.style,e)},e}(),La=/@font-face/,Ba={onCreateRule:function(e,t,n){return La.test(e)?new Fa(e,t,n):null}},za=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.isProcessed=!1,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return fa(this.key,this.style,e)},e}(),Ma={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new za(e,t,n):null}},ja=function(){function e(e,t,n){this.type="simple",this.isProcessed=!1,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),Ua={"@charset":!0,"@import":!0,"@namespace":!0},qa={onCreateRule:function(e,t,n){return e in Ua?new ja(e,t,n):null}},Wa=[ya,ka,Ia,Aa,Ba,Ma,qa],$a={process:!0},Va={force:!0,process:!0},Ha=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var a=this.options,r=a.parent,o=a.sheet,l=a.jss,i=a.Renderer,s=a.generateId,c=a.scoped,u=qn({classes:this.classes,parent:r,sheet:o,jss:l,Renderer:i,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),m=e;e in this.raw&&(m=e+"-d"+this.counter++),this.raw[m]=t,m in this.classes&&(u.selector="."+ba(this.classes[m]));var d=sa(m,t,u);if(!d)return null;this.register(d);var f=void 0===u.index?this.index.length:u.index;return this.index.splice(f,0,d),d},t.replace=function(e,t,n){var a=this.get(e),r=this.index.indexOf(a);a&&this.remove(a);var o=n;return-1!==r&&(o=qn({},n,{index:r})),this.add(e,t,o)},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof ga?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof _a&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof ga?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof _a&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.get(e),t,n);else for(var a=0;a<this.index.length;a++)this.updateOne(this.index[a],t,n)},t.updateOne=function(t,n,a){void 0===a&&(a=$a);var r=this.options,o=r.jss.plugins,l=r.sheet;if(t.rules instanceof e)t.rules.update(n,a);else{var i=t.style;if(o.onUpdate(n,t,l,a),a.process&&i&&i!==t.style){for(var s in o.onProcessStyle(t.style,t,l),t.style){var c=t.style[s];c!==i[s]&&t.prop(s,c,Va)}for(var u in i){var m=t.style[u],d=i[u];null==m&&m!==d&&t.prop(u,null,Va)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,a=!!n&&n.options.link,r=ma(e).linebreak,o=0;o<this.index.length;o++){var l=this.index[o].toString(e);(l||a)&&(t&&(t+=r),t+=l)}return t},e}(),Ga=function(){function e(e,t){for(var n in this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=qn({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Ha(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var a=this.queue;this.attached&&!a&&(this.queue=[]);var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),this.attached?this.deployed?(a?a.push(r):(this.insertRule(r),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),r):r:(this.deployed=!1,r)):null},t.replaceRule=function(e,t,n){var a=this.rules.get(e);if(!a)return this.addRule(e,t,n);var r=this.rules.replace(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),this.attached?this.deployed?(this.renderer&&(r?a.renderable&&this.renderer.replaceRule(a.renderable,r):this.renderer.deleteRule(a)),r):r:(this.deployed=!1,r)},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var a in e){var r=this.addRule(a,e[a],t);r&&n.push(r)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Ka=function(){function e(){this.plugins={internal:[],external:[]},this.registry={}}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var a=0;a<this.registry.onCreateRule.length;a++){var r=this.registry.onCreateRule[a](e,t,n);if(r)return r}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var a=0;a<this.registry.onProcessStyle.length;a++)t.style=this.registry.onProcessStyle[a](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,a){for(var r=0;r<this.registry.onUpdate.length;r++)this.registry.onUpdate[r](e,t,n,a)},t.onChangeValue=function(e,t,n){for(var a=e,r=0;r<this.registry.onChangeValue.length;r++)a=this.registry.onChangeValue[r](a,t,n);return a},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Qa=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var a=0;a<t.length;a++)if(t[a].options.index>n)return void t.splice(a,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,a=Wn(t,["attached"]),r=ma(a).linebreak,o="",l=0;l<this.registry.length;l++){var i=this.registry[l];null!=n&&i.attached!==n||(o&&(o+=r),o+=i.toString(a))}return o},na(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),Ja=new Qa,Ya="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),Xa="2f1acc6c3a606b082e5eef5e54414ffb";null==Ya[Xa]&&(Ya[Xa]=0);var Za=Ya[Xa]++,er=function(e){void 0===e&&(e={});var t=0;return function(n,a){t+=1;var r="",o="";return a&&(a.options.classNamePrefix&&(o=a.options.classNamePrefix),null!=a.options.jss.id&&(r=String(a.options.jss.id))),e.minify?""+(o||"c")+Za+r+t:o+n.key+"-"+Za+(r?"-"+r:"")+"-"+t}},tr=function(e){var t;return function(){return t||(t=e()),t}},nr=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ar=function(e,t,n){try{var a=n;if(Array.isArray(n)&&(a=ua(n)),e.attributeStyleMap)e.attributeStyleMap.set(t,a);else{var r=a?a.indexOf("!important"):-1,o=r>-1?a.substr(0,r-1):a;e.style.setProperty(t,o,r>-1?"important":"")}}catch(e){return!1}return!0},rr=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},or=function(e,t){return e.selectorText=t,e.selectorText===t},lr=tr((function(){return document.querySelector("head")}));var ir=tr((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),sr=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},cr=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},ur=function(){function e(e){this.getPropertyValue=nr,this.setProperty=ar,this.removeProperty=rr,this.setSelector=or,this.hasInsertedRules=!1,this.cssRules=[],e&&Ja.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,a=t.meta,r=t.element;this.element=r||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),a&&this.element.setAttribute("data-meta",a);var o=ir();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,a=function(e){var t=Ja.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var a=e[n];if(a.attached&&a.options.index>t.index&&a.options.insertionPoint===t.insertionPoint)return a}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var a=e[n];if(a.attached&&a.options.insertionPoint===t.insertionPoint)return a}return null}(t,e),n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var a=e.insertionPoint;if(a&&"string"==typeof a){var r=function(e){for(var t=lr(),n=0;n<t.childNodes.length;n++){var a=t.childNodes[n];if(8===a.nodeType&&a.nodeValue.trim()===e)return a}return null}(a);if(r)return{parent:r.parentNode,node:r.nextSibling}}return!1}(t);if(!1!==a&&a.parent)a.parent.insertBefore(e,a.node);else if(n&&"number"==typeof n.nodeType){var r=n,o=r.parentNode;o&&o.insertBefore(e,r.nextSibling)}else lr().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var a=e,r=n;if("conditional"===e.type||"keyframes"===e.type){var o=cr(n,t);if(!1===(r=sr(n,a.toString({children:!1}),o)))return!1;this.refCssRule(e,o,r)}return this.insertRules(a.rules,r),r}var l=e.toString();if(!l)return!1;var i=cr(n,t),s=sr(n,l,i);return!1!==s&&(this.hasInsertedRules=!0,this.refCssRule(e,i,s),s)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof Ga&&this.cssRules.splice(t,0,n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),mr=0,dr=function(){function e(e){this.id=mr++,this.version="10.10.0",this.plugins=new Ka,this.options={id:{minify:!1},createGenerateId:er,Renderer:Xn?ur:null,plugins:[]},this.generateId=er({minify:!1});for(var t=0;t<Wa.length;t++)this.plugins.use(Wa[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=qn({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===Ja.index?0:Ja.index+1);var a=new Ga(e,qn({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(a),a},t.removeStyleSheet=function(e){return e.detach(),Ja.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var a=qn({},n,{name:e,jss:this,Renderer:this.options.Renderer});a.generateId||(a.generateId=this.generateId),a.classes||(a.classes={}),a.keyframes||(a.keyframes={});var r=sa(e,t,a);return r&&this.plugins.onProcessRule(r),r},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return n.forEach((function(t){e.plugins.use(t)})),this},e}(),fr=function(e){return new dr(e)},pr="object"==typeof CSS&&null!=CSS&&"number"in CSS;function hr(e){var t=null;for(var n in e){var a=e[n],r=typeof a;if("function"===r)t||(t={}),t[n]=a;else if("object"===r&&null!==a&&!Array.isArray(a)){var o=hr(a);o&&(t||(t={}),t[n]=o)}}return t}function br(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var a=qn({},t);return Object.keys(n).forEach((function(e){n[e]&&(a[e]="".concat(t[e]," ").concat(n[e]))})),a}fr();var vr={set:function(e,t,n,a){var r=e.get(t);r||(r=new Map,e.set(t,r)),r.set(n,a)},get:function(e,t,n){var a=e.get(t);return a?a.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};const gr=vr,yr=i.createContext(null);function Er(){return i.useContext(yr)}const xr="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var wr=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],Nr=Date.now(),kr="fnValues"+Nr,Sr="fnStyle"+ ++Nr;var Cr="@global",_r=function(){function e(e,t,n){for(var a in this.type="global",this.at=Cr,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new Ha(qn({},n,{parent:this})),t)this.rules.add(a,t[a]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var a=this.rules.add(e,t,n);return a&&this.options.jss.plugins.onProcessRule(a),a},t.replaceRule=function(e,t,n){var a=this.rules.replace(e,t,n);return a&&this.options.jss.plugins.onProcessRule(a),a},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(e){return this.rules.toString(e)},e}(),Rr=function(){function e(e,t,n){this.type="global",this.at=Cr,this.isProcessed=!1,this.key=e,this.options=n;var a=e.substr(8);this.rule=n.jss.createRule(a,t,qn({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Pr=/\s*,\s*/g;function Tr(e,t){for(var n=e.split(Pr),a="",r=0;r<n.length;r++)a+=t+" "+n[r].trim(),n[r+1]&&(a+=", ");return a}var Or=/\s*,\s*/g,Ir=/&/g,Dr=/\$([\w-]+)/g;var Ar=/[A-Z]/g,Fr=/^ms-/,Lr={};function Br(e){return"-"+e.toLowerCase()}const zr=function(e){if(Lr.hasOwnProperty(e))return Lr[e];var t=e.replace(Ar,Br);return Lr[e]=Fr.test(t)?"-"+t:t};function Mr(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:zr(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Mr):t.fallbacks=Mr(e.fallbacks)),t}var jr=pr&&CSS?CSS.px:"px",Ur=pr&&CSS?CSS.ms:"ms",qr=pr&&CSS?CSS.percent:"%";function Wr(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},a={};for(var r in e)a[r]=e[r],a[r.replace(t,n)]=e[r];return a}var $r=Wr({"animation-delay":Ur,"animation-duration":Ur,"background-position":jr,"background-position-x":jr,"background-position-y":jr,"background-size":jr,border:jr,"border-bottom":jr,"border-bottom-left-radius":jr,"border-bottom-right-radius":jr,"border-bottom-width":jr,"border-left":jr,"border-left-width":jr,"border-radius":jr,"border-right":jr,"border-right-width":jr,"border-top":jr,"border-top-left-radius":jr,"border-top-right-radius":jr,"border-top-width":jr,"border-width":jr,"border-block":jr,"border-block-end":jr,"border-block-end-width":jr,"border-block-start":jr,"border-block-start-width":jr,"border-block-width":jr,"border-inline":jr,"border-inline-end":jr,"border-inline-end-width":jr,"border-inline-start":jr,"border-inline-start-width":jr,"border-inline-width":jr,"border-start-start-radius":jr,"border-start-end-radius":jr,"border-end-start-radius":jr,"border-end-end-radius":jr,margin:jr,"margin-bottom":jr,"margin-left":jr,"margin-right":jr,"margin-top":jr,"margin-block":jr,"margin-block-end":jr,"margin-block-start":jr,"margin-inline":jr,"margin-inline-end":jr,"margin-inline-start":jr,padding:jr,"padding-bottom":jr,"padding-left":jr,"padding-right":jr,"padding-top":jr,"padding-block":jr,"padding-block-end":jr,"padding-block-start":jr,"padding-inline":jr,"padding-inline-end":jr,"padding-inline-start":jr,"mask-position-x":jr,"mask-position-y":jr,"mask-size":jr,height:jr,width:jr,"min-height":jr,"max-height":jr,"min-width":jr,"max-width":jr,bottom:jr,left:jr,top:jr,right:jr,inset:jr,"inset-block":jr,"inset-block-end":jr,"inset-block-start":jr,"inset-inline":jr,"inset-inline-end":jr,"inset-inline-start":jr,"box-shadow":jr,"text-shadow":jr,"column-gap":jr,"column-rule":jr,"column-rule-width":jr,"column-width":jr,"font-size":jr,"font-size-delta":jr,"letter-spacing":jr,"text-decoration-thickness":jr,"text-indent":jr,"text-stroke":jr,"text-stroke-width":jr,"word-spacing":jr,motion:jr,"motion-offset":jr,outline:jr,"outline-offset":jr,"outline-width":jr,perspective:jr,"perspective-origin-x":qr,"perspective-origin-y":qr,"transform-origin":qr,"transform-origin-x":qr,"transform-origin-y":qr,"transform-origin-z":qr,"transition-delay":Ur,"transition-duration":Ur,"vertical-align":jr,"flex-basis":jr,"shape-margin":jr,size:jr,gap:jr,grid:jr,"grid-gap":jr,"row-gap":jr,"grid-row-gap":jr,"grid-column-gap":jr,"grid-template-rows":jr,"grid-template-columns":jr,"grid-auto-rows":jr,"grid-auto-columns":jr,"box-shadow-x":jr,"box-shadow-y":jr,"box-shadow-blur":jr,"box-shadow-spread":jr,"font-line-height":jr,"text-shadow-x":jr,"text-shadow-y":jr,"text-shadow-blur":jr});function Vr(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var a=0;a<t.length;a++)t[a]=Vr(e,t[a],n);else if("object"==typeof t)if("fallbacks"===e)for(var r in t)t[r]=Vr(r,t[r],n);else for(var o in t)t[o]=Vr(e+"-"+o,t[o],n);else if("number"==typeof t&&!1===isNaN(t)){var l=n[e]||$r[e];return!l||0===t&&l===jr?t.toString():"function"==typeof l?l(t).toString():""+t+l}return t}function Hr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=Array(t);n<t;n++)a[n]=e[n];return a}function Gr(e,t){if(e){if("string"==typeof e)return Hr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hr(e,t):void 0}}function Kr(e){return function(e){if(Array.isArray(e))return Hr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Gr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Qr="",Jr="",Yr="",Xr="",Zr=Xn&&"ontouchstart"in document.documentElement;if(Xn){var eo={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},to=document.createElement("p").style;for(var no in eo)if(no+"Transform"in to){Qr=no,Jr=eo[no];break}"Webkit"===Qr&&"msHyphens"in to&&(Qr="ms",Jr=eo.ms,Xr="edge"),"Webkit"===Qr&&"-apple-trailing-word"in to&&(Yr="apple")}var ao=Qr,ro=Jr,oo=Yr,lo=Xr,io=Zr,so={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===ao?"-webkit-"+e:ro+e)}},co={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===ao?ro+"print-"+e:e)}},uo=/[-\s]+(.)?/g;function mo(e,t){return t?t.toUpperCase():""}function fo(e){return e.replace(uo,mo)}function po(e){return fo("-"+e)}var ho,bo={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===ao){var n="mask-image";if(fo(n)in t)return e;if(ao+po(n)in t)return ro+e}return e}},vo={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==oo||io?e:ro+e)}},go={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:ro+e)}},yo={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:ro+e)}},Eo={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===ao||"ms"===ao&&"edge"!==lo?ro+e:e)}},xo={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===ao||"ms"===ao||"apple"===oo?ro+e:e)}},wo={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===ao?"WebkitColumn"+po(e)in t&&ro+"column-"+e:"Moz"===ao&&"page"+po(e)in t&&"page-"+e)}},No={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===ao)return e;var n=e.replace("-inline","");return ao+po(n)in t&&ro+n}},ko={supportedProperty:function(e,t){return fo(e)in t&&e}},So={supportedProperty:function(e,t){var n=po(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:ao+n in t?ro+e:"Webkit"!==ao&&"Webkit"+n in t&&"-webkit-"+e}},Co={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===ao?""+ro+e:e)}},_o={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===ao?ro+"scroll-chaining":e)}},Ro={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Po={supportedProperty:function(e,t){var n=Ro[e];return!!n&&ao+po(n)in t&&ro+n}},To={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Oo=Object.keys(To),Io=function(e){return ro+e},Do={supportedProperty:function(e,t,n){var a=n.multiple;if(Oo.indexOf(e)>-1){var r=To[e];if(!Array.isArray(r))return ao+po(r)in t&&ro+r;if(!a)return!1;for(var o=0;o<r.length;o++)if(!(ao+po(r[0])in t))return!1;return r.map(Io)}return!1}},Ao=[so,co,bo,vo,go,yo,Eo,xo,wo,No,ko,So,Co,_o,Po,Do],Fo=Ao.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Lo=Ao.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Kr(t.noPrefill)),e}),[]),Bo={};if(Xn){ho=document.createElement("p");var zo=window.getComputedStyle(document.documentElement,"");for(var Mo in zo)isNaN(Mo)||(Bo[zo[Mo]]=zo[Mo]);Lo.forEach((function(e){return delete Bo[e]}))}function jo(e,t){if(void 0===t&&(t={}),!ho)return e;if(null!=Bo[e])return Bo[e];"transition"!==e&&"transform"!==e||(t[e]=e in ho.style);for(var n=0;n<Fo.length&&(Bo[e]=Fo[n](e,ho.style,t),!Bo[e]);n++);try{ho.style[e]=""}catch(e){return!1}return Bo[e]}var Uo,qo={},Wo={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},$o=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Vo(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?jo(t):", "+jo(n))||t||n}function Ho(e,t){var n=t;if(!Uo||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var a=e+n;if(null!=qo[a])return qo[a];try{Uo.style[e]=n}catch(e){return qo[a]=!1,!1}if(Wo[e])n=n.replace($o,Vo);else if(""===Uo.style[e]&&("-ms-flex"===(n=ro+n)&&(Uo.style[e]="-ms-flexbox"),Uo.style[e]=n,""===Uo.style[e]))return qo[a]=!1,!1;return Uo.style[e]="",qo[a]=n,qo[a]}Xn&&(Uo=document.createElement("p"));var Go,Ko=fr({plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var a=sa(e,{},n);return a[Sr]=t,a},onProcessStyle:function(e,t){if(kr in t||Sr in t)return e;var n={};for(var a in e){var r=e[a];"function"==typeof r&&(delete e[a],n[a]=r)}return t[kr]=n,e},onUpdate:function(e,t,n,a){var r=t,o=r[Sr];o&&(r.style=o(e)||{});var l=r[kr];if(l)for(var i in l)r.prop(i,l[i](e),a)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===Cr)return new _r(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,8))return new Rr(e,t,n);var a=n.parent;return a&&("global"===a.type||a.options.parent&&"global"===a.options.parent.type)&&(n.scoped=!1),n.selector||!1!==n.scoped||(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,a=e.style,r=a?a[Cr]:null;if(r){for(var o in r)t.addRule(o,r[o],qn({},n,{selector:Tr(o,e.selector)}));delete a[Cr]}}(e,t),function(e,t){var n=e.options,a=e.style;for(var r in a)if("@"===r[0]&&r.substr(0,7)===Cr){var o=Tr(r.substr(7),e.selector);t.addRule(o,a[r],qn({},n,{selector:o})),delete a[r]}}(e,t))}},function(){function e(e,t){return function(n,a){var r=e.getRule(a)||t&&t.getRule(a);return r?r.selector:a}}function t(e,t){for(var n=t.split(Or),a=e.split(Or),r="",o=0;o<n.length;o++)for(var l=n[o],i=0;i<a.length;i++){var s=a[i];r&&(r+=", "),r+=-1!==s.indexOf("&")?s.replace(Ir,l):l+" "+s}return r}function n(e,t,n){if(n)return qn({},n,{index:n.index+1});var a=e.options.nestingLevel;a=void 0===a?1:a+1;var r=qn({},e.options,{nestingLevel:a,index:t.indexOf(e)+1});return delete r.name,r}return{onProcessStyle:function(a,r,o){if("style"!==r.type)return a;var l,i,s=r,c=s.options.parent;for(var u in a){var m=-1!==u.indexOf("&"),d="@"===u[0];if(m||d){if(l=n(s,c,l),m){var f=t(u,s.selector);i||(i=e(c,o)),f=f.replace(Dr,i);var p=s.key+"-"+u;"replaceRule"in c?c.replaceRule(p,a[u],qn({},l,{selector:f})):c.addRule(p,a[u],qn({},l,{selector:f}))}else d&&c.addRule(u,{},l).addRule(s.key,a[u],{selector:s.selector});delete a[u]}}return a}}}(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Mr(e[t]);return e}return Mr(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var a=zr(t);return t===a?e:(n.prop(a,e),null)}},function(e){void 0===e&&(e={});var t=Wr(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var a in e)e[a]=Vr(a,e[a],t);return e},onChangeValue:function(e,n){return Vr(n,e,t)}}}(),"undefined"==typeof window?null:function(){function e(t){for(var n in t){var a=t[n];if("fallbacks"===n&&Array.isArray(a))t[n]=a.map(e);else{var r=!1,o=jo(n);o&&o!==n&&(r=!0);var l=!1,i=Ho(o,ua(a));i&&i!==a&&(l=!0),(r||l)&&(r&&delete t[n],t[o||n]=i||a)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===ao?e:"@"+ro+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Ho(t,ua(e))||e}}}(),(Go=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n={},a=Object.keys(e).sort(Go),r=0;r<a.length;r++)n[a[r]]=e[a[r]];return n}})]}),Qo=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,a=e.productionPrefix,r=void 0===a?"jss":a,o=e.seed,l=void 0===o?"":o,i=""===l?"":"".concat(l,"-"),s=0,c=function(){return s+=1};return function(e,t){var a=t.options.name;if(a&&0===a.indexOf("Mui")&&!t.options.link&&!n){if(-1!==wr.indexOf(e.key))return"Mui-".concat(e.key);var o="".concat(i).concat(a,"-").concat(e.key);return t.options.theme[xr]&&""===l?"".concat(o,"-").concat(c()):o}return"".concat(i).concat(r).concat(c())}}(),Jo={disableGeneration:!1,generateClassName:Qo,jss:Ko,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Yo=i.createContext(Jo),Xo=-1e9;function Zo(e){return e&&"object"===Zn(e)&&e.constructor===Object}function el(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},a=n.clone?qn({},e):e;return Zo(e)&&Zo(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(Zo(t[r])&&r in e?a[r]=el(e[r],t[r],n):a[r]=t[r])})),a}const tl={};function nl(e,t){var n=e.state,a=e.theme,r=e.stylesOptions,o=e.stylesCreator,l=e.name;if(!r.disableGeneration){var i=gr.get(r.sheetsManager,o,a);i||(i={refs:0,staticSheet:null,dynamicStyles:null},gr.set(r.sheetsManager,o,a,i));var s=qn({},o.options,r,{theme:a,flip:"boolean"==typeof r.flip?r.flip:"rtl"===a.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=r.sheetsRegistry;if(0===i.refs){var u;r.sheetsCache&&(u=gr.get(r.sheetsCache,o,a));var m=o.create(a,l);u||((u=r.jss.createStyleSheet(m,qn({link:!1},s))).attach(),r.sheetsCache&&gr.set(r.sheetsCache,o,a,u)),c&&c.add(u),i.staticSheet=u,i.dynamicStyles=hr(m)}if(i.dynamicStyles){var d=r.jss.createStyleSheet(i.dynamicStyles,qn({link:!0},s));d.update(t),d.attach(),n.dynamicSheet=d,n.classes=br({baseClasses:i.staticSheet.classes,newClasses:d.classes}),c&&c.add(d)}else n.classes=i.staticSheet.classes;i.refs+=1}}function al(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,a=t.classNamePrefix,r=t.Component,o=t.defaultTheme,l=void 0===o?tl:o,s=$n(t,["name","classNamePrefix","Component","defaultTheme"]),c=function(e){var t="function"==typeof e;return{create:function(n,a){var r;try{r=t?e(n):e}catch(e){throw e}if(!a||!n.overrides||!n.overrides[a])return r;var o=n.overrides[a],l=qn({},r);return Object.keys(o).forEach((function(e){l[e]=el(l[e],o[e])})),l},options:{}}}(e),u=n||a||"makeStyles";return c.options={index:Xo+=1,name:n,meta:u,classNamePrefix:u},function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Er()||l,a=qn({},i.useContext(Yo),s),o=i.useRef(),u=i.useRef();!function(r,l){var s,m,d=i.useRef([]),f=i.useMemo((function(){return{}}),l);d.current!==f&&(d.current=f,nl(m={name:n,state:{},stylesCreator:c,stylesOptions:a,theme:t},e),u.current=!1,o.current=m,s=function(){!function(e){var t=e.state,n=e.theme,a=e.stylesOptions,r=e.stylesCreator;if(!a.disableGeneration){var o=gr.get(a.sheetsManager,r,n);o.refs-=1;var l=a.sheetsRegistry;0===o.refs&&(gr.delete(a.sheetsManager,r,n),a.jss.removeStyleSheet(o.staticSheet),l&&l.remove(o.staticSheet)),t.dynamicSheet&&(a.jss.removeStyleSheet(t.dynamicSheet),l&&l.remove(t.dynamicSheet))}}(m)}),i.useEffect((function(){return function(){s&&s()}}),[f])}(0,[t,c]),i.useEffect((function(){u.current&&function(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}(o.current,e),u.current=!0}));var m=function(e,t,n){var a=e.state;if(e.stylesOptions.disableGeneration)return t||{};a.cacheClasses||(a.cacheClasses={value:null,lastProp:null,lastJSS:{}});var r=!1;return a.classes!==a.cacheClasses.lastJSS&&(a.cacheClasses.lastJSS=a.classes,r=!0),t!==a.cacheClasses.lastProp&&(a.cacheClasses.lastProp=t,r=!0),r&&(a.cacheClasses.value=br({baseClasses:a.cacheClasses.lastJSS,newClasses:t,Component:n})),a.cacheClasses.value}(o.current,e.classes,r);return m}}function rl(e){var t=e.theme,n=e.name,a=e.props;if(!t||!t.props||!t.props[n])return a;var r,o=t.props[n];for(r in o)void 0===a[r]&&(a[r]=o[r]);return a}var ol=["xs","sm","md","lg","xl"];function ll(e,t,n){return(t=ea(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function il(e,t,n){var a;return qn({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return console.warn(["Material-UI: theme.mixins.gutters() is deprecated.","You can use the source of the mixin directly:","\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join("\n")),qn({paddingLeft:t(2),paddingRight:t(2)},n,ll({},e.up("sm"),qn({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(a={minHeight:56},ll(a,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),ll(a,e.up("sm"),{minHeight:64}),a)},n)}function sl(e){for(var t="https://mui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}const cl={black:"#000",white:"#fff"},ul={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},ml={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},dl={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},fl={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},pl={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},hl={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},bl={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};function vl(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function gl(e){if(e.type)return e;if("#"===e.charAt(0))return gl(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(sl(3,e));var a=e.substring(t+1,e.length-1).split(",");return{type:n,values:a=a.map((function(e){return parseFloat(e)}))}}function yl(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function El(e){var t="hsl"===(e=gl(e)).type?gl(function(e){var t=(e=gl(e)).values,n=t[0],a=t[1]/100,r=t[2]/100,o=a*Math.min(r,1-r),l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return r-o*Math.max(Math.min(t-3,9-t,1),-1)},i="rgb",s=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(i+="a",s.push(t[3])),yl({type:i,values:s})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function xl(e,t){return e=gl(e),t=vl(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,yl(e)}var wl={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:cl.white,default:ul[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Nl={text:{primary:cl.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:ul[800],default:"#303030"},action:{active:cl.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function kl(e,t,n,a){var r=a.light||a,o=a.dark||1.5*a;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=gl(e),t=vl(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return yl(e)}(e.main,r):"dark"===t&&(e.dark=function(e,t){if(e=gl(e),t=vl(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return yl(e)}(e.main,o)))}function Sl(e){return Math.round(1e5*e)/1e5}function Cl(e){return Sl(e)}var _l={textTransform:"uppercase"},Rl='"Roboto", "Helvetica", "Arial", sans-serif';function Pl(e,t){var n="function"==typeof t?t(e):t,a=n.fontFamily,r=void 0===a?Rl:a,o=n.fontSize,l=void 0===o?14:o,i=n.fontWeightLight,s=void 0===i?300:i,c=n.fontWeightRegular,u=void 0===c?400:c,m=n.fontWeightMedium,d=void 0===m?500:m,f=n.fontWeightBold,p=void 0===f?700:f,h=n.htmlFontSize,b=void 0===h?16:h,v=n.allVariants,g=n.pxToRem,y=$n(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),E=l/14,x=g||function(e){return"".concat(e/b*E,"rem")},w=function(e,t,n,a,o){return qn({fontFamily:r,fontWeight:e,fontSize:x(t),lineHeight:n},r===Rl?{letterSpacing:"".concat(Sl(a/t),"em")}:{},o,v)},N={h1:w(s,96,1.167,-1.5),h2:w(s,60,1.2,-.5),h3:w(u,48,1.167,0),h4:w(u,34,1.235,.25),h5:w(u,24,1.334,0),h6:w(d,20,1.6,.15),subtitle1:w(u,16,1.75,.15),subtitle2:w(d,14,1.57,.1),body1:w(u,16,1.5,.15),body2:w(u,14,1.43,.15),button:w(d,14,1.75,.4,_l),caption:w(u,12,1.66,.4),overline:w(u,12,2.66,1,_l)};return el(qn({htmlFontSize:b,pxToRem:x,round:Cl,fontFamily:r,fontSize:l,fontWeightLight:s,fontWeightRegular:u,fontWeightMedium:d,fontWeightBold:p},N),y,{clone:!1})}function Tl(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const Ol=["none",Tl(0,2,1,-1,0,1,1,0,0,1,3,0),Tl(0,3,1,-2,0,2,2,0,0,1,5,0),Tl(0,3,3,-2,0,3,4,0,0,1,8,0),Tl(0,2,4,-1,0,4,5,0,0,1,10,0),Tl(0,3,5,-1,0,5,8,0,0,1,14,0),Tl(0,3,5,-1,0,6,10,0,0,1,18,0),Tl(0,4,5,-2,0,7,10,1,0,2,16,1),Tl(0,5,5,-3,0,8,10,1,0,3,14,2),Tl(0,5,6,-3,0,9,12,1,0,3,16,2),Tl(0,6,6,-3,0,10,14,1,0,4,18,3),Tl(0,6,7,-4,0,11,15,1,0,4,20,3),Tl(0,7,8,-4,0,12,17,2,0,5,22,4),Tl(0,7,8,-4,0,13,19,2,0,5,24,4),Tl(0,7,9,-4,0,14,21,2,0,5,26,4),Tl(0,8,9,-5,0,15,22,2,0,6,28,5),Tl(0,8,10,-5,0,16,24,2,0,6,30,5),Tl(0,8,11,-5,0,17,26,2,0,6,32,5),Tl(0,9,11,-5,0,18,28,2,0,7,34,6),Tl(0,9,12,-6,0,19,29,2,0,7,36,6),Tl(0,10,13,-6,0,20,31,3,0,8,38,7),Tl(0,10,13,-6,0,21,33,3,0,8,40,7),Tl(0,10,14,-6,0,22,35,3,0,8,42,7),Tl(0,11,14,-7,0,23,36,3,0,9,44,8),Tl(0,11,15,-7,0,24,38,3,0,9,46,8)],Il={borderRadius:4};function Dl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,o,l,i=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(a=o.call(n)).done)&&(i.push(a.value),i.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{if(!s&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(c)throw r}}return i}}(e,t)||Gr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Al={xs:0,sm:600,md:960,lg:1280,xl:1920},Fl={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(Al[e],"px)")}};const Ll=function(e,t){return t?el(e,t,{clone:!1}):e};var Bl={m:"margin",p:"padding"},zl={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Ml={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},jl=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=function(e){if(e.length>2){if(!Ml[e])return[e];e=Ml[e]}var t=Dl(e.split(""),2),n=t[0],a=t[1],r=Bl[n],o=zl[a]||"";return Array.isArray(o)?o.map((function(e){return r+e})):[r+o]}(e)),t[e]}}(),Ul=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function ql(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function Wl(e){var t=ql(e.theme);return Object.keys(e).map((function(n){if(-1===Ul.indexOf(n))return null;var a=function(e,t){return function(n){return e.reduce((function(e,a){return e[a]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(jl(n),t),r=e[n];return function(e,t,n){if(Array.isArray(t)){var a=e.theme.breakpoints||Fl;return t.reduce((function(e,r,o){return e[a.up(a.keys[o])]=n(t[o]),e}),{})}if("object"===Zn(t)){var r=e.theme.breakpoints||Fl;return Object.keys(t).reduce((function(e,a){return e[r.up(a)]=n(t[a]),e}),{})}return n(t)}(e,r,a)})).reduce(Ll,{})}Wl.propTypes={},Wl.filterProps=Ul;var $l={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Vl={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Hl(e){return"".concat(Math.round(e),"ms")}const Gl={easing:$l,duration:Vl,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,a=void 0===n?Vl.standard:n,r=t.easing,o=void 0===r?$l.easeInOut:r,l=t.delay,i=void 0===l?0:l;return $n(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof a?a:Hl(a)," ").concat(o," ").concat("string"==typeof i?i:Hl(i))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Kl={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};const Ql=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,a=e.mixins,r=void 0===a?{}:a,o=e.palette,l=void 0===o?{}:o,i=e.spacing,s=e.typography,c=void 0===s?{}:s,u=$n(e,["breakpoints","mixins","palette","spacing","typography"]),m=function(e){var t=e.primary,n=void 0===t?{light:ml[300],main:ml[500],dark:ml[700]}:t,a=e.secondary,r=void 0===a?{light:dl.A200,main:dl.A400,dark:dl.A700}:a,o=e.error,l=void 0===o?{light:fl[300],main:fl[500],dark:fl[700]}:o,i=e.warning,s=void 0===i?{light:pl[300],main:pl[500],dark:pl[700]}:i,c=e.info,u=void 0===c?{light:hl[300],main:hl[500],dark:hl[700]}:c,m=e.success,d=void 0===m?{light:bl[300],main:bl[500],dark:bl[700]}:m,f=e.type,p=void 0===f?"light":f,h=e.contrastThreshold,b=void 0===h?3:h,v=e.tonalOffset,g=void 0===v?.2:v,y=$n(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function E(e){var t=function(e,t){var n=El(e),a=El(t);return(Math.max(n,a)+.05)/(Math.min(n,a)+.05)}(e,Nl.text.primary)>=b?Nl.text.primary:wl.text.primary;return t}var x=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=qn({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(sl(4,t));if("string"!=typeof e.main)throw new Error(sl(5,JSON.stringify(e.main)));return kl(e,"light",n,g),kl(e,"dark",a,g),e.contrastText||(e.contrastText=E(e.main)),e},w={dark:Nl,light:wl};return el(qn({common:cl,type:p,primary:x(n),secondary:x(r,"A400","A200","A700"),error:x(l),warning:x(s),info:x(u),success:x(d),grey:ul,contrastThreshold:b,getContrastText:E,augmentColor:x,tonalOffset:g},w[p]),y)}(l),d=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,a=e.unit,r=void 0===a?"px":a,o=e.step,l=void 0===o?5:o,i=$n(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(r,")")}function c(e,t){var a=ol.indexOf(t);return a===ol.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(r,") and ")+"(max-width:".concat((-1!==a&&"number"==typeof n[ol[a+1]]?n[ol[a+1]]:t)-l/100).concat(r,")")}return qn({keys:ol,values:n,up:s,down:function(e){var t=ol.indexOf(e)+1,a=n[ol[t]];return t===ol.length?s("xs"):"@media (max-width:".concat(("number"==typeof a&&t>0?a:e)-l/100).concat(r,")")},between:c,only:function(e){return c(e,e)},width:function(e){return n[e]}},i)}(n),f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=ql({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),a=0;a<e;a++)n[a]=arguments[a];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}(i),p=el({breakpoints:d,direction:"ltr",mixins:il(d,f,r),overrides:{},palette:m,props:{},shadows:Ol,typography:Pl(m,c),spacing:f,shape:Il,transitions:Gl,zIndex:Kl},u),h=arguments.length,b=new Array(h>1?h-1:0),v=1;v<h;v++)b[v-1]=arguments[v];return b.reduce((function(e,t){return el(e,t)}),p)}(),Jl=function(e,t){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var a=t.defaultTheme,r=t.withTheme,o=void 0!==r&&r,l=t.name,s=$n(t,["defaultTheme","withTheme","name"]),c=l,u=al(e,qn({defaultTheme:a,Component:n,name:l||n.displayName,classNamePrefix:c},s)),m=i.forwardRef((function(e,t){e.classes;var r,s=e.innerRef,c=$n(e,["classes","innerRef"]),m=u(qn({},n.defaultProps,e)),d=c;return("string"==typeof l||o)&&(r=Er()||a,l&&(d=rl({theme:r,name:l,props:c})),o&&!d.theme&&(d.theme=r)),i.createElement(n,qn({ref:s||t,classes:m},d))}));return Jn()(m,n),m}}(e,qn({defaultTheme:Ql},t))};function Yl(e){if("string"!=typeof e)throw new Error(sl(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Xl(e,t){return i.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}var Zl=i.createContext();const ei=Zl;var ti=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.className,o=e.color,l=void 0===o?"primary":o,s=e.component,c=void 0===s?"div":s,u=e.disabled,m=void 0!==u&&u,d=e.error,f=void 0!==d&&d,p=e.fullWidth,h=void 0!==p&&p,b=e.focused,v=e.hiddenLabel,g=void 0!==v&&v,y=e.margin,E=void 0===y?"none":y,x=e.required,w=void 0!==x&&x,N=e.size,k=e.variant,S=void 0===k?"standard":k,C=$n(e,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),_=i.useState((function(){var e=!1;return n&&i.Children.forEach(n,(function(t){if(Xl(t,["Input","Select"])){var n=Xl(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)}})),e})),R=_[0],P=_[1],T=i.useState((function(){var e=!1;return n&&i.Children.forEach(n,(function(t){Xl(t,["Input","Select"])&&Kn(t.props,!0)&&(e=!0)})),e})),O=T[0],I=T[1],D=i.useState(!1),A=D[0],F=D[1],L=void 0!==b?b:A;m&&L&&F(!1);var B=i.useCallback((function(){I(!0)}),[]),z={adornedStart:R,setAdornedStart:P,color:l,disabled:m,error:f,filled:O,focused:L,fullWidth:h,hiddenLabel:g,margin:("small"===N?"dense":void 0)||E,onBlur:function(){F(!1)},onEmpty:i.useCallback((function(){I(!1)}),[]),onFilled:B,onFocus:function(){F(!0)},registerEffect:void 0,required:w,variant:S};return i.createElement(ei.Provider,{value:z},i.createElement(c,qn({className:Hn(a.root,r,"none"!==E&&a["margin".concat(Yl(E))],h&&a.fullWidth),ref:t},C),n))}));const ni=Jl({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(ti);var ai=i.forwardRef((function(e,t){var n=e.classes,a=e.className,r=e.row,o=void 0!==r&&r,l=$n(e,["classes","className","row"]);return i.createElement("div",qn({className:Hn(n.root,a,o&&n.row),ref:t},l))}));const ri=Jl({root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}},{name:"MuiFormGroup"})(ai);var oi=[0,1,2,3,4,5,6,7,8,9,10],li=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function ii(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var si=i.forwardRef((function(e,t){var n=e.alignContent,a=void 0===n?"stretch":n,r=e.alignItems,o=void 0===r?"stretch":r,l=e.classes,s=e.className,c=e.component,u=void 0===c?"div":c,m=e.container,d=void 0!==m&&m,f=e.direction,p=void 0===f?"row":f,h=e.item,b=void 0!==h&&h,v=e.justify,g=e.justifyContent,y=void 0===g?"flex-start":g,E=e.lg,x=void 0!==E&&E,w=e.md,N=void 0!==w&&w,k=e.sm,S=void 0!==k&&k,C=e.spacing,_=void 0===C?0:C,R=e.wrap,P=void 0===R?"wrap":R,T=e.xl,O=void 0!==T&&T,I=e.xs,D=void 0!==I&&I,A=e.zeroMinWidth,F=void 0!==A&&A,L=$n(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","justifyContent","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),B=Hn(l.root,s,d&&[l.container,0!==_&&l["spacing-xs-".concat(String(_))]],b&&l.item,F&&l.zeroMinWidth,"row"!==p&&l["direction-xs-".concat(String(p))],"wrap"!==P&&l["wrap-xs-".concat(String(P))],"stretch"!==o&&l["align-items-xs-".concat(String(o))],"stretch"!==a&&l["align-content-xs-".concat(String(a))],"flex-start"!==(v||y)&&l["justify-content-xs-".concat(String(v||y))],!1!==D&&l["grid-xs-".concat(String(D))],!1!==S&&l["grid-sm-".concat(String(S))],!1!==N&&l["grid-md-".concat(String(N))],!1!==x&&l["grid-lg-".concat(String(x))],!1!==O&&l["grid-xl-".concat(String(O))]);return i.createElement(u,qn({className:B,ref:t},L))})),ci=Jl((function(e){return qn({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-content-xs-center":{justifyContent:"center"},"justify-content-xs-flex-end":{justifyContent:"flex-end"},"justify-content-xs-space-between":{justifyContent:"space-between"},"justify-content-xs-space-around":{justifyContent:"space-around"},"justify-content-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return oi.forEach((function(t){var a=e.spacing(t);0!==a&&(n["spacing-".concat("xs","-").concat(t)]={margin:"-".concat(ii(a,2)),width:"calc(100% + ".concat(ii(a),")"),"& > $item":{padding:ii(a,2)}})})),n}(e),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var a={};li.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var r="".concat(Math.round(e/12*1e8)/1e6,"%");a[t]={flexBasis:r,flexGrow:0,maxWidth:r}}else a[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else a[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?qn(e,a):e[t.breakpoints.up(n)]=a}(t,e,n),t}),{}))}),{name:"MuiGrid"})(si);const ui=ci;function mi(e){var t=e.props,n=e.states,a=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],a&&void 0===t[n]&&(e[n]=a[n]),e}),{})}function di(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function fi(e,t){return i.useMemo((function(){return null==e&&null==t?null:function(n){di(e,n),di(t,n)}}),[e,t])}function pi(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function a(){for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];var l=this;clearTimeout(t),t=setTimeout((function(){e.apply(l,r)}),n)}return a.clear=function(){clearTimeout(t)},a}function hi(e,t){return parseInt(e[t],10)||0}var bi="undefined"!=typeof window?i.useLayoutEffect:i.useEffect,vi={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},gi=i.forwardRef((function(e,t){var n=e.onChange,a=e.rows,r=e.rowsMax,o=e.rowsMin,l=e.maxRows,s=e.minRows,c=void 0===s?1:s,u=e.style,m=e.value,d=$n(e,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),f=l||r,p=a||o||c,h=i.useRef(null!=m).current,b=i.useRef(null),v=fi(t,b),g=i.useRef(null),y=i.useRef(0),E=i.useState({}),x=E[0],w=E[1],N=i.useCallback((function(){var t=b.current,n=window.getComputedStyle(t),a=g.current;a.style.width=n.width,a.value=t.value||e.placeholder||"x","\n"===a.value.slice(-1)&&(a.value+=" ");var r=n["box-sizing"],o=hi(n,"padding-bottom")+hi(n,"padding-top"),l=hi(n,"border-bottom-width")+hi(n,"border-top-width"),i=a.scrollHeight-o;a.value="x";var s=a.scrollHeight-o,c=i;p&&(c=Math.max(Number(p)*s,c)),f&&(c=Math.min(Number(f)*s,c));var u=(c=Math.max(c,s))+("border-box"===r?o+l:0),m=Math.abs(c-i)<=1;w((function(e){return y.current<20&&(u>0&&Math.abs((e.outerHeightStyle||0)-u)>1||e.overflow!==m)?(y.current+=1,{overflow:m,outerHeightStyle:u}):e}))}),[f,p,e.placeholder]);return i.useEffect((function(){var e=pi((function(){y.current=0,N()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[N]),bi((function(){N()})),i.useEffect((function(){y.current=0}),[m]),i.createElement(i.Fragment,null,i.createElement("textarea",qn({value:m,onChange:function(e){y.current=0,h||N(),n&&n(e)},ref:v,rows:p,style:qn({height:x.outerHeightStyle,overflow:x.overflow?"hidden":null},u)},d)),i.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:g,tabIndex:-1,style:qn({},vi,u)}))}));const yi=gi;var Ei="undefined"==typeof window?i.useEffect:i.useLayoutEffect,xi=i.forwardRef((function(e,t){var n=e["aria-describedby"],a=e.autoComplete,r=e.autoFocus,o=e.classes,l=e.className,s=(e.color,e.defaultValue),c=e.disabled,u=e.endAdornment,m=(e.error,e.fullWidth),d=void 0!==m&&m,f=e.id,p=e.inputComponent,h=void 0===p?"input":p,b=e.inputProps,v=void 0===b?{}:b,g=e.inputRef,y=(e.margin,e.multiline),E=void 0!==y&&y,x=e.name,w=e.onBlur,N=e.onChange,k=e.onClick,S=e.onFocus,C=e.onKeyDown,_=e.onKeyUp,R=e.placeholder,P=e.readOnly,T=e.renderSuffix,O=e.rows,I=e.rowsMax,D=e.rowsMin,A=e.maxRows,F=e.minRows,L=e.startAdornment,B=e.type,z=void 0===B?"text":B,M=e.value,j=$n(e,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","maxRows","minRows","startAdornment","type","value"]),U=null!=v.value?v.value:M,q=i.useRef(null!=U).current,W=i.useRef(),$=i.useCallback((function(e){}),[]),V=fi(v.ref,$),H=fi(g,V),G=fi(W,H),K=i.useState(!1),Q=K[0],J=K[1],Y=i.useContext(Zl),X=mi({props:e,muiFormControl:Y,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});X.focused=Y?Y.focused:Q,i.useEffect((function(){!Y&&c&&Q&&(J(!1),w&&w())}),[Y,c,Q,w]);var Z=Y&&Y.onFilled,ee=Y&&Y.onEmpty,te=i.useCallback((function(e){Kn(e)?Z&&Z():ee&&ee()}),[Z,ee]);Ei((function(){q&&te({value:U})}),[U,te,q]),i.useEffect((function(){te(W.current)}),[]);var ne=h,ae=qn({},v,{ref:G});return"string"!=typeof ne?ae=qn({inputRef:G,type:z},ae,{ref:null}):E?!O||A||F||I||D?(ae=qn({minRows:O||F,rowsMax:I,maxRows:A},ae),ne=yi):ne="textarea":ae=qn({type:z},ae),i.useEffect((function(){Y&&Y.setAdornedStart(Boolean(L))}),[Y,L]),i.createElement("div",qn({className:Hn(o.root,o["color".concat(Yl(X.color||"primary"))],l,X.disabled&&o.disabled,X.error&&o.error,d&&o.fullWidth,X.focused&&o.focused,Y&&o.formControl,E&&o.multiline,L&&o.adornedStart,u&&o.adornedEnd,"dense"===X.margin&&o.marginDense),onClick:function(e){W.current&&e.currentTarget===e.target&&W.current.focus(),k&&k(e)},ref:t},j),L,i.createElement(ei.Provider,{value:null},i.createElement(ne,qn({"aria-invalid":X.error,"aria-describedby":n,autoComplete:a,autoFocus:r,defaultValue:s,disabled:X.disabled,id:f,onAnimationStart:function(e){te("mui-auto-fill-cancel"===e.animationName?W.current:{value:"x"})},name:x,placeholder:R,readOnly:P,required:X.required,rows:O,value:U,onKeyDown:C,onKeyUp:_},ae,{className:Hn(o.input,v.className,X.disabled&&o.disabled,E&&o.inputMultiline,X.hiddenLabel&&o.inputHiddenLabel,L&&o.inputAdornedStart,u&&o.inputAdornedEnd,"search"===z&&o.inputTypeSearch,"dense"===X.margin&&o.inputMarginDense),onBlur:function(e){w&&w(e),v.onBlur&&v.onBlur(e),Y&&Y.onBlur?Y.onBlur(e):J(!1)},onChange:function(e){if(!q){var t=e.target||W.current;if(null==t)throw new Error(sl(1));te({value:t.value})}for(var n=arguments.length,a=new Array(n>1?n-1:0),r=1;r<n;r++)a[r-1]=arguments[r];v.onChange&&v.onChange.apply(v,[e].concat(a)),N&&N.apply(void 0,[e].concat(a))},onFocus:function(e){X.disabled?e.stopPropagation():(S&&S(e),v.onFocus&&v.onFocus(e),Y&&Y.onFocus?Y.onFocus(e):J(!0))}}))),u,T?T(qn({},X,{startAdornment:L})):null)}));const wi=Jl((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},a={opacity:"0 !important"},r={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{},"@keyframes mui-auto-fill-cancel":{}},root:qn({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":a,"&::-moz-placeholder":a,"&:-ms-input-placeholder":a,"&::-ms-input-placeholder":a,"&:focus::-webkit-input-placeholder":r,"&:focus::-moz-placeholder":r,"&:focus:-ms-input-placeholder":r,"&:focus::-ms-input-placeholder":r},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(xi);var Ni=i.forwardRef((function(e,t){var n=e.disableUnderline,a=e.classes,r=e.fullWidth,o=void 0!==r&&r,l=e.inputComponent,s=void 0===l?"input":l,c=e.multiline,u=void 0!==c&&c,m=e.type,d=void 0===m?"text":m,f=$n(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.createElement(wi,qn({classes:qn({},a,{root:Hn(a.root,!n&&a.underline),underline:null}),fullWidth:o,inputComponent:s,multiline:u,ref:t,type:d},f))}));Ni.muiName="Input";const ki=Jl((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(t)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},marginDense:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}}),{name:"MuiInput"})(Ni);var Si=i.forwardRef((function(e,t){var n=e.disableUnderline,a=e.classes,r=e.fullWidth,o=void 0!==r&&r,l=e.inputComponent,s=void 0===l?"input":l,c=e.multiline,u=void 0!==c&&c,m=e.type,d=void 0===m?"text":m,f=$n(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.createElement(wi,qn({classes:qn({},a,{root:Hn(a.root,!n&&a.underline),underline:null}),fullWidth:o,inputComponent:s,multiline:u,ref:t,type:d},f))}));Si.muiName="Input";const Ci=Jl((function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",a=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:a,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:a}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiFilledInput"})(Si);function _i(){return Er()||Ql}var Ri=i.forwardRef((function(e,t){e.children;var n=e.classes,a=e.className,r=e.label,o=e.labelWidth,l=e.notched,s=e.style,c=$n(e,["children","classes","className","label","labelWidth","notched","style"]),u="rtl"===_i().direction?"right":"left";if(void 0!==r)return i.createElement("fieldset",qn({"aria-hidden":!0,className:Hn(n.root,a),ref:t,style:s},c),i.createElement("legend",{className:Hn(n.legendLabelled,l&&n.legendNotched)},r?i.createElement("span",null,r):i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})));var m=o>0?.75*o+8:.01;return i.createElement("fieldset",qn({"aria-hidden":!0,style:qn(ll({},"padding".concat(Yl(u)),8),s),className:Hn(n.root,a),ref:t},c),i.createElement("legend",{className:n.legend,style:{width:l?m:.01}},i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}));const Pi=Jl((function(e){return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden"},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})},legendLabelled:{display:"block",width:"auto",textAlign:"left",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),"& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},legendNotched:{maxWidth:1e3,transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}}),{name:"PrivateNotchedOutline"})(Ri);var Ti=i.forwardRef((function(e,t){var n=e.classes,a=e.fullWidth,r=void 0!==a&&a,o=e.inputComponent,l=void 0===o?"input":o,s=e.label,c=e.labelWidth,u=void 0===c?0:c,m=e.multiline,d=void 0!==m&&m,f=e.notched,p=e.type,h=void 0===p?"text":p,b=$n(e,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return i.createElement(wi,qn({renderSuffix:function(e){return i.createElement(Pi,{className:n.notchedOutline,label:s,labelWidth:u,notched:void 0!==f?f:Boolean(e.startAdornment||e.filled||e.focused)})},classes:qn({},n,{root:Hn(n.root,n.underline),notchedOutline:null}),fullWidth:r,inputComponent:l,multiline:d,ref:t,type:h},b))}));Ti.muiName="Input";const Oi=Jl((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:e.shape.borderRadius,"&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:e.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:t},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiOutlinedInput"})(Ti);function Ii(){return i.useContext(ei)}var Di=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.className,o=(e.color,e.component),l=void 0===o?"label":o,s=(e.disabled,e.error,e.filled,e.focused,e.required,$n(e,["children","classes","className","color","component","disabled","error","filled","focused","required"])),c=mi({props:e,muiFormControl:Ii(),states:["color","required","focused","disabled","error","filled"]});return i.createElement(l,qn({className:Hn(a.root,a["color".concat(Yl(c.color||"primary"))],r,c.disabled&&a.disabled,c.error&&a.error,c.filled&&a.filled,c.focused&&a.focused,c.required&&a.required),ref:t},s),n,c.required&&i.createElement("span",{"aria-hidden":!0,className:Hn(a.asterisk,c.error&&a.error)}," ","*"))}));const Ai=Jl((function(e){return{root:qn({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(Di);var Fi=i.forwardRef((function(e,t){var n=e.classes,a=e.className,r=e.disableAnimation,o=void 0!==r&&r,l=(e.margin,e.shrink),s=(e.variant,$n(e,["classes","className","disableAnimation","margin","shrink","variant"])),c=Ii(),u=l;void 0===u&&c&&(u=c.filled||c.focused||c.adornedStart);var m=mi({props:e,muiFormControl:c,states:["margin","variant"]});return i.createElement(Ai,qn({"data-shrink":u,className:Hn(n.root,a,c&&n.formControl,!o&&n.animated,u&&n.shrink,"dense"===m.margin&&n.marginDense,{filled:n.filled,outlined:n.outlined}[m.variant]),classes:{focused:n.focused,disabled:n.disabled,error:n.error,required:n.required,asterisk:n.asterisk},ref:t},s))}));const Li=Jl((function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}}),{name:"MuiInputLabel"})(Fi);var Bi=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.className,o=e.component,l=void 0===o?"p":o,s=(e.disabled,e.error,e.filled,e.focused,e.margin,e.required,e.variant,$n(e,["children","classes","className","component","disabled","error","filled","focused","margin","required","variant"])),c=mi({props:e,muiFormControl:Ii(),states:["variant","margin","disabled","error","filled","focused","required"]});return i.createElement(l,qn({className:Hn(a.root,("filled"===c.variant||"outlined"===c.variant)&&a.contained,r,c.disabled&&a.disabled,c.error&&a.error,c.filled&&a.filled,c.focused&&a.focused,c.required&&a.required,"dense"===c.margin&&a.marginDense),ref:t},s)," "===n?i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):n)}));const zi=Jl((function(e){return{root:qn({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{marginLeft:14,marginRight:14},focused:{},filled:{},required:{}}}),{name:"MuiFormHelperText"})(Bi);function Mi(e){return e&&e.ownerDocument||document}function ji(e){return Mi(e).defaultView||window}function Ui(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,a=new Array(n),r=0;r<n;r++)a[r]=arguments[r];e.apply(this,a),t.apply(this,a)}}),(function(){}))}r(363);var qi="undefined"!=typeof window?i.useLayoutEffect:i.useEffect;const Wi=i.forwardRef((function(e,t){var n=e.children,a=e.container,r=e.disablePortal,o=void 0!==r&&r,l=e.onRendered,s=i.useState(null),c=s[0],m=s[1],d=fi(i.isValidElement(n)?n.ref:null,t);return qi((function(){o||m(function(e){return e="function"==typeof e?e():e,u.findDOMNode(e)}(a)||document.body)}),[a,o]),qi((function(){if(c&&!o)return di(t,c),function(){di(t,null)}}),[t,c,o]),qi((function(){l&&(c||o)&&l()}),[l,c,o]),o?i.isValidElement(n)?i.cloneElement(n,{ref:d}):n:c?u.createPortal(n,c):c}));var $i="undefined"!=typeof window?i.useLayoutEffect:i.useEffect;function Vi(e){var t=i.useRef(e);return $i((function(){t.current=e})),i.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}function Hi(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function Gi(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Ki(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function Qi(e,t,n){var a=arguments.length>4?arguments[4]:void 0,r=[t,n].concat(Kr(arguments.length>3&&void 0!==arguments[3]?arguments[3]:[])),o=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===r.indexOf(e)&&-1===o.indexOf(e.tagName)&&Gi(e,a)}))}function Ji(e,t){var n=-1;return e.some((function(e,a){return!!t(e)&&(n=a,!0)})),n}var Yi=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return na(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Gi(e.modalRef,!1);var a=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);Qi(t,e.mountNode,e.modalRef,a,!0);var r=Ji(this.containers,(function(e){return e.container===t}));return-1!==r?(this.containers[r].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:a}),n)}},{key:"mount",value:function(e,t){var n=Ji(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),a=this.containers[n];a.restore||(a.restore=function(e,t){var n,a=[],r=[],o=e.container;if(!t.disableScrollLock){if(function(e){var t=Mi(e);return t.body===e?ji(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(o)){var l=Hi();a.push({value:o.style.paddingRight,key:"padding-right",el:o}),o.style["padding-right"]="".concat(Ki(o)+l,"px"),n=Mi(o).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){r.push(e.style.paddingRight),e.style.paddingRight="".concat(Ki(e)+l,"px")}))}var i=o.parentElement,s="HTML"===i.nodeName&&"scroll"===window.getComputedStyle(i)["overflow-y"]?i:o;a.push({value:s.style.overflow,key:"overflow",el:s}),s.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){r[t]?e.style.paddingRight=r[t]:e.style.removeProperty("padding-right")})),a.forEach((function(e){var t=e.value,n=e.el,a=e.key;t?n.style.setProperty(a,t):n.style.removeProperty(a)}))}}(a,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=Ji(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),a=this.containers[n];if(a.modals.splice(a.modals.indexOf(e),1),this.modals.splice(t,1),0===a.modals.length)a.restore&&a.restore(),e.modalRef&&Gi(e.modalRef,!0),Qi(a.container,e.mountNode,e.modalRef,a.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var r=a.modals[a.modals.length-1];r.modalRef&&Gi(r.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();const Xi=function(e){var t=e.children,n=e.disableAutoFocus,a=void 0!==n&&n,r=e.disableEnforceFocus,o=void 0!==r&&r,l=e.disableRestoreFocus,s=void 0!==l&&l,c=e.getDoc,m=e.isEnabled,d=e.open,f=i.useRef(),p=i.useRef(null),h=i.useRef(null),b=i.useRef(),v=i.useRef(null),g=i.useCallback((function(e){v.current=u.findDOMNode(e)}),[]),y=fi(t.ref,g),E=i.useRef();return i.useEffect((function(){E.current=d}),[d]),!E.current&&d&&"undefined"!=typeof window&&(b.current=c().activeElement),i.useEffect((function(){if(d){var e=Mi(v.current);a||!v.current||v.current.contains(e.activeElement)||(v.current.hasAttribute("tabIndex")||v.current.setAttribute("tabIndex",-1),v.current.focus());var t=function(){null!==v.current&&(e.hasFocus()&&!o&&m()&&!f.current?v.current&&!v.current.contains(e.activeElement)&&v.current.focus():f.current=!1)},n=function(t){!o&&m()&&9===t.keyCode&&e.activeElement===v.current&&(f.current=!0,t.shiftKey?h.current.focus():p.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var r=setInterval((function(){t()}),50);return function(){clearInterval(r),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),s||(b.current&&b.current.focus&&b.current.focus(),b.current=null)}}}),[a,o,s,m,d]),i.createElement(i.Fragment,null,i.createElement("div",{tabIndex:0,ref:p,"data-test":"sentinelStart"}),i.cloneElement(t,{ref:y}),i.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelEnd"}))};var Zi={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}};const es=i.forwardRef((function(e,t){var n=e.invisible,a=void 0!==n&&n,r=e.open,o=$n(e,["invisible","open"]);return r?i.createElement("div",qn({"aria-hidden":!0,ref:t},o,{style:qn({},Zi.root,a?Zi.invisible:{},o.style)})):null}));var ts=new Yi;const ns=i.forwardRef((function(e,t){var n=Er(),a=rl({name:"MuiModal",props:qn({},e),theme:n}),r=a.BackdropComponent,o=void 0===r?es:r,l=a.BackdropProps,s=a.children,c=a.closeAfterTransition,m=void 0!==c&&c,d=a.container,f=a.disableAutoFocus,p=void 0!==f&&f,h=a.disableBackdropClick,b=void 0!==h&&h,v=a.disableEnforceFocus,g=void 0!==v&&v,y=a.disableEscapeKeyDown,E=void 0!==y&&y,x=a.disablePortal,w=void 0!==x&&x,N=a.disableRestoreFocus,k=void 0!==N&&N,S=a.disableScrollLock,C=void 0!==S&&S,_=a.hideBackdrop,R=void 0!==_&&_,P=a.keepMounted,T=void 0!==P&&P,O=a.manager,I=void 0===O?ts:O,D=a.onBackdropClick,A=a.onClose,F=a.onEscapeKeyDown,L=a.onRendered,B=a.open,z=$n(a,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),M=i.useState(!0),j=M[0],U=M[1],q=i.useRef({}),W=i.useRef(null),$=i.useRef(null),V=fi($,t),H=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(a),G=function(){return Mi(W.current)},K=function(){return q.current.modalRef=$.current,q.current.mountNode=W.current,q.current},Q=function(){I.mount(K(),{disableScrollLock:C}),$.current.scrollTop=0},J=Vi((function(){var e=function(e){return e="function"==typeof e?e():e,u.findDOMNode(e)}(d)||G().body;I.add(K(),e),$.current&&Q()})),Y=i.useCallback((function(){return I.isTopModal(K())}),[I]),X=Vi((function(e){W.current=e,e&&(L&&L(),B&&Y()?Q():Gi($.current,!0))})),Z=i.useCallback((function(){I.remove(K())}),[I]);if(i.useEffect((function(){return function(){Z()}}),[Z]),i.useEffect((function(){B?J():H&&m||Z()}),[B,Z,H,m,J]),!T&&!B&&(!H||j))return null;var ee=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(n||{zIndex:Kl}),te={};return void 0===s.props.tabIndex&&(te.tabIndex=s.props.tabIndex||"-1"),H&&(te.onEnter=Ui((function(){U(!1)}),s.props.onEnter),te.onExited=Ui((function(){U(!0),m&&Z()}),s.props.onExited)),i.createElement(Wi,{ref:X,container:d,disablePortal:w},i.createElement("div",qn({ref:V,onKeyDown:function(e){"Escape"===e.key&&Y()&&(F&&F(e),E||(e.stopPropagation(),A&&A(e,"escapeKeyDown")))},role:"presentation"},z,{style:qn({},ee.root,!B&&j?ee.hidden:{},z.style)}),R?null:i.createElement(o,qn({open:B,onClick:function(e){e.target===e.currentTarget&&(D&&D(e),!b&&A&&A(e,"backdropClick"))}},l)),i.createElement(Xi,{disableEnforceFocus:g,disableAutoFocus:p,disableRestoreFocus:k,getDoc:G,isEnabled:Y,open:B},i.cloneElement(s,te))))})),as=i.createContext(null);var rs="unmounted",os="exited",ls="entering",is="entered",ss="exiting",cs=function(e){function t(t,n){var a;a=e.call(this,t,n)||this;var r,o=n&&!n.isMounting?t.enter:t.appear;return a.appearStatus=null,t.in?o?(r=os,a.appearStatus=ls):r=is:r=t.unmountOnExit||t.mountOnEnter?rs:os,a.state={status:r},a.nextCallback=null,a}ra(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===rs?{status:os}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==ls&&n!==is&&(t=ls):n!==ls&&n!==is||(t=ss)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,a=this.props.timeout;return e=t=n=a,null!=a&&"number"!=typeof a&&(e=a.exit,t=a.enter,n=void 0!==a.appear?a.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===ls){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:u.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===os&&this.setState({status:rs})},n.performEnter=function(e){var t=this,n=this.props.enter,a=this.context?this.context.isMounting:e,r=this.props.nodeRef?[a]:[u.findDOMNode(this),a],o=r[0],l=r[1],i=this.getTimeouts(),s=a?i.appear:i.enter;e||n?(this.props.onEnter(o,l),this.safeSetState({status:ls},(function(){t.props.onEntering(o,l),t.onTransitionEnd(s,(function(){t.safeSetState({status:is},(function(){t.props.onEntered(o,l)}))}))}))):this.safeSetState({status:is},(function(){t.props.onEntered(o)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),a=this.props.nodeRef?void 0:u.findDOMNode(this);t?(this.props.onExit(a),this.safeSetState({status:ss},(function(){e.props.onExiting(a),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:os},(function(){e.props.onExited(a)}))}))}))):this.safeSetState({status:os},(function(){e.props.onExited(a)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(a){n&&(n=!1,t.nextCallback=null,e(a))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:u.findDOMNode(this),a=null==e&&!this.props.addEndListener;if(n&&!a){if(this.props.addEndListener){var r=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=r[0],l=r[1];this.props.addEndListener(o,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===rs)return null;var t=this.props,n=t.children,a=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Wn(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.createElement(as.Provider,{value:null},"function"==typeof n?n(e,a):i.cloneElement(i.Children.only(n),a))},t}(i.Component);function us(){}cs.contextType=as,cs.propTypes={},cs.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:us,onEntering:us,onEntered:us,onExit:us,onExiting:us,onExited:us},cs.UNMOUNTED=rs,cs.EXITED=os,cs.ENTERING=ls,cs.ENTERED=is,cs.EXITING=ss;const ms=cs;function ds(e,t){var n=e.timeout,a=e.style,r=void 0===a?{}:a;return{duration:r.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:r.transitionDelay}}function fs(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var ps={entering:{opacity:1,transform:fs(1)},entered:{opacity:1,transform:"none"}},hs=i.forwardRef((function(e,t){var n=e.children,a=e.disableStrictModeCompat,r=void 0!==a&&a,o=e.in,l=e.onEnter,s=e.onEntered,c=e.onEntering,u=e.onExit,m=e.onExited,d=e.onExiting,f=e.style,p=e.timeout,h=void 0===p?"auto":p,b=e.TransitionComponent,v=void 0===b?ms:b,g=$n(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),y=i.useRef(),E=i.useRef(),x=_i(),w=x.unstable_strictMode&&!r,N=i.useRef(null),k=fi(n.ref,t),S=fi(w?N:void 0,k),C=function(e){return function(t,n){if(e){var a=Dl(w?[N.current,t]:[t,n],2),r=a[0],o=a[1];void 0===o?e(r):e(r,o)}}},_=C(c),R=C((function(e,t){!function(e){e.scrollTop}(e);var n,a=ds({style:f,timeout:h},{mode:"enter"}),r=a.duration,o=a.delay;"auto"===h?(n=x.transitions.getAutoHeightDuration(e.clientHeight),E.current=n):n=r,e.style.transition=[x.transitions.create("opacity",{duration:n,delay:o}),x.transitions.create("transform",{duration:.666*n,delay:o})].join(","),l&&l(e,t)})),P=C(s),T=C(d),O=C((function(e){var t,n=ds({style:f,timeout:h},{mode:"exit"}),a=n.duration,r=n.delay;"auto"===h?(t=x.transitions.getAutoHeightDuration(e.clientHeight),E.current=t):t=a,e.style.transition=[x.transitions.create("opacity",{duration:t,delay:r}),x.transitions.create("transform",{duration:.666*t,delay:r||.333*t})].join(","),e.style.opacity="0",e.style.transform=fs(.75),u&&u(e)})),I=C(m);return i.useEffect((function(){return function(){clearTimeout(y.current)}}),[]),i.createElement(v,qn({appear:!0,in:o,nodeRef:w?N:void 0,onEnter:R,onEntered:P,onEntering:_,onExit:O,onExited:I,onExiting:T,addEndListener:function(e,t){var n=w?e:t;"auto"===h&&(y.current=setTimeout(n,E.current||0))},timeout:"auto"===h?null:h},g),(function(e,t){return i.cloneElement(n,qn({style:qn({opacity:0,transform:fs(.75),visibility:"exited"!==e||o?void 0:"hidden"},ps[e],f,n.props.style),ref:S},t))}))}));hs.muiSupportAuto=!0;const bs=hs;var vs=i.forwardRef((function(e,t){var n=e.classes,a=e.className,r=e.component,o=void 0===r?"div":r,l=e.square,s=void 0!==l&&l,c=e.elevation,u=void 0===c?1:c,m=e.variant,d=void 0===m?"elevation":m,f=$n(e,["classes","className","component","square","elevation","variant"]);return i.createElement(o,qn({className:Hn(n.root,a,"outlined"===d?n.outlined:n["elevation".concat(u)],!s&&n.rounded),ref:t},f))}));const gs=Jl((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),qn({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(vs);function ys(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Es(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function xs(e){return[e.horizontal,e.vertical].map((function(e){return"number"==typeof e?"".concat(e,"px"):e})).join(" ")}function ws(e){return"function"==typeof e?e():e}var Ns=i.forwardRef((function(e,t){var n=e.action,a=e.anchorEl,r=e.anchorOrigin,o=void 0===r?{vertical:"top",horizontal:"left"}:r,l=e.anchorPosition,s=e.anchorReference,c=void 0===s?"anchorEl":s,m=e.children,d=e.classes,f=e.className,p=e.container,h=e.elevation,b=void 0===h?8:h,v=e.getContentAnchorEl,g=e.marginThreshold,y=void 0===g?16:g,E=e.onEnter,x=e.onEntered,w=e.onEntering,N=e.onExit,k=e.onExited,S=e.onExiting,C=e.open,_=e.PaperProps,R=void 0===_?{}:_,P=e.transformOrigin,T=void 0===P?{vertical:"top",horizontal:"left"}:P,O=e.TransitionComponent,I=void 0===O?bs:O,D=e.transitionDuration,A=void 0===D?"auto":D,F=e.TransitionProps,L=void 0===F?{}:F,B=$n(e,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","className","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),z=i.useRef(),M=i.useCallback((function(e){if("anchorPosition"===c)return l;var t=ws(a),n=(t&&1===t.nodeType?t:Mi(z.current).body).getBoundingClientRect(),r=0===e?o.vertical:"center";return{top:n.top+ys(n,r),left:n.left+Es(n,o.horizontal)}}),[a,o.horizontal,o.vertical,l,c]),j=i.useCallback((function(e){var t=0;if(v&&"anchorEl"===c){var n=v(e);if(n&&e.contains(n)){var a=function(e,t){for(var n=t,a=0;n&&n!==e;)a+=(n=n.parentElement).scrollTop;return a}(e,n);t=n.offsetTop+n.clientHeight/2-a||0}}return t}),[o.vertical,c,v]),U=i.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:ys(e,T.vertical)+t,horizontal:Es(e,T.horizontal)}}),[T.horizontal,T.vertical]),q=i.useCallback((function(e){var t=j(e),n={width:e.offsetWidth,height:e.offsetHeight},r=U(n,t);if("none"===c)return{top:null,left:null,transformOrigin:xs(r)};var o=M(t),l=o.top-r.vertical,i=o.left-r.horizontal,s=l+n.height,u=i+n.width,m=ji(ws(a)),d=m.innerHeight-y,f=m.innerWidth-y;if(l<y){var p=l-y;l-=p,r.vertical+=p}else if(s>d){var h=s-d;l-=h,r.vertical+=h}if(i<y){var b=i-y;i-=b,r.horizontal+=b}else if(u>f){var v=u-f;i-=v,r.horizontal+=v}return{top:"".concat(Math.round(l),"px"),left:"".concat(Math.round(i),"px"),transformOrigin:xs(r)}}),[a,c,M,j,U,y]),W=i.useCallback((function(){var e=z.current;if(e){var t=q(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}}),[q]),$=i.useCallback((function(e){z.current=u.findDOMNode(e)}),[]);i.useEffect((function(){C&&W()})),i.useImperativeHandle(n,(function(){return C?{updatePosition:function(){W()}}:null}),[C,W]),i.useEffect((function(){if(C){var e=pi((function(){W()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[C,W]);var V=A;"auto"!==A||I.muiSupportAuto||(V=void 0);var H=p||(a?Mi(ws(a)).body:void 0);return i.createElement(ns,qn({container:H,open:C,ref:t,BackdropProps:{invisible:!0},className:Hn(d.root,f)},B),i.createElement(I,qn({appear:!0,in:C,onEnter:E,onEntered:x,onExit:N,onExited:k,onExiting:S,timeout:V},L,{onEntering:Ui((function(e,t){w&&w(e,t),W()}),L.onEntering)}),i.createElement(gs,qn({elevation:b,ref:$},R,{className:Hn(d.paper,R.className)}),m)))}));const ks=Jl({root:{},paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}},{name:"MuiPopover"})(Ns),Ss=i.createContext({});var Cs=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.className,o=e.component,l=void 0===o?"ul":o,s=e.dense,c=void 0!==s&&s,u=e.disablePadding,m=void 0!==u&&u,d=e.subheader,f=$n(e,["children","classes","className","component","dense","disablePadding","subheader"]),p=i.useMemo((function(){return{dense:c}}),[c]);return i.createElement(Ss.Provider,{value:p},i.createElement(l,qn({className:Hn(a.root,r,c&&a.dense,!m&&a.padding,d&&a.subheader),ref:t},f),d,n))}));const _s=Jl({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(Cs);function Rs(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ps(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Ts(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function Os(e,t,n,a,r,o){for(var l=!1,i=r(e,t,!!t&&n);i;){if(i===e.firstChild){if(l)return;l=!0}var s=!a&&(i.disabled||"true"===i.getAttribute("aria-disabled"));if(i.hasAttribute("tabindex")&&Ts(i,o)&&!s)return void i.focus();i=r(e,i,n)}}var Is="undefined"==typeof window?i.useEffect:i.useLayoutEffect,Ds=i.forwardRef((function(e,t){var n=e.actions,a=e.autoFocus,r=void 0!==a&&a,o=e.autoFocusItem,l=void 0!==o&&o,s=e.children,c=e.className,m=e.disabledItemsFocusable,d=void 0!==m&&m,f=e.disableListWrap,p=void 0!==f&&f,h=e.onKeyDown,b=e.variant,v=void 0===b?"selectedMenu":b,g=$n(e,["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"]),y=i.useRef(null),E=i.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Is((function(){r&&y.current.focus()}),[r]),i.useImperativeHandle(n,(function(){return{adjustStyleForScrollbar:function(e,t){var n=!y.current.style.width;if(e.clientHeight<y.current.clientHeight&&n){var a="".concat(Hi(),"px");y.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=a,y.current.style.width="calc(100% + ".concat(a,")")}return y.current}}}),[]);var x=fi(i.useCallback((function(e){y.current=u.findDOMNode(e)}),[]),t),w=-1;i.Children.forEach(s,(function(e,t){i.isValidElement(e)&&(e.props.disabled||("selectedMenu"===v&&e.props.selected||-1===w)&&(w=t))}));var N=i.Children.map(s,(function(e,t){if(t===w){var n={};return l&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===v&&(n.tabIndex=0),i.cloneElement(e,n)}return e}));return i.createElement(_s,qn({role:"menu",ref:x,className:c,onKeyDown:function(e){var t=y.current,n=e.key,a=Mi(t).activeElement;if("ArrowDown"===n)e.preventDefault(),Os(t,a,p,d,Rs);else if("ArrowUp"===n)e.preventDefault(),Os(t,a,p,d,Ps);else if("Home"===n)e.preventDefault(),Os(t,null,p,d,Rs);else if("End"===n)e.preventDefault(),Os(t,null,p,d,Ps);else if(1===n.length){var r=E.current,o=n.toLowerCase(),l=performance.now();r.keys.length>0&&(l-r.lastTime>500?(r.keys=[],r.repeating=!0,r.previousKeyMatched=!0):r.repeating&&o!==r.keys[0]&&(r.repeating=!1)),r.lastTime=l,r.keys.push(o);var i=a&&!r.repeating&&Ts(a,r);r.previousKeyMatched&&(i||Os(t,a,!1,d,Rs,r))?e.preventDefault():r.previousKeyMatched=!1}h&&h(e)},tabIndex:r?0:-1},g),N)}));const As=Ds;var Fs={vertical:"top",horizontal:"right"},Ls={vertical:"top",horizontal:"left"},Bs=i.forwardRef((function(e,t){var n=e.autoFocus,a=void 0===n||n,r=e.children,o=e.classes,l=e.disableAutoFocusItem,s=void 0!==l&&l,c=e.MenuListProps,m=void 0===c?{}:c,d=e.onClose,f=e.onEntering,p=e.open,h=e.PaperProps,b=void 0===h?{}:h,v=e.PopoverClasses,g=e.transitionDuration,y=void 0===g?"auto":g,E=e.TransitionProps,x=(E=void 0===E?{}:E).onEntering,w=$n(E,["onEntering"]),N=e.variant,k=void 0===N?"selectedMenu":N,S=$n(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"]),C=_i(),_=a&&!s&&p,R=i.useRef(null),P=i.useRef(null),T=-1;i.Children.map(r,(function(e,t){i.isValidElement(e)&&(e.props.disabled||("menu"!==k&&e.props.selected||-1===T)&&(T=t))}));var O=i.Children.map(r,(function(e,t){return t===T?i.cloneElement(e,{ref:function(t){P.current=u.findDOMNode(t),di(e.ref,t)}}):e}));return i.createElement(ks,qn({getContentAnchorEl:function(){return P.current},classes:v,onClose:d,TransitionProps:qn({onEntering:function(e,t){R.current&&R.current.adjustStyleForScrollbar(e,C),f&&f(e,t),x&&x(e,t)}},w),anchorOrigin:"rtl"===C.direction?Fs:Ls,transformOrigin:"rtl"===C.direction?Fs:Ls,PaperProps:qn({},b,{classes:qn({},b.classes,{root:o.paper})}),open:p,ref:t,transitionDuration:y},S),i.createElement(As,qn({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),d&&d(e,"tabKeyDown"))},actions:R,autoFocus:a&&(-1===T||s),autoFocusItem:_,variant:k},m,{className:Hn(o.list,m.className)}),O))}));const zs=Jl({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},{name:"MuiMenu"})(Bs);function Ms(e){var t=e.controlled,n=e.default,a=(e.name,e.state,i.useRef(void 0!==t).current),r=i.useState(n),o=r[0],l=r[1];return[a?t:o,i.useCallback((function(e){a||l(e)}),[])]}function js(e,t){return"object"===Zn(t)&&null!==t?e===t:String(e)===String(t)}const Us=i.forwardRef((function(e,t){var n=e["aria-label"],a=e.autoFocus,r=e.autoWidth,o=e.children,l=e.classes,s=e.className,c=e.defaultValue,u=e.disabled,m=e.displayEmpty,d=e.IconComponent,f=e.inputRef,p=e.labelId,h=e.MenuProps,b=void 0===h?{}:h,v=e.multiple,g=e.name,y=e.onBlur,E=e.onChange,x=e.onClose,w=e.onFocus,N=e.onOpen,k=e.open,S=e.readOnly,C=e.renderValue,_=e.SelectDisplayProps,R=void 0===_?{}:_,P=e.tabIndex,T=(e.type,e.value),O=e.variant,I=void 0===O?"standard":O,D=$n(e,["aria-label","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"]),A=Dl(Ms({controlled:T,default:c,name:"Select"}),2),F=A[0],L=A[1],B=i.useRef(null),z=i.useState(null),M=z[0],j=z[1],U=i.useRef(null!=k).current,q=i.useState(),W=q[0],$=q[1],V=i.useState(!1),H=V[0],G=V[1],K=fi(t,f);i.useImperativeHandle(K,(function(){return{focus:function(){M.focus()},node:B.current,value:F}}),[M,F]),i.useEffect((function(){a&&M&&M.focus()}),[a,M]),i.useEffect((function(){if(M){var e=Mi(M).getElementById(p);if(e){var t=function(){getSelection().isCollapsed&&M.focus()};return e.addEventListener("click",t),function(){e.removeEventListener("click",t)}}}}),[p,M]);var Q,J,Y=function(e,t){e?N&&N(t):x&&x(t),U||($(r?null:M.clientWidth),G(e))},X=i.Children.toArray(o),Z=function(e){return function(t){var n;if(v||Y(!1,t),v){n=Array.isArray(F)?F.slice():[];var a=F.indexOf(e.props.value);-1===a?n.push(e.props.value):n.splice(a,1)}else n=e.props.value;e.props.onClick&&e.props.onClick(t),F!==n&&(L(n),E&&(t.persist(),Object.defineProperty(t,"target",{writable:!0,value:{value:n,name:g}}),E(t,e)))}},ee=null!==M&&(U?k:H);delete D["aria-invalid"];var te=[],ne=!1;(Kn({value:F})||m)&&(C?Q=C(F):ne=!0);var ae=X.map((function(e){if(!i.isValidElement(e))return null;var t;if(v){if(!Array.isArray(F))throw new Error(sl(2));(t=F.some((function(t){return js(t,e.props.value)})))&&ne&&te.push(e.props.children)}else(t=js(F,e.props.value))&&ne&&(J=e.props.children);return i.cloneElement(e,{"aria-selected":t?"true":void 0,onClick:Z(e),onKeyUp:function(t){" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));ne&&(Q=v?te.join(", "):J);var re,oe=W;!r&&U&&M&&(oe=M.clientWidth),re=void 0!==P?P:u?null:0;var le=R.id||(g?"mui-component-select-".concat(g):void 0);return i.createElement(i.Fragment,null,i.createElement("div",qn({className:Hn(l.root,l.select,l.selectMenu,l[I],s,u&&l.disabled),ref:j,tabIndex:re,role:"button","aria-disabled":u?"true":void 0,"aria-expanded":ee?"true":void 0,"aria-haspopup":"listbox","aria-label":n,"aria-labelledby":[p,le].filter(Boolean).join(" ")||void 0,onKeyDown:function(e){S||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),Y(!0,e))},onMouseDown:u||S?null:function(e){0===e.button&&(e.preventDefault(),M.focus(),Y(!0,e))},onBlur:function(e){!ee&&y&&(e.persist(),Object.defineProperty(e,"target",{writable:!0,value:{value:F,name:g}}),y(e))},onFocus:w},R,{id:le}),function(e){return null==e||"string"==typeof e&&!e.trim()}(Q)?i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):Q),i.createElement("input",qn({value:Array.isArray(F)?F.join(","):F,name:g,ref:B,"aria-hidden":!0,onChange:function(e){var t=X.map((function(e){return e.props.value})).indexOf(e.target.value);if(-1!==t){var n=X[t];L(n.props.value),E&&E(e,n)}},tabIndex:-1,className:l.nativeInput,autoFocus:a},D)),i.createElement(d,{className:Hn(l.icon,l["icon".concat(Yl(I))],ee&&l.iconOpen,u&&l.disabled)}),i.createElement(zs,qn({id:"menu-".concat(g||""),anchorEl:M,open:ee,onClose:function(e){Y(!1,e)}},b,{MenuListProps:qn({"aria-labelledby":p,role:"listbox",disableListWrap:!0},b.MenuListProps),PaperProps:qn({},b.PaperProps,{style:qn({minWidth:oe},null!=b.PaperProps?b.PaperProps.style:null)})}),ae))}));var qs=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.className,o=e.color,l=void 0===o?"inherit":o,s=e.component,c=void 0===s?"svg":s,u=e.fontSize,m=void 0===u?"medium":u,d=e.htmlColor,f=e.titleAccess,p=e.viewBox,h=void 0===p?"0 0 24 24":p,b=$n(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return i.createElement(c,qn({className:Hn(a.root,r,"inherit"!==l&&a["color".concat(Yl(l))],"default"!==m&&"medium"!==m&&a["fontSize".concat(Yl(m))]),focusable:"false",viewBox:h,color:d,"aria-hidden":!f||void 0,role:f?"img":void 0,ref:t},b),n,f?i.createElement("title",null,f):null)}));qs.muiName="SvgIcon";const Ws=Jl((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(qs);function $s(e,t){var n=function(t,n){return i.createElement(Ws,qn({ref:n},t),e)};return n.muiName=Ws.muiName,i.memo(i.forwardRef(n))}const Vs=$s(i.createElement("path",{d:"M7 10l5 5 5-5z"})),Hs=i.forwardRef((function(e,t){var n=e.classes,a=e.className,r=e.disabled,o=e.IconComponent,l=e.inputRef,s=e.variant,c=void 0===s?"standard":s,u=$n(e,["classes","className","disabled","IconComponent","inputRef","variant"]);return i.createElement(i.Fragment,null,i.createElement("select",qn({className:Hn(n.root,n.select,n[c],a,r&&n.disabled),disabled:r,ref:l||t},u)),e.multiple?null:i.createElement(o,{className:Hn(n.icon,n["icon".concat(Yl(c))],r&&n.disabled)}))}));var Gs=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper},"&&":{paddingRight:24}},filled:{"&&":{paddingRight:32}},outlined:{borderRadius:e.shape.borderRadius,"&&":{paddingRight:32}},selectMenu:{height:"auto",minHeight:"1.1876em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",pointerEvents:"none",color:e.palette.action.active,"&$disabled":{color:e.palette.action.disabled}},iconOpen:{transform:"rotate(180deg)"},iconFilled:{right:7},iconOutlined:{right:7},nativeInput:{bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%"}}},Ks=i.createElement(ki,null),Qs=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.IconComponent,o=void 0===r?Vs:r,l=e.input,s=void 0===l?Ks:l,c=e.inputProps,u=(e.variant,$n(e,["children","classes","IconComponent","input","inputProps","variant"])),m=mi({props:e,muiFormControl:Ii(),states:["variant"]});return i.cloneElement(s,qn({inputComponent:Hs,inputProps:qn({children:n,classes:a,IconComponent:o,variant:m.variant,type:void 0},c,s?s.props.inputProps:{}),ref:t},u))}));Qs.muiName="Select",Jl(Gs,{name:"MuiNativeSelect"})(Qs);var Js=Gs,Ys=i.createElement(ki,null),Xs=i.createElement(Ci,null),Zs=i.forwardRef((function e(t,n){var a=t.autoWidth,r=void 0!==a&&a,o=t.children,l=t.classes,s=t.displayEmpty,c=void 0!==s&&s,u=t.IconComponent,m=void 0===u?Vs:u,d=t.id,f=t.input,p=t.inputProps,h=t.label,b=t.labelId,v=t.labelWidth,g=void 0===v?0:v,y=t.MenuProps,E=t.multiple,x=void 0!==E&&E,w=t.native,N=void 0!==w&&w,k=t.onClose,S=t.onOpen,C=t.open,_=t.renderValue,R=t.SelectDisplayProps,P=t.variant,T=void 0===P?"standard":P,O=$n(t,["autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"]),I=N?Hs:Us,D=mi({props:t,muiFormControl:Ii(),states:["variant"]}).variant||T,A=f||{standard:Ys,outlined:i.createElement(Oi,{label:h,labelWidth:g}),filled:Xs}[D];return i.cloneElement(A,qn({inputComponent:I,inputProps:qn({children:o,IconComponent:m,variant:D,type:void 0,multiple:x},N?{id:d}:{autoWidth:r,displayEmpty:c,labelId:b,MenuProps:y,onClose:k,onOpen:S,open:C,renderValue:_,SelectDisplayProps:qn({id:d},R)},p,{classes:p?br({baseClasses:l,newClasses:p.classes,Component:e}):l},f?f.props.inputProps:{}),ref:n},O))}));Zs.muiName="Select";const ec=Jl(Js,{name:"MuiSelect"})(Zs);var tc={standard:ki,filled:Ci,outlined:Oi},nc=i.forwardRef((function(e,t){var n=e.autoComplete,a=e.autoFocus,r=void 0!==a&&a,o=e.children,l=e.classes,s=e.className,c=e.color,u=void 0===c?"primary":c,m=e.defaultValue,d=e.disabled,f=void 0!==d&&d,p=e.error,h=void 0!==p&&p,b=e.FormHelperTextProps,v=e.fullWidth,g=void 0!==v&&v,y=e.helperText,E=e.hiddenLabel,x=e.id,w=e.InputLabelProps,N=e.inputProps,k=e.InputProps,S=e.inputRef,C=e.label,_=e.multiline,R=void 0!==_&&_,P=e.name,T=e.onBlur,O=e.onChange,I=e.onFocus,D=e.placeholder,A=e.required,F=void 0!==A&&A,L=e.rows,B=e.rowsMax,z=e.maxRows,M=e.minRows,j=e.select,U=void 0!==j&&j,q=e.SelectProps,W=e.type,$=e.value,V=e.variant,H=void 0===V?"standard":V,G=$n(e,["autoComplete","autoFocus","children","classes","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","maxRows","minRows","select","SelectProps","type","value","variant"]),K={};if("outlined"===H&&(w&&void 0!==w.shrink&&(K.notched=w.shrink),C)){var Q,J=null!==(Q=null==w?void 0:w.required)&&void 0!==Q?Q:F;K.label=i.createElement(i.Fragment,null,C,J&&" *")}U&&(q&&q.native||(K.id=void 0),K["aria-describedby"]=void 0);var Y=y&&x?"".concat(x,"-helper-text"):void 0,X=C&&x?"".concat(x,"-label"):void 0,Z=tc[H],ee=i.createElement(Z,qn({"aria-describedby":Y,autoComplete:n,autoFocus:r,defaultValue:m,fullWidth:g,multiline:R,name:P,rows:L,rowsMax:B,maxRows:z,minRows:M,type:W,value:$,id:x,inputRef:S,onBlur:T,onChange:O,onFocus:I,placeholder:D,inputProps:N},K,k));return i.createElement(ni,qn({className:Hn(l.root,s),disabled:f,error:h,fullWidth:g,hiddenLabel:E,ref:t,required:F,color:u,variant:H},G),C&&i.createElement(Li,qn({htmlFor:x,id:X},w),C),U?i.createElement(ec,qn({"aria-describedby":Y,id:x,labelId:X,value:$,input:ee},q),o):ee,y&&i.createElement(zi,qn({id:Y},b),y))}));const ac=Jl({root:{}},{name:"MuiTextField"})(nc),rc=i.createContext(),oc=i.forwardRef((function(e,t){var n=e.actions,a=e.children,r=e.name,o=e.value,l=e.onChange,s=$n(e,["actions","children","name","value","onChange"]),c=i.useRef(null),u=Dl(Ms({controlled:o,default:e.defaultValue,name:"RadioGroup"}),2),m=u[0],d=u[1];i.useImperativeHandle(n,(function(){return{focus:function(){var e=c.current.querySelector("input:not(:disabled):checked");e||(e=c.current.querySelector("input:not(:disabled)")),e&&e.focus()}}}),[]);var f,p,h,b,v,g=fi(t,c),y=(f=r,p=i.useState(f),h=p[0],b=p[1],v=f||h,i.useEffect((function(){null==h&&b("mui-".concat(Math.round(1e5*Math.random())))}),[h]),v);return i.createElement(rc.Provider,{value:{name:y,onChange:function(e){d(e.target.value),l&&l(e,e.target.value)},value:m}},i.createElement(ri,qn({role:"radiogroup",ref:g},s),a))}));var lc={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},ic=i.forwardRef((function(e,t){var n=e.align,a=void 0===n?"inherit":n,r=e.classes,o=e.className,l=e.color,s=void 0===l?"initial":l,c=e.component,u=e.display,m=void 0===u?"initial":u,d=e.gutterBottom,f=void 0!==d&&d,p=e.noWrap,h=void 0!==p&&p,b=e.paragraph,v=void 0!==b&&b,g=e.variant,y=void 0===g?"body1":g,E=e.variantMapping,x=void 0===E?lc:E,w=$n(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),N=c||(v?"p":x[y]||lc[y])||"span";return i.createElement(N,qn({className:Hn(r.root,o,"inherit"!==y&&r[y],"initial"!==s&&r["color".concat(Yl(s))],h&&r.noWrap,f&&r.gutterBottom,v&&r.paragraph,"inherit"!==a&&r["align".concat(Yl(a))],"initial"!==m&&r["display".concat(Yl(m))]),ref:t},w))}));const sc=Jl((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(ic);var cc=i.forwardRef((function(e,t){e.checked;var n=e.classes,a=e.className,r=e.control,o=e.disabled,l=(e.inputRef,e.label),s=e.labelPlacement,c=void 0===s?"end":s,u=(e.name,e.onChange,e.value,$n(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),m=Ii(),d=o;void 0===d&&void 0!==r.props.disabled&&(d=r.props.disabled),void 0===d&&m&&(d=m.disabled);var f={disabled:d};return["checked","name","onChange","value","inputRef"].forEach((function(t){void 0===r.props[t]&&void 0!==e[t]&&(f[t]=e[t])})),i.createElement("label",qn({className:Hn(n.root,a,"end"!==c&&n["labelPlacement".concat(Yl(c))],d&&n.disabled),ref:t},u),i.cloneElement(r,f),i.createElement(sc,{component:"span",className:Hn(n.label,d&&n.disabled)},l))}));const uc=Jl((function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}}),{name:"MuiFormControlLabel"})(cc);var mc=!0,dc=!1,fc=null,pc={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function hc(e){e.metaKey||e.altKey||e.ctrlKey||(mc=!0)}function bc(){mc=!1}function vc(){"hidden"===this.visibilityState&&dc&&(mc=!0)}function gc(e){var t,n,a,r=e.target;try{return r.matches(":focus-visible")}catch(e){}return mc||(n=(t=r).type,!("INPUT"!==(a=t.tagName)||!pc[n]||t.readOnly)||"TEXTAREA"===a&&!t.readOnly||!!t.isContentEditable)}function yc(){dc=!0,window.clearTimeout(fc),fc=window.setTimeout((function(){dc=!1}),100)}function Ec(){return{isFocusVisible:gc,onBlurVisible:yc,ref:i.useCallback((function(e){var t,n=u.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",hc,!0),t.addEventListener("mousedown",bc,!0),t.addEventListener("pointerdown",bc,!0),t.addEventListener("touchstart",bc,!0),t.addEventListener("visibilitychange",vc,!0))}),[])}}function xc(e,t){var n=Object.create(null);return e&&i.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,i.isValidElement)(e)?t(e):e}(e)})),n}function wc(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Nc(e,t,n){var a=xc(e.children),r=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var a,r=Object.create(null),o=[];for(var l in e)l in t?o.length&&(r[l]=o,o=[]):o.push(l);var i={};for(var s in t){if(r[s])for(a=0;a<r[s].length;a++){var c=r[s][a];i[r[s][a]]=n(c)}i[s]=n(s)}for(a=0;a<o.length;a++)i[o[a]]=n(o[a]);return i}(t,a);return Object.keys(r).forEach((function(o){var l=r[o];if((0,i.isValidElement)(l)){var s=o in t,c=o in a,u=t[o],m=(0,i.isValidElement)(u)&&!u.props.in;!c||s&&!m?c||!s||m?c&&s&&(0,i.isValidElement)(u)&&(r[o]=(0,i.cloneElement)(l,{onExited:n.bind(null,l),in:u.props.in,exit:wc(l,"exit",e),enter:wc(l,"enter",e)})):r[o]=(0,i.cloneElement)(l,{in:!1}):r[o]=(0,i.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:wc(l,"exit",e),enter:wc(l,"enter",e)})}})),r}var kc=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Sc=function(e){function t(t,n){var a,r=(a=e.call(this,t,n)||this).handleExited.bind(oa(a));return a.state={contextValue:{isMounting:!0},handleExited:r,firstRender:!0},a}ra(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,a,r=t.children,o=t.handleExited;return{children:t.firstRender?(n=e,a=o,xc(n.children,(function(e){return(0,i.cloneElement)(e,{onExited:a.bind(null,e),in:!0,appear:wc(e,"appear",n),enter:wc(e,"enter",n),exit:wc(e,"exit",n)})}))):Nc(e,r,o),firstRender:!1}},n.handleExited=function(e,t){var n=xc(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=qn({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,a=Wn(e,["component","childFactory"]),r=this.state.contextValue,o=kc(this.state.children).map(n);return delete a.appear,delete a.enter,delete a.exit,null===t?i.createElement(as.Provider,{value:r},o):i.createElement(as.Provider,{value:r},i.createElement(t,a,o))},t}(i.Component);Sc.propTypes={},Sc.defaultProps={component:"div",childFactory:function(e){return e}};const Cc=Sc;var _c="undefined"==typeof window?i.useEffect:i.useLayoutEffect;const Rc=function(e){var t=e.classes,n=e.pulsate,a=void 0!==n&&n,r=e.rippleX,o=e.rippleY,l=e.rippleSize,s=e.in,c=e.onExited,u=void 0===c?function(){}:c,m=e.timeout,d=i.useState(!1),f=d[0],p=d[1],h=Hn(t.ripple,t.rippleVisible,a&&t.ripplePulsate),b={width:l,height:l,top:-l/2+o,left:-l/2+r},v=Hn(t.child,f&&t.childLeaving,a&&t.childPulsate),g=Vi(u);return _c((function(){if(!s){p(!0);var e=setTimeout(g,m);return function(){clearTimeout(e)}}}),[g,s,m]),i.createElement("span",{className:h,style:b},i.createElement("span",{className:v}))};var Pc=i.forwardRef((function(e,t){var n=e.center,a=void 0!==n&&n,r=e.classes,o=e.className,l=$n(e,["center","classes","className"]),s=i.useState([]),c=s[0],u=s[1],m=i.useRef(0),d=i.useRef(null);i.useEffect((function(){d.current&&(d.current(),d.current=null)}),[c]);var f=i.useRef(!1),p=i.useRef(null),h=i.useRef(null),b=i.useRef(null);i.useEffect((function(){return function(){clearTimeout(p.current)}}),[]);var v=i.useCallback((function(e){var t=e.pulsate,n=e.rippleX,a=e.rippleY,o=e.rippleSize,l=e.cb;u((function(e){return[].concat(Kr(e),[i.createElement(Rc,{key:m.current,classes:r,timeout:550,pulsate:t,rippleX:n,rippleY:a,rippleSize:o})])})),m.current+=1,d.current=l}),[r]),g=i.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,o=void 0!==r&&r,l=t.center,i=void 0===l?a||t.pulsate:l,s=t.fakeElement,c=void 0!==s&&s;if("mousedown"===e.type&&f.current)f.current=!1;else{"touchstart"===e.type&&(f.current=!0);var u,m,d,g=c?null:b.current,y=g?g.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(i||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(y.width/2),m=Math.round(y.height/2);else{var E=e.touches?e.touches[0]:e,x=E.clientX,w=E.clientY;u=Math.round(x-y.left),m=Math.round(w-y.top)}if(i)(d=Math.sqrt((2*Math.pow(y.width,2)+Math.pow(y.height,2))/3))%2==0&&(d+=1);else{var N=2*Math.max(Math.abs((g?g.clientWidth:0)-u),u)+2,k=2*Math.max(Math.abs((g?g.clientHeight:0)-m),m)+2;d=Math.sqrt(Math.pow(N,2)+Math.pow(k,2))}e.touches?null===h.current&&(h.current=function(){v({pulsate:o,rippleX:u,rippleY:m,rippleSize:d,cb:n})},p.current=setTimeout((function(){h.current&&(h.current(),h.current=null)}),80)):v({pulsate:o,rippleX:u,rippleY:m,rippleSize:d,cb:n})}}),[a,v]),y=i.useCallback((function(){g({},{pulsate:!0})}),[g]),E=i.useCallback((function(e,t){if(clearTimeout(p.current),"touchend"===e.type&&h.current)return e.persist(),h.current(),h.current=null,void(p.current=setTimeout((function(){E(e,t)})));h.current=null,u((function(e){return e.length>0?e.slice(1):e})),d.current=t}),[]);return i.useImperativeHandle(t,(function(){return{pulsate:y,start:g,stop:E}}),[y,g,E]),i.createElement("span",qn({className:Hn(r.root,o),ref:b},l),i.createElement(Cc,{component:null,exit:!0},c))}));const Tc=Jl((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(i.memo(Pc));var Oc=i.forwardRef((function(e,t){var n=e.action,a=e.buttonRef,r=e.centerRipple,o=void 0!==r&&r,l=e.children,s=e.classes,c=e.className,m=e.component,d=void 0===m?"button":m,f=e.disabled,p=void 0!==f&&f,h=e.disableRipple,b=void 0!==h&&h,v=e.disableTouchRipple,g=void 0!==v&&v,y=e.focusRipple,E=void 0!==y&&y,x=e.focusVisibleClassName,w=e.onBlur,N=e.onClick,k=e.onFocus,S=e.onFocusVisible,C=e.onKeyDown,_=e.onKeyUp,R=e.onMouseDown,P=e.onMouseLeave,T=e.onMouseUp,O=e.onTouchEnd,I=e.onTouchMove,D=e.onTouchStart,A=e.onDragLeave,F=e.tabIndex,L=void 0===F?0:F,B=e.TouchRippleProps,z=e.type,M=void 0===z?"button":z,j=$n(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),U=i.useRef(null),q=i.useRef(null),W=i.useState(!1),$=W[0],V=W[1];p&&$&&V(!1);var H=Ec(),G=H.isFocusVisible,K=H.onBlurVisible,Q=H.ref;function J(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:g;return Vi((function(a){return t&&t(a),!n&&q.current&&q.current[e](a),!0}))}i.useImperativeHandle(n,(function(){return{focusVisible:function(){V(!0),U.current.focus()}}}),[]),i.useEffect((function(){$&&E&&!b&&q.current.pulsate()}),[b,E,$]);var Y=J("start",R),X=J("stop",A),Z=J("stop",T),ee=J("stop",(function(e){$&&e.preventDefault(),P&&P(e)})),te=J("start",D),ne=J("stop",O),ae=J("stop",I),re=J("stop",(function(e){$&&(K(e),V(!1)),w&&w(e)}),!1),oe=Vi((function(e){U.current||(U.current=e.currentTarget),G(e)&&(V(!0),S&&S(e)),k&&k(e)})),le=function(){var e=u.findDOMNode(U.current);return d&&"button"!==d&&!("A"===e.tagName&&e.href)},ie=i.useRef(!1),se=Vi((function(e){E&&!ie.current&&$&&q.current&&" "===e.key&&(ie.current=!0,e.persist(),q.current.stop(e,(function(){q.current.start(e)}))),e.target===e.currentTarget&&le()&&" "===e.key&&e.preventDefault(),C&&C(e),e.target===e.currentTarget&&le()&&"Enter"===e.key&&!p&&(e.preventDefault(),N&&N(e))})),ce=Vi((function(e){E&&" "===e.key&&q.current&&$&&!e.defaultPrevented&&(ie.current=!1,e.persist(),q.current.stop(e,(function(){q.current.pulsate(e)}))),_&&_(e),N&&e.target===e.currentTarget&&le()&&" "===e.key&&!e.defaultPrevented&&N(e)})),ue=d;"button"===ue&&j.href&&(ue="a");var me={};"button"===ue?(me.type=M,me.disabled=p):("a"===ue&&j.href||(me.role="button"),me["aria-disabled"]=p);var de=fi(a,t),fe=fi(Q,U),pe=fi(de,fe),he=i.useState(!1),be=he[0],ve=he[1];i.useEffect((function(){ve(!0)}),[]);var ge=be&&!b&&!p;return i.createElement(ue,qn({className:Hn(s.root,c,$&&[s.focusVisible,x],p&&s.disabled),onBlur:re,onClick:N,onFocus:oe,onKeyDown:se,onKeyUp:ce,onMouseDown:Y,onMouseLeave:ee,onMouseUp:Z,onDragLeave:X,onTouchEnd:ne,onTouchMove:ae,onTouchStart:te,ref:pe,tabIndex:p?-1:L},me,j),l,ge?i.createElement(Tc,qn({ref:q,center:o},B)):null)}));const Ic=Jl({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Oc);var Dc=i.forwardRef((function(e,t){var n=e.edge,a=void 0!==n&&n,r=e.children,o=e.classes,l=e.className,s=e.color,c=void 0===s?"default":s,u=e.disabled,m=void 0!==u&&u,d=e.disableFocusRipple,f=void 0!==d&&d,p=e.size,h=void 0===p?"medium":p,b=$n(e,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return i.createElement(Ic,qn({className:Hn(o.root,l,"default"!==c&&o["color".concat(Yl(c))],m&&o.disabled,"small"===h&&o["size".concat(Yl(h))],{start:o.edgeStart,end:o.edgeEnd}[a]),centerRipple:!0,focusRipple:!f,disabled:m,ref:t},b),i.createElement("span",{className:o.label},r))}));const Ac=Jl((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:xl(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(Dc);var Fc=i.forwardRef((function(e,t){var n=e.autoFocus,a=e.checked,r=e.checkedIcon,o=e.classes,l=e.className,s=e.defaultChecked,c=e.disabled,u=e.icon,m=e.id,d=e.inputProps,f=e.inputRef,p=e.name,h=e.onBlur,b=e.onChange,v=e.onFocus,g=e.readOnly,y=e.required,E=e.tabIndex,x=e.type,w=e.value,N=$n(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),k=Dl(Ms({controlled:a,default:Boolean(s),name:"SwitchBase",state:"checked"}),2),S=k[0],C=k[1],_=Ii(),R=c;_&&void 0===R&&(R=_.disabled);var P="checkbox"===x||"radio"===x;return i.createElement(Ac,qn({component:"span",className:Hn(o.root,l,S&&o.checked,R&&o.disabled),disabled:R,tabIndex:null,role:void 0,onFocus:function(e){v&&v(e),_&&_.onFocus&&_.onFocus(e)},onBlur:function(e){h&&h(e),_&&_.onBlur&&_.onBlur(e)},ref:t},N),i.createElement("input",qn({autoFocus:n,checked:a,defaultChecked:s,className:o.input,disabled:R,id:P&&m,name:p,onChange:function(e){var t=e.target.checked;C(t),b&&b(e,t)},readOnly:g,ref:f,required:y,tabIndex:E,type:x,value:w},d)),S?r:u)}));const Lc=Jl({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}},{name:"PrivateSwitchBase"})(Fc),Bc=$s(i.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})),zc=$s(i.createElement("path",{d:"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"})),Mc=Jl((function(e){return{root:{position:"relative",display:"flex","&$checked $layer":{transform:"scale(1)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.shortest})}},layer:{left:0,position:"absolute",transform:"scale(0)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeIn,duration:e.transitions.duration.shortest})},checked:{}}}),{name:"PrivateRadioButtonIcon"})((function(e){var t=e.checked,n=e.classes,a=e.fontSize;return i.createElement("div",{className:Hn(n.root,t&&n.checked)},i.createElement(Bc,{fontSize:a}),i.createElement(zc,{fontSize:a,className:n.layer}))}));var jc=i.createElement(Mc,{checked:!0}),Uc=i.createElement(Mc,null),qc=i.forwardRef((function(e,t){var n=e.checked,a=e.classes,r=e.color,o=void 0===r?"secondary":r,l=e.name,s=e.onChange,c=e.size,u=void 0===c?"medium":c,m=$n(e,["checked","classes","color","name","onChange","size"]),d=i.useContext(rc),f=n,p=Ui(s,d&&d.onChange),h=l;return d&&(void 0===f&&(f=d.value===e.value),void 0===h&&(h=d.name)),i.createElement(Lc,qn({color:o,type:"radio",icon:i.cloneElement(Uc,{fontSize:"small"===u?"small":"medium"}),checkedIcon:i.cloneElement(jc,{fontSize:"small"===u?"small":"medium"}),classes:{root:Hn(a.root,a["color".concat(Yl(o))]),checked:a.checked,disabled:a.disabled},name:h,checked:f,onChange:p,ref:t},m))}));const Wc=Jl((function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}}),{name:"MuiRadio"})(qc),$c=$s(i.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"})),Vc=$s(i.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"})),Hc=$s(i.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}));var Gc=i.createElement(Vc,null),Kc=i.createElement($c,null),Qc=i.createElement(Hc,null),Jc=i.forwardRef((function(e,t){var n=e.checkedIcon,a=void 0===n?Gc:n,r=e.classes,o=e.color,l=void 0===o?"secondary":o,s=e.icon,c=void 0===s?Kc:s,u=e.indeterminate,m=void 0!==u&&u,d=e.indeterminateIcon,f=void 0===d?Qc:d,p=e.inputProps,h=e.size,b=void 0===h?"medium":h,v=$n(e,["checkedIcon","classes","color","icon","indeterminate","indeterminateIcon","inputProps","size"]),g=m?f:c,y=m?f:a;return i.createElement(Lc,qn({type:"checkbox",classes:{root:Hn(r.root,r["color".concat(Yl(l))],m&&r.indeterminate),checked:r.checked,disabled:r.disabled},color:l,inputProps:qn({"data-indeterminate":m},p),icon:i.cloneElement(g,{fontSize:void 0===g.props.fontSize&&"small"===b?b:g.props.fontSize}),checkedIcon:i.cloneElement(y,{fontSize:void 0===y.props.fontSize&&"small"===b?b:y.props.fontSize}),ref:t},v))}));const Yc=Jl((function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},indeterminate:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}}),{name:"MuiCheckbox"})(Jc);var Xc=i.forwardRef((function(e,t){var n=e.children,a=e.classes,r=e.className,o=e.color,l=void 0===o?"default":o,s=e.component,c=void 0===s?"button":s,u=e.disabled,m=void 0!==u&&u,d=e.disableElevation,f=void 0!==d&&d,p=e.disableFocusRipple,h=void 0!==p&&p,b=e.endIcon,v=e.focusVisibleClassName,g=e.fullWidth,y=void 0!==g&&g,E=e.size,x=void 0===E?"medium":E,w=e.startIcon,N=e.type,k=void 0===N?"button":N,S=e.variant,C=void 0===S?"text":S,_=$n(e,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),R=w&&i.createElement("span",{className:Hn(a.startIcon,a["iconSize".concat(Yl(x))])},w),P=b&&i.createElement("span",{className:Hn(a.endIcon,a["iconSize".concat(Yl(x))])},b);return i.createElement(Ic,qn({className:Hn(a.root,a[C],r,"inherit"===l?a.colorInherit:"default"!==l&&a["".concat(C).concat(Yl(l))],"medium"!==x&&[a["".concat(C,"Size").concat(Yl(x))],a["size".concat(Yl(x))]],f&&a.disableElevation,m&&a.disabled,y&&a.fullWidth),component:c,disabled:m,focusRipple:!h,focusVisibleClassName:Hn(a.focusVisible,v),ref:t,type:k},_),i.createElement("span",{className:a.label},R,n,P))}));const Zc=Jl((function(e){return{root:qn({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:xl(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(xl(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(xl(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(Xc),eu=function(e){let{formData:t,id:n,setShowResponse:a}=e;const[r,o]=(0,i.useState)([]);let l=t.filter((e=>e.id===n));l=l[0];const s=(e,t)=>{const n=[...r];n[e]=t.target.value,o(n)};return i.createElement("form",{onSubmit:e=>{e.preventDefault();const a=r.map(((e,a)=>{const r=t.filter((e=>e.id===n))[0].questions[a];return{questionText:r.questionText,answerType:r.answerType,formId:n,response:e}}));console.log(a)}},i.createElement(ni,{component:"fieldset"},i.createElement(ri,null,i.createElement("h2",null,l.title),null===(c=l.questions)||void 0===c?void 0:c.map(((e,t)=>i.createElement(ui,{container:!0,key:t,spacing:2},i.createElement("div",{className:"question-box"},i.createElement(ui,{item:!0,xs:12},i.createElement("p",{className:"question-text"},t+1,".",e.questionText)),i.createElement(ui,{item:!0,xs:12},"input"===e.answerType&&i.createElement(ac,{type:"text",fullWidth:!0,className:"questions",value:r[t]||"",onChange:e=>s(t,e)}),"radio"===e.answerType&&i.createElement(oc,{"aria-label":"radio-".concat(t),name:"radio-".concat(t),value:r[t]||"",onChange:e=>s(t,e)},e.options.map(((e,t)=>i.createElement(uc,{key:t,value:e,control:i.createElement(Wc,null),label:e})))),"checkbox"===e.answerType&&i.createElement(ri,null,e.options.map(((e,n)=>{var a;return i.createElement(uc,{key:n,control:i.createElement(Yc,{checked:(null===(a=r[t])||void 0===a?void 0:a.includes(e))||!1,onChange:e=>s(t,e),name:"checkbox-".concat(t),value:e}),label:e})})))))))),i.createElement("div",{className:"button-container"},i.createElement(Zc,{type:"submit",variant:"contained",color:"primary"},"Submit"),i.createElement(Zc,{type:"submit",variant:"contained",color:"primary",onClick:()=>a(!1)},"Back")))));var c},tu={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)},nu=function(e,t,n){if(tu.randomUUID&&!t&&!e)return tu.randomUUID();var a=(e=e||{}).random||(e.rng||In)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){n=n||0;for(var r=0;r<16;++r)t[n+r]=a[r];return t}return Fn(a)};var au="undefined"==typeof window?i.useEffect:i.useLayoutEffect,ru=i.forwardRef((function(e,t){var n=e.alignItems,a=void 0===n?"center":n,r=e.autoFocus,o=void 0!==r&&r,l=e.button,s=void 0!==l&&l,c=e.children,m=e.classes,d=e.className,f=e.component,p=e.ContainerComponent,h=void 0===p?"li":p,b=e.ContainerProps,v=(b=void 0===b?{}:b).className,g=$n(b,["className"]),y=e.dense,E=void 0!==y&&y,x=e.disabled,w=void 0!==x&&x,N=e.disableGutters,k=void 0!==N&&N,S=e.divider,C=void 0!==S&&S,_=e.focusVisibleClassName,R=e.selected,P=void 0!==R&&R,T=$n(e,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),O=i.useContext(Ss),I={dense:E||O.dense||!1,alignItems:a},D=i.useRef(null);au((function(){o&&D.current&&D.current.focus()}),[o]);var A=i.Children.toArray(c),F=A.length&&Xl(A[A.length-1],["ListItemSecondaryAction"]),L=fi(i.useCallback((function(e){D.current=u.findDOMNode(e)}),[]),t),B=qn({className:Hn(m.root,d,I.dense&&m.dense,!k&&m.gutters,C&&m.divider,w&&m.disabled,s&&m.button,"center"!==a&&m.alignItemsFlexStart,F&&m.secondaryAction,P&&m.selected),disabled:w},T),z=f||"li";return s&&(B.component=f||"div",B.focusVisibleClassName=Hn(m.focusVisible,_),z=Ic),F?(z=B.component||f?z:"div","li"===h&&("li"===z?z="div":"li"===B.component&&(B.component="div")),i.createElement(Ss.Provider,{value:I},i.createElement(h,qn({className:Hn(m.container,v),ref:L},g),i.createElement(z,B,A),A.pop()))):i.createElement(Ss.Provider,{value:I},i.createElement(z,qn({ref:L},B),A))}));const ou=Jl((function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}}),{name:"MuiListItem"})(ru);var lu=i.forwardRef((function(e,t){var n,a=e.classes,r=e.className,o=e.component,l=void 0===o?"li":o,s=e.disableGutters,c=void 0!==s&&s,u=e.ListItemClasses,m=e.role,d=void 0===m?"menuitem":m,f=e.selected,p=e.tabIndex,h=$n(e,["classes","className","component","disableGutters","ListItemClasses","role","selected","tabIndex"]);return e.disabled||(n=void 0!==p?p:-1),i.createElement(ou,qn({button:!0,role:d,tabIndex:n,component:l,selected:f,disableGutters:c,classes:qn({dense:a.dense},u),className:Hn(a.root,r,f&&a.selected,!c&&a.gutters),ref:t},h))}));const iu=Jl((function(e){return{root:qn({},e.typography.body1,ll({minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",width:"auto",overflow:"hidden",whiteSpace:"nowrap"},e.breakpoints.up("sm"),{minHeight:"auto"})),gutters:{},selected:{},dense:qn({},e.typography.body2,{minHeight:"auto"})}}),{name:"MuiMenuItem"})(lu),su=function(e){return al(e,qn({defaultTheme:Ql},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}))}((e=>({formContainer:{marginBottom:e.spacing(2),padding:e.spacing(2),borderRadius:"25px",width:"50vw",margin:"auto",marginTop:"1rem"},questionContainer:{marginBottom:e.spacing(2),display:"flex",flexDirection:"column",borderRadius:"25px",border:"1.5px solid grey",padding:"2rem"},questionTop:{display:"flex",gap:".5rem"},optionContainer:{display:"flex",alignItems:"center",marginBottom:e.spacing(1)},addButton:{marginLeft:e.spacing(2),width:"50%",marginBottom:"10px",marginTop:"10px"},deleteButton:{marginLeft:e.spacing(2)}}))),cu=()=>{const e="https://madsis.mad.ec/api/";let t=Z();const[n,a]=(0,i.useState)(!1),[r,o]=(0,i.useState)(""),[l,s]=(0,i.useState)(null),c=te(),u=su(),[m,d]=(0,i.useState)(!1),[f,p]=(0,i.useState)([{title:r,id:c.id,questions:[{id:nu(),questionText:"",answerType:"",options:[{id:nu(),optionText:""}]}]}]);(0,i.useEffect)((()=>{(async t=>{try{return(await Rn.get(e+"form/"+t)).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(c.id).then((e=>{p([e]),document.getElementById("title_final").value=e.title,s(e.id)})).catch((e=>console.error("Error al obtener los datos:",e))),localStorage.setItem("forms",JSON.stringify(f))}),[f]);const h=(e,t,n,a)=>{p((r=>r.map((r=>r.id===e?{...r,questions:r.questions.map((e=>e.id===t?{...e,options:e.options.map((e=>e.id===n?{...e,optionText:a}:e))}:e))}:r))))},b=(e,t)=>{p((n=>n.map((n=>n.id===e?{...n,questions:n.questions.map((e=>e.id===t?{...e,options:[...e.options,{id:nu(),optionText:""}]}:e))}:n))))},v=(e,t)=>{p((n=>n.map((n=>n.id===e?{...n,questions:n.questions.filter((e=>e.id!==t))}:n))))};return i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Formularios de evaluación"),i.createElement("ul",{class:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{class:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",class:"text-muted text-hover-primary"},"Home")),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Formulario de Evaluación"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Vista"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"button-container"},!n&&i.createElement("button",{className:"btn btn-primary btn-lg float-end",onClick:()=>{l?Rn.put(e+"form"+l,JSON.stringify(f[0]),{headers:{"Content-Type":"application/json"}}).then((function(e){e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),t("/form")):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{d(!0)})):Rn.post(e+"form",JSON.stringify(f[0]),{headers:{"Content-Type":"application/json"}}).then((function(e){e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),t("/form")):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{d(!0)}))}},"Grabar Formulario"),!n&&m&&i.createElement(Zc,{variant:"contained",color:"primary",onClick:()=>{a(!0)}},"Abrir Formulario")),!n&&f.map((e=>i.createElement("div",{key:e.id,className:u.formContainer},i.createElement("input",{className:"form-control form-control-lg form-control-solid",type:"text",id:"title_final",placeholder:"Ingresar un título",onChange:e=>(e=>{p((t=>[{...t[0],title:e.target.value},...t.slice(1)]))})(e)}),e.questions.map((t=>i.createElement("div",{key:t.id,className:u.questionContainer},i.createElement("div",{className:u.questionTop},i.createElement(ac,{label:"Ingrese la pregunta",value:t.questionText,onChange:n=>((e,t,n)=>{p((a=>a.map((a=>a.id===e?{...a,questions:a.questions.map((e=>e.id===t?{...e,questionText:n}:e))}:a))))})(e.id,t.id,n.target.value),fullWidth:!0}),i.createElement(ni,{fullWidth:!0},i.createElement(Li,{id:"answer-type-label-".concat(t.id)},"Tipo de Respuesta"),i.createElement(ec,{labelId:"answer-type-label-".concat(t.id),value:t.answerType,onChange:n=>((e,t,n)=>{p((a=>a.map((a=>a.id===e?{...a,questions:a.questions.map((e=>e.id===t?{...e,answerType:n,options:[]}:e))}:a))))})(e.id,t.id,n.target.value)},i.createElement(iu,{value:""},"Seleccionar"),i.createElement(iu,{value:"input"},"Cuadro de Texto"),i.createElement(iu,{value:"checkbox"},"Selección Multiple"),i.createElement(iu,{value:"radio"},"Una sola opción")))),"checkbox"===t.answerType&&i.createElement(i.Fragment,null,i.createElement(sc,{variant:"subtitle2"}),t.options.map(((n,a)=>i.createElement("div",{className:u.optionContainer},i.createElement(ac,{key:n.id,label:"Opción ".concat(a+1),value:n.optionText,onChange:a=>h(e.id,t.id,n.id,a.target.value)}),i.createElement(Zc,{variant:"outlined",color:"secondary",size:"small",className:u.deleteButton,onClick:()=>v(e.id,t.id)},i.createElement("i",{className:"bi bi-trash"}))))),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>b(e.id,t.id),className:u.addButton},i.createElement("i",{className:"bi bi-file-earmark-plus"}),"Agregar Opción")),"radio"===t.answerType&&i.createElement(i.Fragment,null,t.options.map(((n,a)=>i.createElement("div",{key:a,className:u.optionContainer},i.createElement(ac,{label:"Option ".concat(a+1),value:n.optionText,key:n.id,onChange:a=>h(e.id,t.id,n.id,a.target.value)}),i.createElement(Zc,{variant:"outlined",color:"secondary",size:"small",className:u.deleteButton,onClick:()=>v(e.id,t.id)},i.createElement("i",{className:"bi bi-trash"}))))),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>b(e.id,t.id),className:u.addButton},i.createElement("i",{className:"bi bi-file-earmark-plus"}),"Agregar opción")),"input"===t.answerType&&i.createElement("input",{className:"short-text",type:"text",disabled:!0}),i.createElement("div",null,i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>v(e.id,t.id),className:u.deleteButton},i.createElement("i",{className:"bi bi-trash"})),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>((e,t)=>{const n={...f.find((t=>t.id===e)).questions.find((e=>e.id===t))};n.id=nu(),p((t=>t.map((t=>t.id===e?{...t,questions:[...t.questions,n]}:t))))})(e.id,t.id),className:u.addButton},i.createElement("i",{className:"bi bi-copy"})))))),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>(e=>{const t={id:nu(),questionText:"Pregunta ",answerType:"",options:[]};p((n=>n.map((n=>n.id===e?{...n,questions:[...n.questions,t]}:n))))})(e.id)},i.createElement("i",{className:"bi bi-file-earmark-plus"}),"Agregar nueva Pregunta")))),n&&m&&i.createElement(eu,{formData:f,id:c.id,setShowResponse:a}))))},uu=()=>i.createElement(i.Fragment,null,i.createElement(cu,null)),mu=()=>{const e=Z();var t,n,a;(0,i.useEffect)((()=>{n=document.querySelector("#kt_sign_in_form"),a=document.querySelector("#kt_sign_in_submit"),r()}),[]);const r=()=>{t=FormValidation.formValidation(n,{fields:{username:{validators:{notEmpty:{message:"El usuario es requerido"}}},password:{validators:{notEmpty:{message:"La contraseña es requerida"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap:new FormValidation.plugins.Bootstrap5({rowSelector:".fv-row",eleInvalidClass:"",eleValidClass:""})}})};return i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-root",id:"kt_app_root"},i.createElement("div",{className:"d-flex flex-column flex-lg-row flex-column-fluid"},i.createElement("div",{className:"d-flex flex-column flex-lg-row-fluid w-lg-50 p-10 order-2 order-lg-1"},i.createElement("div",{className:"d-flex flex-center flex-column flex-lg-row-fluid"},i.createElement("div",{className:"w-lg-500px p-10"},i.createElement("form",{className:"form w-100",noValidate:"novalidate",id:"kt_sign_in_form",onSubmit:r=>{r.preventDefault(),t.validate().then((function(t){if("Valid"==t){a.setAttribute("data-kt-indicator","on"),a.disabled=!0;var r=Object.fromEntries(new FormData(n));Rn.post("https://madsis.mad.ec/api/auth/login",r,{headers:{"Content-Type":"application/json"}}).then((function(t){t?(localStorage.setItem("username",r.username),n.reset(),swal.fire({text:"¡Has iniciado sesión correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}}),e("/dashboard")):swal.fire({text:"Lo sentimos, el usuario o la contraseña son incorrectos, inténtalo de nuevo..",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{a.removeAttribute("data-kt-indicator"),a.disabled=!1}))}else swal.fire({text:"Sorry, looks like there are some errors detected, please try again.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}))},action:"#"},i.createElement("div",{className:"text-center mb-11"},i.createElement("h1",{className:"text-gray-900 fw-bolder mb-3"},"Iniciar Sesión")),i.createElement("div",{className:"fv-row mb-8"},i.createElement("input",{type:"text",placeholder:"Ingresar usuario",name:"username",autoComplete:"off",className:"form-control bg-transparent"})),i.createElement("div",{className:"fv-row mb-3"},i.createElement("input",{type:"password",placeholder:"Ingresar contraseña",name:"password",autoComplete:"off",className:"form-control bg-transparent"})),i.createElement("div",{className:"d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8"},i.createElement("div",null)),i.createElement("div",{className:"d-grid mb-10"},i.createElement("button",{type:"submit",id:"kt_sign_in_submit",className:"btn btn-primary"},i.createElement("span",{className:"indicator-label"},"Ingresar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))),i.createElement("div",{className:"w-lg-500px d-flex flex-stack px-10 mx-auto"},i.createElement("div",{className:"me-10"},i.createElement("button",{className:"btn btn-flex btn-link btn-color-gray-700 btn-active-color-primary rotate fs-base","data-kt-menu-trigger":"click","data-kt-menu-placement":"bottom-start","data-kt-menu-offset":"0px, 0px"},i.createElement("img",{"data-kt-element":"current-lang-flag",className:"w-20px h-20px rounded me-3",src:"assets/media/flags/ecuador.svg",alt:""}),i.createElement("span",{"data-kt-element":"current-lang-name",className:"me-1"},"Español"),i.createElement("span",{className:"d-flex flex-center rotate-180"},i.createElement("i",{className:"ki-outline ki-down fs-5 text-muted m-0"}))),i.createElement("div",{className:"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-800 menu-state-bg-light-primary fw-semibold w-200px py-4 fs-7","data-kt-menu":"true",id:"kt_auth_lang_menu"},i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"English"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/united-states.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"English"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"Spanish"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/ecuador.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"Spanish"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"German"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/germany.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"German"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"Japanese"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/japan.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"Japanese"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"French"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/france.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"French"))))))),i.createElement("div",{className:"d-flex flex-lg-row-fluid w-lg-50 bgi-size-cover bgi-position-center order-1 order-lg-2"},i.createElement("div",{className:"d-flex flex-column flex-center py-7 py-lg-15 px-5 px-md-15 w-100"},i.createElement("a",{href:"index.html",className:"mb-0 mb-lg-12"},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-60px h-lg-75px"})),i.createElement("img",{className:"d-none d-lg-block mx-auto w-275px w-md-50 w-xl-500px mb-10 mb-lg-20",src:"assets/media/misc/auth-screens.png",alt:""}),i.createElement("h1",{className:"d-none d-lg-block text-grey fs-2qx fw-bolder text-center mb-7"},"Todo lo que necesites sin moverte de tu casa"))))))},du=()=>i.createElement(i.Fragment,null),fu=()=>i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_footer",className:"app-footer"},i.createElement("div",{className:"app-container container-fluid d-flex flex-column flex-md-row flex-center flex-md-stack py-3"},i.createElement("div",{className:"text-gray-900 order-2 order-md-1"},i.createElement("span",{className:"text-muted fw-semibold me-1"},"2024©"),i.createElement("a",{className:"text-gray-800 text-hover-primary"},"Market & Delivery"))))),pu=()=>i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_header",className:"app-header d-flex flex-column flex-stack"},i.createElement("div",{className:"d-flex flex-stack flex-grow-1"},i.createElement("div",{className:"app-header-logo d-flex align-items-center ps-lg-12",id:"kt_app_header_logo"},i.createElement("div",{id:"kt_app_sidebar_toggle",className:"app-sidebar-toggle btn btn-sm btn-icon bg-body btn-color-gray-500 btn-active-color-primary w-30px h-30px ms-n2 me-4 d-none d-lg-flex","data-kt-toggle":"true","data-kt-toggle-state":"active","data-kt-toggle-target":"body","data-kt-toggle-name":"app-sidebar-minimize"},i.createElement("i",{className:"ki-outline ki-abstract-14 fs-3 mt-1"})),i.createElement("div",{className:"btn btn-icon btn-active-color-primary w-35px h-35px ms-3 me-2 d-flex d-lg-none",id:"kt_app_sidebar_mobile_toggle"},i.createElement("i",{className:"ki-outline ki-abstract-14 fs-2"})),i.createElement("a",{href:"/",className:"app-sidebar-logo"},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-35px theme-light-show"}),i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-35px theme-dark-show"}))),i.createElement("div",{className:"app-navbar flex-grow-1 justify-content-end",id:"kt_app_header_navbar"},i.createElement("div",{className:"app-navbar-item d-flex align-items-stretch flex-lg-grow-1"}),i.createElement("div",{className:"app-navbar-item ms-2 ms-lg-6",id:"kt_header_user_menu_toggle"},i.createElement("div",{className:"cursor-pointer symbol symbol-circle symbol-30px symbol-lg-45px","data-kt-menu-trigger":"{default: 'click', lg: 'hover'}","data-kt-menu-attach":"parent","data-kt-menu-placement":"bottom-end"},i.createElement("img",{src:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png",alt:"user"})),i.createElement("div",{className:"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-800 menu-state-bg menu-state-color fw-semibold py-4 fs-6 w-275px","data-kt-menu":"true"},i.createElement("div",{className:"menu-item px-3"},i.createElement("div",{className:"menu-content d-flex align-items-center px-3"},i.createElement("div",{className:"symbol symbol-50px me-5"},i.createElement("img",{alt:"Logo",src:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"})),i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"fw-bold d-flex align-items-center fs-5"},"Max Prueba",i.createElement("span",{className:"badge badge-light-success fw-bold fs-8 px-2 py-1 ms-2"},"GG")),i.createElement("a",{href:"#",className:"fw-semibold text-muted text-hover-primary fs-7"},"max@mad.com")))),i.createElement("div",{className:"menu-item px-5"},i.createElement("a",{href:"/login",className:"menu-link px-5"},"Cerrar Sesión")))),i.createElement("div",{className:"app-navbar-item ms-2 ms-lg-6 me-lg-6"},i.createElement("a",{href:"/login",className:"btn btn-icon btn-custom btn-color-gray-600 btn-active-color-primary w-35px h-35px w-md-40px h-md-40px"},i.createElement("i",{className:"ki-outline ki-exit-right fs-1"}))))),i.createElement("div",{className:"app-header-separator"}))),hu=()=>i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_sidebar",className:"app-sidebar flex-column","data-kt-drawer":"true","data-kt-drawer-name":"app-sidebar","data-kt-drawer-activate":"{default: true, lg: false}","data-kt-drawer-overlay":"true","data-kt-drawer-width":"250px","data-kt-drawer-direction":"start","data-kt-drawer-toggle":"#kt_app_sidebar_mobile_toggle"},i.createElement("div",{className:"app-sidebar-wrapper"},i.createElement("div",{id:"kt_app_sidebar_wrapper",className:"hover-scroll-y my-5 my-lg-2 mx-4","data-kt-scroll":"true","data-kt-scroll-activate":"{default: false, lg: true}","data-kt-scroll-height":"auto","data-kt-scroll-dependencies":"#kt_app_header","data-kt-scroll-wrappers":"#kt_app_sidebar_wrapper","data-kt-scroll-offset":"5px"},i.createElement("div",{id:"#kt_app_sidebar_menu","data-kt-menu":"true","data-kt-menu-expand":"false",className:"app-sidebar-menu-primary menu menu-column menu-rounded menu-sub-indention menu-state-bullet-primary px-3 mb-5"},i.createElement("div",{"data-kt-menu-trigger":"click",className:"menu-item here show menu-accordion"},i.createElement("span",{className:"menu-link"},i.createElement("span",{className:"menu-icon"},i.createElement("i",{className:"ki-outline ki-briefcase fs-2"})),i.createElement("span",{className:"menu-title"},"Recursos Humanos"),i.createElement("span",{className:"menu-arrow"})),i.createElement("div",{className:"menu-sub menu-sub-accordion"},i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/usuarios",title:"Gestión de Usuarios","data-bs-toggle":"tooltip","data-bs-trigger":"hover","data-bs-dismiss":"click","data-bs-placement":"right"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Gestión de Usuarios"))),i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/candidatos",title:"Reclutamiento de personal","data-bs-toggle":"tooltip","data-bs-trigger":"hover","data-bs-dismiss":"click","data-bs-placement":"right"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Reclutamiento"))),i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/form",title:"Reclutamiento de personal","data-bs-toggle":"tooltip","data-bs-trigger":"hover","data-bs-dismiss":"click","data-bs-placement":"right"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Formularios de evaluación"))),i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/roles"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Roles y Permisos")))))))))),bu=()=>i.createElement(i.Fragment,null,i.createElement("div",{className:"app-page flex-column flex-column-fluid",id:"kt_app_page"},i.createElement(pu,null),i.createElement("div",{className:"app-wrapper flex-column flex-row-fluid",id:"kt_app_wrapper"},i.createElement(hu,null),i.createElement("div",{className:"app-main flex-column flex-row-fluid",id:"kt_app_main"},i.createElement("div",{className:"d-flex flex-column flex-column-fluid"},i.createElement(du,null),i.createElement(me,null)),i.createElement(fu,null))))),vu=r.p+"src/assets/media/avatars/blank.png",gu="https://madsis.mad.ec/api/";var yu,Eu,xu;const wu=e=>{let{formFields:t,actionUrl:n,preloadedData:a}=e;const r=Z(),[o,l]=(0,i.useState)((()=>{const e={};return t.forEach((t=>{var n;"array"===t.type&&Array.isArray(t.fields)?e[t.name]=a[t.name]||[(n=t.fields,n.reduce(((e,t)=>(e[t.name]="",e)),{}))]:t.fields&&Array.isArray(t.fields)&&t.fields.forEach((t=>{"checkbox"===t.type?e[t.name]=a[t.name]||!1:"file"===t.type?e[t.name]=a[t.name]||null:e[t.name]=a[t.name]||""}))})),e})),s=async e=>(await Rn.get(e)).data;return(0,i.useEffect)((()=>{xu=document.querySelector("#kt_hunt_submit")}),[o,t]),i.createElement("div",{className:"container d-flex justify-content-center"},i.createElement("form",{action:n,onSubmit:e=>{e.preventDefault();let t=new FormData;for(let e in o)o.hasOwnProperty(e)&&(o[e]instanceof File?t.append(e,o[e]):"object"==typeof o[e]?t.append(e,JSON.stringify(o[e])):t.append(e,o[e]));xu.setAttribute("data-kt-indicator","on"),xu.disabled=!0,Rn.post(gu+"postulante",t,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){console.log("response",e),e?(swal.fire({text:"¡Se grabo el registro de forma exitosa!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}}),r("/resultado")):swal.fire({text:"Lo sentimos, hubo un error al grabar, inténtalo de nuevo..",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{xu.removeAttribute("data-kt-indicator"),xu.disabled=!1}))},className:"w-100",style:{maxWidth:"1024px"}},i.createElement("h3",{className:"mb-4"},"HOJA DE VIDA"),((e,t,n,a,r,o)=>i.createElement(i.Fragment,null,t.map(((t,l)=>"array"===t.type?i.createElement("div",{key:l,className:"w-100"},((e,t,n,a,r,o,l)=>i.createElement("div",{className:"mb-20 mt-5"},i.createElement("div",{className:"d-flex justify-content-between align-items-center mb-3"},i.createElement("h2",{className:"mb-4"},l),i.createElement("button",{type:"button",className:"btn btn-primary",onClick:()=>n(o)},i.createElement("i",{className:"fas fa-plus"}))),e.map(((e,n)=>i.createElement("div",{key:n,className:"row align-items-end mb-3"},r.map(((a,r)=>i.createElement("div",{key:r,className:"form-group col-12 col-md-3"},i.createElement("label",{className:"fw-semibold form-label text-gray-800 text-hover-primary fw-bold"},a.label,":"),"select"===a.type?i.createElement("select",{name:a.name,value:e[a.name]||"",className:"form-control form-select form-select-solid",onChange:e=>t(e,o,n,a.name)},a.options.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))):"checkbox"===a.type?i.createElement("div",{className:"form-check"},i.createElement("input",{type:"checkbox",name:a.name,checked:e[a.name]||!1,className:"form-check-input",onChange:e=>t({target:{name:a.name,value:e.target.checked}},o,n,a.name)}),i.createElement("label",{className:"form-check-label form-label required fw-semibold"},a.label)):i.createElement("input",{type:a.type,name:a.name,value:e[a.name]||"",className:"form-control form-control-solid",onChange:e=>t(e,o,n,a.name)})))),i.createElement("div",{className:"col-12 col-md-1 d-flex align-items-end"},i.createElement("button",{type:"button",className:"btn btn-danger",onClick:()=>a(o,n)},i.createElement("i",{className:"fas fa-trash"}))))))))(e[t.name],a,r,o,t.fields,t.name,t.label)):i.createElement("div",{key:l,className:"mb-5"},i.createElement("h2",{className:"mb-4"},t.group),i.createElement("div",{className:"row justify-content-center"},t.fields.map(((t,a)=>i.createElement("div",{key:a,className:"form-group col-12 col-md-4 mb-3"},i.createElement("label",{className:"form-label"},t.label,":"),"select"===t.type?i.createElement("select",{name:t.name,value:e[t.name]||"",className:"form-control form-control-solid",onChange:n},t.options.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))):"checkbox"===t.type?i.createElement("div",{className:"form-check"},i.createElement("input",{type:"checkbox",name:t.name,checked:e[t.name]||!1,className:"form-check-input",onChange:e=>n({target:{name:t.name,value:e.target.checked}})})):"file"===t.type?i.createElement(i.Fragment,null,i.createElement("div",{className:"fv-row mb-7"},i.createElement("div",{className:"image-input image-input-outline image-input-placeholder","data-kt-image-input":"true"},i.createElement("div",{id:"image-input-wrapper",className:"image-input-wrapper w-125px h-125px",style:{backgroundImage:"url(".concat(vu,")")}}),i.createElement("label",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"change","data-bs-toggle":"tooltip","aria-label":"Change avatar","data-bs-original-title":"Change avatar","data-kt-initialized":"1"},i.createElement("i",{className:"ki-outline ki-pencil fs-7 ms-9"}),i.createElement("input",{type:"file",name:t.name,className:"form-control form-control-solid",onChange:e=>n({target:{name:t.name,value:e.target.files[0]}})})),i.createElement("span",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"cancel","data-bs-toggle":"tooltip","aria-label":"Cancel avatar","data-bs-original-title":"Cancel avatar","data-kt-initialized":"1"},i.createElement("i",{className:"ki-outline ki-cross fs-2"}),"                                ")))):i.createElement("input",{type:t.type,name:t.name,value:e[t.name]||"",className:"form-control form-control-solid",onChange:n}))))))))))(o,t,(e=>{const{name:t,value:n}=e.target;if(l({...o,[t]:n}),"foto"===t&&console.log(n),"provinciaID"===t&&(e=>{yu=e;var t=document.getElementsByName("cantonID")[0],n=document.getElementsByName("parroquiaID")[0];t.length=0,n.length=0,e&&""!==e&&s(gu+"divisionpolitica/provincias/"+e+"/cantones").then((e=>{document.getElementsByName("parroquiaID")[0].length=0,t.add(new Option("",""));for(let n=0;n<e.length;n++)t.add(new Option(e[n].value,e[n].id));l((e=>({...e,parroquiaID:"",cantonID:""})))}))})(n),"cantonID"===t&&(e=>{Eu=e;var t=document.getElementsByName("parroquiaID")[0];t.length=0,e&&""!==e&&s(gu+"divisionpolitica/provincias/"+yu+"/cantones/"+Eu+"/parroquias").then((e=>{t.add(new Option("",""));for(let n=0;n<e.length;n++)t.add(new Option(e[n].value,e[n].id));l((e=>({...e,parroquiaID:""})))}))})(n),"foto"===t){var a=document.getElementById("image-input-wrapper");const e=n,t=new FileReader;t.onloadend=()=>{a.style.backgroundImage="url("+t.result+")"},e&&t.readAsDataURL(e)}}),((e,t,n,a)=>{const{name:r,value:i}=e.target,s=o[t].map(((e,t)=>t===n?{...e,[a||r]:i}:e));l({...o,[t]:s})}),(e=>{const n=t.find((t=>t.name===e)).fields.reduce(((e,t)=>(e[t.name]="checkbox"!==t.type&&"",e)),{});l({...o,[e]:[...o[e],n]})}),((e,t)=>{l({...o,[e]:o[e].filter(((e,n)=>n!==t))})})),a?i.createElement(i.Fragment,null):i.createElement("button",{type:"submit",id:"kt_hunt_submit",className:"btn btn-primary"},"Enviar")))},Nu=()=>{let{postulantID:e}=te();const t="https://madsis.mad.ec/api/",[n,a]=(0,i.useState)([]),[r,o]=(0,i.useState)([]),[l,s]=(0,i.useState)([]),[c,u]=(0,i.useState)([]),[m,d]=(0,i.useState)([]),[f,p]=(0,i.useState)([]),[h,b]=(0,i.useState)([]),[v,g]=(0,i.useState)([]),[y,E]=(0,i.useState)(!0),[x,w]=(0,i.useState)({}),N=async(e,t)=>{const n=await Rn.get(e);var a=[];a.push({id:"",value:""}),t(a.concat(n.data))},k=t+"hunted";(0,i.useEffect)((()=>{(async()=>{await N(t+"divisionpolitica/provincias",a),await N(t+"divisionpolitica/provincias/1/cantones",o),await N(t+"divisionpolitica/provincias/1/cantones/1/parroquias",s),await N(t+"estadocivil",u),await N(t+"gradoescolaridad",d),await N(t+"niveltecnologia",p),await N(t+"tipoparticipacion",b),await N(t+"tipotecnologia",g),e&&await(async e=>{try{return(await Rn.get(e)).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(t+"postulante/"+e).then((e=>{e&&e.length>0&&(N(t+"divisionpolitica/provincias/"+e[0].parroquia.provinciaID+"/cantones",o),N(t+"divisionpolitica/provincias/"+e[0].parroquia.provinciaID+"/cantones/"+e[0].parroquia.cantonID+"/parroquias",s),console.log(e),w(S(e[0])))})),E(!1)})()}),[]);const S=e=>{var t,n;const a=e.familiares.filter((e=>1==e.parentezcoID))[0],r=e.familiares.filter((e=>1!=e.parentezcoID)).map((e=>{var t;return{nombres:e.nombre,apellidos:e.apellidos,fechaNacimiento:null===(t=e.fechaNacimiento)||void 0===t?void 0:t.substring(0,10),gradoEscolaridad:e.gradoEscolaridadID,institucion:e.institucion}})),o=e.educaciones.map((e=>{var t;return{tipoEducacion:e.tipoID,institucion:e.institucion,nivel:e.nivelCurso,tituloObtenido:e.tituloObtenido,fechaGraduacion:null===(t=e.fechaGraduacion)||void 0===t?void 0:t.substring(0,10)}})),l=e.educacionesOtros.map((e=>{var t;return{tipoEducacion:e.tipoEducacion,nombreCurso:e.nombreCurso,institucionOtros:e.institucion,fechaOtros:null===(t=e.fecha)||void 0===t?void 0:t.substring(0,10),duracion:e.duracion,participacion:e.participacionID}})),i=e.experienciasLaborales.map((e=>{var t,n;return{empresa:e.empresa,cargo:e.cargo,fechaInicio:null===(t=e.fechaInicio)||void 0===t?void 0:t.substring(0,10),fechaFin:null===(n=e.fechaFin)||void 0===n?void 0:n.substring(0,10),functiones:e.funcionesDesempeñadas,jefeInmediato:e.jefeInmediato}})),s=e.tecnologias.map((e=>({tipoTecnologia:e.tecnologiaID,nivel:e.nivelTecnologiaID})));return{...e,lugarNacimiento:e.lugar,direcciónElectrónica:e.direccionElectronica,cantonID:e.parroquia.cantonID,provinciaID:e.parroquia.provinciaID,nombreConyugue:null==a?void 0:a.nombre,cc:null==a?void 0:a.cc,fechaNacimientoConyugue:null==a||null===(t=a.fechaNacimiento)||void 0===t?void 0:t.substring(0,10),lugar:null==a?void 0:a.lugar,ocupacion:null==a?void 0:a.ocupacion,telefono:null==a?void 0:a.telefono,nombreEmpresa:null==a?void 0:a.nombreEmpresa,fechaNacimiento:null===(n=e.fechaNacimiento)||void 0===n?void 0:n.substring(0,10),hijos_ar:r,educacion_ar:o,otrosEstudios_ar:l,experienciaLaboral_ar:i,tecnologia_ar:s}},C=[{group:"Foto",fields:[{name:"foto",label:"Foto del Postulante",type:"file"}]},{group:"1. DATOS PERSONALES DEL POSTULANTE",fields:[{name:"cargo",label:"Cargo al que se postula",type:"text"},{name:"telefonoCelular",label:"Telefono Celular",type:"text"},{name:"numeroWhatsapp",label:"Número de Whatsapp",type:"text"},{name:"nombres",label:"Nombres",type:"text"},{name:"apellidos",label:"Apellidos",type:"text"},{name:"ci",label:"C.I.",type:"text"},{name:"provinciaID",label:"Provincia",type:"select",options:n},{name:"cantonID",label:"Cantón",type:"select",options:r},{name:"parroquiaID",label:"Parroquia",type:"select",options:l},{name:"direccion",label:"Dirección",type:"text"},{name:"callePrincipal",label:"Calle Principal",type:"text"},{name:"nroCalle",label:"Nº",type:"text"},{name:"calleSecundaria",label:"Calle Secundaria",type:"text"},{name:"fechaNacimiento",label:"Fecha de Nacimiento",type:"date"},{name:"lugarNacimiento",label:"Lugar",type:"text"},{name:"estadoCivilID",label:"Estado Civil",type:"select",options:c},{name:"sabeConducir",label:"Sabe Conducir",type:"select",options:[{id:1,value:"Si"},{id:2,value:"No"}]},{name:"tipoLicencia",label:"Tipo de licencia",type:"text"},{name:"direcciónElectrónica",label:"Dirección Electrónica",type:"text"}]},{group:"A. DEL CONYUGUE o DEL COMPAÑERO",fields:[{name:"nombreConyugue",label:"Nombre",type:"text"},{name:"cc",label:"C.C.",type:"text"},{name:"fechaNacimientoConyugue",label:"Fecha de Nacimiento",type:"date"},{name:"lugar",label:"Lugar",type:"text"},{name:"ocupacion",label:"Ocupación",type:"text"},{name:"telefono",label:"Teléfono",type:"text"},{name:"nombreEmpresa",label:"Nombre de Empresa donde Labura",type:"text"}]},{type:"array",name:"hijos_ar",label:"B. HIJOS DEL POSTULANTE",group:"B. HIJOS DEL POSTULANTE",fields:[{name:"nombres",label:"Nombres",type:"text"},{name:"apellidos",label:"Apellidos",type:"text"},{name:"fechaNacimiento",label:"Fecha de Nacimiento",type:"date"},{name:"gradoEscolaridad",label:"Grado de Escolaridad",type:"select",options:m},{name:"institucion",label:"Institución",type:"text"}]},{type:"array",name:"educacion_ar",label:"2. EDUCACIÓN",group:"2. EDUCACIÓN",fields:[{name:"tipoEducacion",label:"TIPO",type:"select",options:m},{name:"institucion",label:"Institucion",type:"text"},{name:"nivel",label:"Nivel o Curso",type:"text"},{name:"tituloObtenido",label:"TÍTULO OBTENIDO",type:"text"},{name:"fechaGraduacion",label:"Fecha de Graduación",type:"date"}]},{type:"array",name:"otrosEstudios_ar",label:"A. Otros Estudios relacionados al cargo: Nota (congresos, cursos, seminarios, simposios y talleres en los cuales haya participado)",group:"A. Otros Estudios relacionados al cargo: Nota (congresos, cursos, seminarios, simposios y talleres en los cuales haya participado)",fields:[{name:"tipoEducacion",label:"Tipo",type:"text"},{name:"nombreCurso",label:"Nombre del Curso",type:"text"},{name:"institucionOtros",label:"Institucion",type:"text"},{name:"fechaOtros",label:"Fecha",type:"date"},{name:"duracion",label:"Duración",type:"text"},{name:"participacion",label:"Participación",type:"text",type:"select",options:h}]},{type:"array",name:"experienciaLaboral_ar",label:"3. EXPERIENCIA LABORAL",group:"3. EXPERIENCIA LABORAL",fields:[{name:"empresa",label:"Empresa / Institución",type:"text"},{name:"cargo",label:"Cargo",type:"text"},{name:"fechaInicio",label:"Fecha de Inicio",type:"date"},{name:"fechaFin",label:"Fecha de Fin",type:"date"},{name:"functiones",label:"Funciones desempeñadas",type:"text"},{name:"jefeInmediato",label:"Jefe Inmediato",type:"text"}]},{type:"array",name:"tecnologia_ar",label:"4. TECNOLOGÍA: Seleccione el nivel en que considere, maneja cada una de las aplicaciones o herramientas tecnológicas.",group:"4. TECNOLOGÍA: Seleccione el nivel en que considere, maneja cada una de las aplicaciones o herramientas tecnológicas.",fields:[{name:"tipoTecnologia",label:"Tipo de tenologías",type:"select",options:v},{name:"nivel",label:"Nivel",type:"select",options:f}]},{group:"",fields:[{name:"autorizacion",label:"Autorización a Market & Delivery a revisar la Información personal.",type:"checkbox"}]}];return y?i.createElement("div",null,"Cargando..."):i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-center text-center p-10"},i.createElement("div",{className:"card card-flush w-lg-750px py-5"},i.createElement("div",{className:"card-body"},i.createElement("div",{className:"mb-14"},i.createElement("a",{href:"#",className:""},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-40px"}))),i.createElement(wu,{formFields:C,actionUrl:k,preloadedData:x})))))},ku=()=>i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-center flex-column-fluid"},i.createElement("div",{className:"d-flex flex-column flex-center text-center p-10"},i.createElement("div",{className:"card card-flush w-lg-650px py-5"},i.createElement("div",{className:"card-body py-15 py-lg-20"},i.createElement("div",{className:"mb-14"},i.createElement("a",{href:"#",className:""},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-40px"}))),i.createElement("h1",{className:"fw-bolder text-gray-900 mb-5"},"Se gabró de forma exitosa su postulación."),i.createElement("div",{className:"mb-11"},i.createElement("a",{href:"/",className:"btn btn-sm btn-primary"},"Gracias")),i.createElement("div",{className:"mb-0"},i.createElement("img",{src:"/metronic8/demo39/assets/media/auth/membership.png",className:"mw-100 mh-300px theme-light-show",alt:""}),i.createElement("img",{src:"/metronic8/demo39/assets/media/auth/membership-dark.png",className:"mw-100 mh-300px theme-dark-show",alt:""}))))))),Su=()=>{const e=Z();var t;const n="https://madsis.mad.ec/api/",[a,r]=(0,i.useState)({name:"",document:"",createdAt:""});(0,i.useEffect)((()=>{t=document.getElementById("kt_modal_add_user"),new bootstrap.Modal(t),d(n+"postulante").then((e=>{l(e),console.log(e)})),(async e=>{try{const t=await Rn.get(n+"postulante/search",{params:e});l(t.data)}catch(e){console.error("Error fetching data:",e)}})(a)}),[a]);const[o,l]=(0,i.useState)([]),[s,c]=(0,i.useState)({postulanteID:"",cedula:"",nombre:"",fechaEntrevista:"",fechaContacto:"",tipoContacto:"",numeroContacto:"",apruebaRevisionDocumental:0,continua:0,aprueba:0,fechaContactoJefeInmediato:"",fechaCapacitacion:""}),u=e=>{const{name:t,value:n}=e.target;r((e=>({...e,[t]:n})))},m=e=>{const{name:t,value:n,type:a,checked:r}=e.target;c((e=>({...e,[t]:"checkbox"===a?r:n})))},d=(Y(),async e=>(await Rn.get(e)).data);return i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Reclutamiento"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Reclutamiento"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card"},i.createElement("div",{className:"card-header border-0 pt-6"},i.createElement("div",{className:"card-title"},i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("input",{type:"text",name:"name",value:a.name,onChange:u,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Buscar por nombre"}),i.createElement("input",{type:"text",name:"document",value:a.document,onChange:u,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Buscar por Cédula"}),i.createElement("input",{type:"date",name:"createdAt",value:a.createdAt,onChange:u,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Fecha de Registro"}))),i.createElement("div",{className:"card-toolbar"},i.createElement("div",{className:"d-flex justify-content-end","data-kt-user-table-toolbar":"base"},i.createElement("button",{type:"button",className:"btn btn-light-primary me-3",onClick:()=>{(async()=>{try{const e=await Rn.get(n+"postulante/excel",{responseType:"blob"}),t=window.URL.createObjectURL(new Blob([e.data])),a=document.createElement("a");a.href=t,a.download="reporte_reclutamiento.xlsx",document.body.appendChild(a),a.click(),a.remove(),window.URL.revokeObjectURL(t)}catch(e){console.error("Error:",e)}})()}},i.createElement("i",{className:"ki-outline ki-exit-up fs-2"}),"Exportar"),i.createElement("button",{type:"button",className:"btn btn-primary",onClick:e=>{e.preventDefault(),window.open("https://madsis.mad.ec/inscribirse","_blank")}},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Candidato")),i.createElement("div",{className:"d-flex justify-content-end align-items-center d-none","data-kt-user-table-toolbar":"selected"},i.createElement("div",{className:"fw-bold me-5"},i.createElement("span",{className:"me-2","data-kt-user-table-select":"selected_count"}),"Seleccionado"),i.createElement("button",{type:"button",className:"btn btn-danger","data-kt-user-table-select":"delete_selected"},"Desactivar Seleccionados")),i.createElement("div",{className:"modal fade",id:"kt_modal_export_users",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Exportar Candidatos"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 mx-xl-15 my-7"},i.createElement("form",{id:"kt_modal_export_users_form",className:"form",action:"#"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"required fs-6 fw-semibold form-label mb-2"},"Seleccionar un Formato de exportación:"),i.createElement("select",{name:"format","data-control":"select2","data-placeholder":"Seleccionar formato","data-hide-search":"true",className:"form-select form-select-solid fw-bold"},i.createElement("option",null),i.createElement("option",{value:"excel"},"Excel"))),i.createElement("div",{className:"text-center"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Enviar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_add_user",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header",id:"kt_modal_add_user_header"},i.createElement("h2",{className:"fw-bold"},"Seguimiento"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body px-5 my-7"},i.createElement("form",{id:"kt_modal_add_user_form",className:"form",onSubmit:e=>{e.preventDefault();const t={...s,apruebaRevisionDocumental:s.apruebaRevisionDocumental?1:0,continua:s.continua?1:0,aprueba:s.aprueba?1:0};Rn.put(n+"postulante/"+s.postulanteID,t,{headers:{"Content-Type":"application/json"}}).then((function(e){if(console.log("response",e),e){swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),d(n+"postulante").then((e=>{l(e)})),d(n+"update/"+s.postulanteID).then((e=>console.log(e)));const e=document.getElementById("kt_modal_add_user");bootstrap.Modal.getInstance(e).hide()}else swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{}))}},i.createElement("div",{className:"d-flex flex-column scroll-y px-5 px-lg-10",id:"kt_modal_add_user_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"true","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_add_user_header","data-kt-scroll-wrappers":"#kt_modal_add_user_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Cédula"),i.createElement("input",{type:"text",name:"cedula",value:s.cedula,onChange:m,placeholder:"Cédula",className:"form-control form-control-solid mb-3 mb-lg-0"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Nombre"),i.createElement("input",{type:"text",name:"nombre",value:s.nombre,onChange:m,placeholder:"Nombre",className:"form-control form-control-solid mb-3 mb-lg-0"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Entrevista"),i.createElement("input",{type:"date",name:"fechaEntrevista",value:s.fechaEntrevista,onChange:m,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Entrevista"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Contacto"),i.createElement("input",{type:"date",name:"fechaContacto",value:s.fechaContacto,onChange:m,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Contacto"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Tipo de Contacto"),i.createElement("select",{name:"language","aria-label":"Seleccionar un Tipo de Contacto...","data-control":"select2","data-placeholder":"Seleccionar un Tipo de Contacto...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Contacto..."),i.createElement("option",{value:"telefono"},"Telefono "),i.createElement("option",{value:"whatsapp"},"Whatsapp"))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Número de Contacto"),i.createElement("input",{type:"text",name:"numeroContacto",value:s.numeroContacto,onChange:m,placeholder:"Número de Contacto",className:"form-control form-control-solid mb-3 mb-lg-0"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"col-form-label fw-semibold fs-6"},"Aprueba  Revisión Documental"),i.createElement("div",{className:"form-check form-check-solid form-switch form-check-custom fv-row"},i.createElement("input",{className:"form-check-input w-45px h-30px",type:"checkbox",name:"apruebaRevisionDocumental",checked:s.apruebaRevisionDocumental,onChange:m}),i.createElement("label",{className:"form-check-label",htmlFor:"aprueba"}))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"col-form-label fw-semibold fs-6"},"Continua"),i.createElement("div",{className:"form-check form-check-solid form-switch form-check-custom fv-row"},i.createElement("input",{className:"form-check-input w-45px h-30px",type:"checkbox",name:"continua",checked:s.continua,onChange:m}),i.createElement("label",{className:"form-check-label",htmlFor:"continua"}))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"col-form-label fw-semibold fs-6"},"Aprueba"),i.createElement("div",{className:"form-check form-check-solid form-switch form-check-custom fv-row"},i.createElement("input",{className:"form-check-input w-45px h-30px",type:"checkbox",name:"aprueba",checked:s.aprueba,onChange:m}),i.createElement("label",{className:"form-check-label",htmlFor:"aprueba"}))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Contacto Jefe Inmediato"),i.createElement("input",{type:"date",name:"fechaContactoJefeInmediato",value:s.fechaContactoJefeInmediato,onChange:m,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Contacto Jefe Inmediato"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Capacitación"),i.createElement("input",{type:"date",name:"fechaCapacitacion",value:s.fechaCapacitacion,onChange:m,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Capacitación"}))),i.createElement("div",{className:"text-center pt-10"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))))),i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-7 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Cargo"),i.createElement("th",{className:"min-w-125px"},"Cédula"),i.createElement("th",{className:"min-w-125px"},"Nombre"),i.createElement("th",{className:"min-w-125px"},"Fecha de Contacto"),i.createElement("th",{className:"min-w-125px"},"Continua"),i.createElement("th",{className:"min-w-125px"},"Aprobación"),i.createElement("th",{className:"min-w-125px"},"Revisión Documental"),i.createElement("th",{className:"min-w-125px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},o.length>0&&i.createElement(i.Fragment,null,o.map(((t,n)=>{var a;return i.createElement("tr",{key:n},i.createElement("td",null,t.cargo),i.createElement("td",null,t.ci),i.createElement("td",null,t.nombres),i.createElement("td",null,null===(a=t.fechaContacto)||void 0===a?void 0:a.substring(0,10)),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},1==t.continua?"SI":"NO")),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},1==t.aprueba?"SI":"NO")),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},1==t.apruebaRevisionDocumental?"SI":"NO")),i.createElement("td",null,i.createElement("button",{type:"button",className:"btn btn-light-primary me-3","data-bs-toggle":"modal",onClick:()=>(e=>{c((t=>{var n,a,r,o;return{...t,postulanteID:e.postulanteID,cedula:e.ci,nombre:e.nombres+" "+e.apellidos,fechaEntrevista:null===(n=e.fechaEntrevista)||void 0===n?void 0:n.substring(0,10),fechaContacto:null===(a=e.fechaContacto)||void 0===a?void 0:a.substring(0,10),tipoContacto:e.tipoContacto,numeroContacto:e.numContacto,apruebaRevisionDocumental:e.apruebaRevisionDocumental,continua:e.continua,aprueba:e.aprueba,fechaContactoJefeInmediato:null===(r=e.fechaContactoJefeInmediato)||void 0===r?void 0:r.substring(0,10),fechaCapacitacion:null===(o=e.fechaCapacitacion)||void 0===o?void 0:o.substring(0,10)}}))})(t),"data-bs-backdrop":"static","data-bs-target":"#kt_modal_add_user"},"Seguimiento"),i.createElement("button",{type:"button",className:"btn btn-light-primary me-3",onClick:()=>(t=>{e("/candidatos/"+t.postulanteID)})(t)},"Ver")))}))))))))))},Cu=()=>{const e=Z(),t="https://madsis.mad.ec/api/",[n,a]=(0,i.useState)([]),r=e=>{const{name:t,value:n}=e.target;l((e=>({...e,[t]:n})))},[o,l]=(0,i.useState)({name:"",document:"",createdAt:"",createdAtFn:""});return(0,i.useEffect)((()=>{(async e=>(await Rn.get(e)).data)(t+"users").then((e=>{a(e)})),(async e=>{try{const n=await Rn.get(t+"users/search",{params:e});a(n.data)}catch(e){console.error("Error fetching data:",e)}})(o)}),[o]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Lista de Usuarios"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Users"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card"},i.createElement("div",{className:"card-header border-0 pt-6"},i.createElement("div",{className:"card-title"},i.createElement("div",{className:"row"},i.createElement("div",{className:"col-lg-3 col-sm-12 mb-2"},i.createElement("input",{type:"text",name:"name",value:o.name,onChange:r,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Buscar por nombre"})),i.createElement("div",{className:"col-lg-3 col-sm-12 mb-2"},i.createElement("input",{type:"text",name:"document",value:o.document,onChange:r,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Buscar por Cédula"})),i.createElement("div",{className:"col-lg-3 col-sm-12 mb-2"},i.createElement("input",{type:"date",name:"createdAt",value:o.createdAt,onChange:r,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Fecha de Registro"}),i.createElement("div",{class:"form-text"},"Fecha de Creación Inicio")),i.createElement("div",{className:"col-lg-3 col-sm-12 mb-2"},i.createElement("input",{type:"date",name:"createdAt",value:o.createdAtFn,onChange:r,className:"form-control form-control-solid flex-fill ps-5",placeholder:"Fecha de Registro"}),i.createElement("div",{class:"form-text"},"Fecha de Creación Fin")))),i.createElement("div",{className:"card-toolbar"},i.createElement("div",{className:"d-flex justify-content-end","data-kt-user-table-toolbar":"base"},i.createElement("div",{className:"menu menu-sub menu-sub-dropdown w-300px w-md-325px","data-kt-menu":"true"},i.createElement("div",{className:"px-7 py-5"},i.createElement("div",{className:"fs-5 text-gray-900 fw-bold"},"Opciones de Filtrado")),i.createElement("div",{className:"separator border-gray-200"}),i.createElement("div",{className:"px-7 py-5","data-kt-user-table-filter":"form"},i.createElement("div",{className:"mb-10"},i.createElement("label",{className:"form-label fs-6 fw-semibold"},"Fecha de Ingreso:"),i.createElement("input",{className:"form-control form-control-solid d-none",placeholder:"Escoger una fecha",id:"kt_modal_create_campaign_datepicker"})),i.createElement("div",{className:"d-flex justify-content-end"},i.createElement("button",{type:"reset",className:"btn btn-light btn-active-light-primary fw-semibold me-2 px-6","data-kt-menu-dismiss":"true","data-kt-user-table-filter":"reset"},"Limpiar"),i.createElement("button",{type:"submit",className:"btn btn-primary fw-semibold px-6","data-kt-menu-dismiss":"true","data-kt-user-table-filter":"filter"},"Aplicar"))))),i.createElement("div",{className:"d-flex justify-content-end align-items-center d-none","data-kt-user-table-toolbar":"selected"},i.createElement("div",{className:"fw-bold me-5"},i.createElement("span",{className:"me-2","data-kt-user-table-select":"selected_count"}),"Seleccionado"),i.createElement("button",{type:"button",className:"btn btn-danger","data-kt-user-table-select":"delete_selected"},"Desactivar Seleccionados")),i.createElement("div",{className:"modal fade",id:"kt_modal_export_users",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Exportar Usuarios"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 mx-xl-15 my-7"},i.createElement("form",{id:"kt_modal_export_users_form",className:"form",action:"#"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"required fs-6 fw-semibold form-label mb-2"},"Seleccionar un Formato de exportación:"),i.createElement("select",{name:"format","data-control":"select2","data-placeholder":"Seleccionar formato","data-hide-search":"true",className:"form-select form-select-solid fw-bold"},i.createElement("option",null),i.createElement("option",{value:"excel"},"Excel"),i.createElement("option",{value:"pdf"},"PDF"),i.createElement("option",{value:"cvs"},"CVS"))),i.createElement("div",{className:"text-center"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Enviar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_add_user",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header",id:"kt_modal_add_user_header"},i.createElement("h2",{className:"fw-bold"},"Agregar Usuario"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body px-5 my-7"},i.createElement("form",{id:"kt_modal_add_user_form",className:"form",action:"#"},i.createElement("div",{className:"d-flex flex-column scroll-y px-5 px-lg-10",id:"kt_modal_add_user_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"true","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_add_user_header","data-kt-scroll-wrappers":"#kt_modal_add_user_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Cargo"),i.createElement("input",{type:"text",name:"user_name",className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Ingresa el nombre del cargo"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Jefe Asignado"),i.createElement("select",{name:"language","aria-label":"Seleccionar un jefe...","data-control":"select2","data-placeholder":"Seleccionar un jefe...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un jefe..."),i.createElement("option",{value:"id"},"Usuario1 - Jefe 1"),i.createElement("option",{value:"msa"},"Usuario2 - Jefe 2")),i.createElement("div",{className:"form-text"},"Seleccionar un jefe...")),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Tipod de Convenio"),i.createElement("select",{name:"language","aria-label":"Seleccionar un tipo de convenio...","data-control":"select2","data-placeholder":"Seleccionar un tipo de convenio...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un tipo de convenio..."),i.createElement("option",{value:"id"},"FUCAP "),i.createElement("option",{value:"msa"},"GECAP"),i.createElement("option",{value:"msa"},"MARKET"),i.createElement("option",{value:"msa"},"OTROS..")),i.createElement("div",{className:"form-text"},"Seleccionar un tipo de convenio...")),i.createElement("div",{className:"mb-5"},i.createElement("label",{className:"required fw-semibold fs-6 mb-5"},"Rol"),i.createElement("div",{className:"d-flex fv-row"},i.createElement("div",{className:"form-check form-check-custom form-check-solid"},i.createElement("input",{className:"form-check-input me-3",name:"user_role",type:"radio",value:"0",id:"kt_modal_update_role_option_0"}),i.createElement("label",{className:"form-check-label",htmlFor:"kt_modal_update_role_option_0"},i.createElement("div",{className:"fw-bold text-gray-800"},"Jefe de Grupo"),i.createElement("div",{className:"text-gray-600"},"Figura clave de un grupo de trabajo, encargado de dirigir el proceso de planificación, ejecución, control y supervisión de las labores")))),i.createElement("div",{className:"separator separator-dashed my-5"}))),i.createElement("div",{className:"text-center pt-10"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))))),i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Usuario"),i.createElement("th",{className:"min-w-125px"},"Nombres"),i.createElement("th",{className:"min-w-125px"},"Estado"),i.createElement("th",{className:"min-w-125px"},"Correo"),i.createElement("th",{className:"min-w-125px"},"Cargo"),i.createElement("th",{className:"min-w-125px"},"Role Asignado"),i.createElement("th",{className:"min-w-125px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},n.length>0&&i.createElement(i.Fragment,null,n.map(((t,n)=>i.createElement(i.Fragment,null,i.createElement("tr",{key:t.id||n},i.createElement("td",null,t.ci),i.createElement("td",{className:"d-flex align-items-center"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("a",{href:"account/settings.html",className:"text-gray-800 text-hover-primary mb-1"},t.nombres),i.createElement("span",null,t.apellidos))),i.createElement("td",null,0==t.habilitado?"Habilitado":"Deshabilitado"),i.createElement("td",null,t.direccionElectronica),i.createElement("td",null,t.cargo),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},t.userRoles[0].role.roleName)),i.createElement("td",null,i.createElement("a",{onClick:()=>(t=>{e("/usuarios/personal/"+t.userID)})(t),className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Editar",i.createElement("i",{className:"ki-outline fs-5 ms-1"}))),i.createElement("td",null,i.createElement("a",{onClick:()=>(e=>{window.open("/usuarioexterno/personal/"+e.userID,"_blank")})(t),className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Formulario Web",i.createElement("i",{className:"ki-outline fs-5 ms-1"})))))))))))))))},_u=()=>{const[e,t]=(0,i.useState)("https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"),n={backgroundImage:"url("+e+")"};let{userID:a}=te();const r=Z(),o="https://madsis.mad.ec/api/",[l,s]=(0,i.useState)({}),[c,u]=(0,i.useState)(null),[m,d]=(0,i.useState)([]),[f,p]=(0,i.useState)([]),[h,b]=(0,i.useState)(""),[v,g]=(0,i.useState)(""),[y,E]=(0,i.useState)(""),x=e=>{const{name:t,value:n}=e.target;"bossID"==t&&w(o+"users/"+a+"/updboss/"+n),"rolID"==t&&(g(n),w(o+"users/"+a+"/updrole/"+n))},w=e=>{Rn.put(e).then((function(e){e?swal.fire({text:"Se grabó correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{}))},N=async e=>{try{return(await Rn.get(e)).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}};(0,i.useEffect)((()=>{N(o+"roles").then((e=>{d(e),console.log("ROLES",e)})).catch((e=>console.error("Error al obtener los datos:",e))),(async e=>(await Rn.get(e)).data)(o+"users/"+a).then((e=>{if(Array.isArray(e.userRoles)&&e.userRoles.length>0){var n;const t=null===(n=e.userRoles[0].role)||void 0===n?void 0:n.roleID;var a;void 0!==t&&(console.log("rile",e.userRoles[0].role),g(t),E(null===(a=e.userRoles[0].role)||void 0===a?void 0:a.description))}b(e.jefeInmediato),s(e);const r=new Date(e.fechaNacimiento),l=r.getFullYear(),i=String(r.getMonth()+1).padStart(2,"0"),c=String(r.getDate()).padStart(2,"0"),u="".concat(l,"-").concat(i,"-").concat(c);s((e=>({...e,fechaNacimiento:u}))),(e=>{if(e.archivos.length>0){var n=e.archivos.find((e=>1===e.tipoArchivoID));if(n){var a=o+"archivo/"+n.archivoID;t(a)}}})(e)})),N(o+"users").then((e=>{p(e)})).catch((e=>console.error("Error al obtener los datos:",e)))}),[]);const k=e=>{const{name:n,value:a,type:r,checked:o,files:l}=e.target;if("file"===r){if(l.length>0){const e=l[0],n=new FileReader;n.onloadend=()=>{t(n.result)},n.readAsDataURL(e),s((t=>({...t,foto:e})))}}else s((e=>({...e,[n]:"checkbox"===r?o:a})))};return i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Detalle"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"},i.createElement("a",{href:"/usuarios",className:"btn btn-flex btn-outline btn-color-gray-700 btn-active-color-primary bg-body h-40px fs-7 fw-bold"},"Regresar a Gestión de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:e,alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},l.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),y),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),l.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),l.direccionElectronica)))),i.createElement("div",{className:"d-flex flex-wrap flex-stack"},i.createElement("div",{className:"d-flex flex-column flex-grow-1 pe-8"},i.createElement("div",{className:"d-flex flex-wrap"},i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("select",{name:"bossID",value:h,onChange:x,className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar Jefe..."),f&&f.length>0&&f.map(((e,t)=>i.createElement("option",{key:t,value:e.userID},e.nombres))))),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Jefe Inmediato")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("select",{name:"rolID",value:v,onChange:x,className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar Rol..."),m&&m.length>0&&m.map(((e,t)=>i.createElement("option",{key:t,value:e.roleID},e.description))))),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Rol"))))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{r("/usuarios/personal/"+a)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{r("/usuarios/familiar/"+a)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{r("/usuarios/documentos/"+a)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles del perfil"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",className:"form",onSubmit:e=>{e.preventDefault();let t=new FormData;for(let e in l)l.hasOwnProperty(e)&&(l[e]instanceof File?t.append(e,l[e]):"object"==typeof l[e]?t.append(e,JSON.stringify(l[e])):t.append(e,l[e]));console.log(l),Rn.put(o+"users/"+a+"/personal",t,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){e?swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{}))}},i.createElement("div",{className:"card-body border-top p-9"},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Foto"),i.createElement("div",{className:"col-lg-8"},i.createElement("div",{className:"image-input image-input-outline","data-kt-image-input":"true",style:n},i.createElement("div",{className:"image-input-wrapper w-125px h-125px",style:n}),i.createElement("label",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"change","data-bs-toggle":"tooltip",title:"Change avatar"},i.createElement("i",{className:"ki-outline ki-pencil fs-7"}),i.createElement("input",{type:"file",name:"foto",onChange:k,accept:".png, .jpg, .jpeg"}),i.createElement("input",{type:"hidden",name:"avatar_remove"})),i.createElement("span",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"cancel","data-bs-toggle":"tooltip",title:"Cancel avatar"},i.createElement("i",{className:"ki-outline ki-cross fs-2"}))),i.createElement("div",{className:"form-text"},"Tipos de Archivo permitido: png, jpg, jpeg."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nacionalidad"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"nacionalidad",className:"form-control form-control-lg form-control-solid",placeholder:"Nacionalidad",onChange:k,value:l.nacionalidad}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoDocumentoID","aria-label":"Seleccionar un documento...",value:l.tipoDocumentoID,"data-control":"select2",onChange:k,"data-placeholder":"Seleccionar un documento...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un documento..."),i.createElement("option",{value:"1"},"Cédula de Identidad"),i.createElement("option",{value:"2"},"Pasaporte")),i.createElement("div",{className:"form-text"},"Seleccionar un documento..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Número de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"ci",value:l.ci,className:"form-control form-control-lg form-control-solid",onChange:k,placeholder:"Ingrese su número de documento"}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nombres y Apellidos"),i.createElement("div",{className:"col-lg-8"},i.createElement("div",{className:"row"},i.createElement("div",{className:"col-lg-6 fv-row"},i.createElement("input",{type:"text",name:"nombres",className:"form-control form-control-lg form-control-solid mb-3 mb-lg-0",onChange:k,placeholder:"Nombres",value:l.nombres})),i.createElement("div",{className:"col-lg-6 fv-row"},i.createElement("input",{type:"text",name:"apellidos",className:"form-control form-control-lg form-control-solid",onChange:k,placeholder:"Apellidos",value:l.apellidos}))))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Correo electrónico"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"direccionElectronica",className:"form-control form-control-lg form-control-solid",onChange:k,placeholder:"Ingrese un correo electrónico",value:l.direccionElectronica}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Fecha de Nacimiento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{className:"form-control form-control-solid flatpickr-input active",name:"fechaNacimiento",placeholder:"Escoger una fecha",onChange:k,type:"date",value:l.fechaNacimiento}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},i.createElement("span",{className:"required"},"Edad"),i.createElement("span",{className:"ms-1","data-bs-toggle":"tooltip",title:"Debe ser un número positivo y entero."},i.createElement("i",{className:"ki-outline ki-information-5 text-gray-500 fs-6"}))),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"edad",className:"form-control form-control-lg form-control-solid",onChange:k,placeholder:"Edad",value:l.edad}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Sexo"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"sexo","aria-label":"Seleccionar género...",value:l.sexo,onChange:k,"data-placeholder":"Seleccionar género...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar género..."),i.createElement("option",{value:"M"},"Masculino"),i.createElement("option",{value:"F"},"Femenino")),i.createElement("div",{className:"form-text"},"Seleccionar género..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Estado Civil"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"language","aria-label":"Seleccionar estado civil...",value:l.estadoCivilID,onChange:k,"data-placeholder":"Seleccionar estado civil...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar estado civil..."),i.createElement("option",{value:"1"},"CASADO"),i.createElement("option",{value:"2"},"SOLTERO"),i.createElement("option",{value:"3"},"DIVORCIADO"),i.createElement("option",{value:"4"},"SEPARADO"),i.createElement("option",{value:"5"},"VIUDO"),i.createElement("option",{value:"6"},"COMPROMISO"),i.createElement("option",{value:"7"},"UNION DE HECHO")),i.createElement("div",{className:"form-text"},"Seleccionar estado civil...")))),i.createElement("div",{className:"card-footer d-flex justify-content-end py-6 px-9"},i.createElement("button",{type:"submit",className:"btn btn-primary",id:"kt_account_profile_details_submit"},"Grabar Cambios"))))))))},Ru=()=>{var e;const[t,n]=(0,i.useState)("https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png");let{userID:a}=te();const r=Z(),[o,l]=(0,i.useState)({}),s="https://madsis.mad.ec/api/",[c,u]=(0,i.useState)([]),[m,d]=(0,i.useState)([]),[f,p]=(0,i.useState)([]),[h,b]=(0,i.useState)(""),[v,g]=(0,i.useState)([]),y=async e=>(await Rn.get(e)).data,E=e=>{e.preventDefault(),o.familiarID?Rn.put(s+"familiar/"+o.familiarID,{nombre:o.nombre,apellidos:o.apellidos,tipoDocumentoID:o.tipoDocumentoID,cc:o.cc,contactoEmergencia:o.contactoEmergencia,parentezcoID:o.parentezcoID,direccion:o.direccion,telefono:o.telefono,telefono1:o.telefono1,telefono2:o.telefono2,parroquiaID:o.parroquiaID,callePrimaria:o.callePrimaria,calleSecundaria:o.calleSecundaria,numeracion:o.numeracion,referencia:o.referencia},{headers:{"Content-Type":"application/json"}}).then((function(e){console.log("response",e),e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),y(s+"familiar/"+a+"/user").then((e=>{g(e)}))):(console.log("error1",error1),swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}))})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{document.getElementById("closeMd").click()})):Rn.post(s+"familiar/"+a+"/user",{nombre:o.nombre,apellidos:o.apellidos,tipoDocumentoID:o.tipoDocumentoID,cc:o.cc,contactoEmergencia:o.contactoEmergencia,parentezcoID:o.parentezcoID,direccion:o.direccion,telefono:o.telefono,telefono1:o.telefono1,telefono2:o.telefono2,parroquiaID:o.parroquiaID,callePrimaria:o.callePrimaria,calleSecundaria:o.calleSecundaria,numeracion:o.numeracion,referencia:o.referencia},{headers:{"Content-Type":"application/json"}}).then((function(e){console.log("response",e),e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),y(s+"familiar/"+a+"/user").then((e=>{g(e)}))):(console.log("error1",error1),swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}))})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{document.getElementById("closeMd").click()}))},x=e=>{const{name:t,value:n}=e.target;l({...o,[t]:n}),console.log(n),console.log(t),"provinciaID"===t&&k(n),"cantonID"===t&&N(n)},w=async e=>(await Rn.get(e)).data,N=t=>{e=t;var n=document.getElementsByName("provinciaID")[0],a=n.options[n.selectedIndex],r=document.getElementsByName("parroquiaID")[0];r.length=0,t&&""!==t&&w(s+"divisionpolitica/provincias/"+a.value+"/cantones/"+e+"/parroquias").then((e=>{r.add(new Option("",""));for(let t=0;t<e.length;t++)r.add(new Option(e[t].value,e[t].id));l((e=>({...e,parroquiaID:""})))}))},k=e=>{var t=document.getElementsByName("cantonID")[0],n=document.getElementsByName("parroquiaID")[0];t.length=0,n.length=0,e&&""!==e&&w(s+"divisionpolitica/provincias/"+e+"/cantones").then((e=>{document.getElementsByName("parroquiaID")[0].length=0,t.add(new Option("",""));for(let n=0;n<e.length;n++)t.add(new Option(e[n].value,e[n].id));l((e=>({...e,parroquiaID:"",cantonID:""})))}))};return(0,i.useEffect)((()=>{y(s+"divisionpolitica/provincias").then((e=>p(e))),y(s+"divisionpolitica/provincias/1/cantones").then((e=>u(e))),y(s+"divisionpolitica/provincias/1/cantones/1/parroquias").then((e=>d(e))),y(s+"users/"+a).then((e=>{b(e),(e=>{if(e.archivos.length>0){var t=e.archivos.find((e=>1===e.tipoArchivoID));if(t){var a=s+"archivo/"+t.archivoID;n(a)}}})(e)})),y(s+"familiar/"+a+"/user").then((e=>{g(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Detalle"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"},i.createElement("a",{href:"/usuarios",className:"btn btn-flex btn-outline btn-color-gray-700 btn-active-color-primary bg-body h-40px fs-7 fw-bold"},"Regresar a Gestión de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:t,alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},h.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),h.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),h.direccionElectronica)))),i.createElement("div",{className:"d-flex flex-wrap flex-stack"},i.createElement("div",{className:"d-flex flex-column flex-grow-1 pe-8"},i.createElement("div",{className:"d-flex flex-wrap"},i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"$"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Ganacias")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-down fs-3 text-danger me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Prospectos")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"%"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Tasa de Conversión"))))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{r("/usuarios/personal/"+a)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{r("/usuarios/familiar/"+a)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{r("/usuarios/documentos/"+a)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles de la familia")),i.createElement("div",{className:"card-toolbar"},i.createElement("a",{className:"btn btn-flex btn-primary",onClick:()=>{document.getElementById("kt_modal_add_user_familiar_form").reset(),l({}),new bootstrap.Modal(document.getElementById("kt_modal_users_search"),{keyboard:!1}).show()}},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Familiar"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",onSubmit:E,className:"form"},i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Cédula"),i.createElement("th",{className:"min-w-125px"},"Nombres"),i.createElement("th",{className:"min-w-125px"},"Apellidos"),i.createElement("th",{className:"min-w-125px"},"Parentezco"),i.createElement("th",{className:"min-w-125px"},"Telefono 1"),i.createElement("th",{className:"min-w-125px"},"Telefono 2"),i.createElement("th",{className:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},v.length>0&&i.createElement(i.Fragment,null,v.map(((e,t)=>i.createElement(i.Fragment,null,i.createElement("tr",{key:e.id||t},i.createElement("td",null,e.cc),i.createElement("td",null,e.nombre),i.createElement("td",null,e.apellidos),i.createElement("td",null,e.parentezco.descripcion),i.createElement("td",null,e.telefono),i.createElement("td",null,e.telefono1),i.createElement("td",{className:"text-end"},i.createElement("a",{onClick:()=>{return t=e,document.getElementById("kt_modal_add_user_familiar_form").reset(),console.log("data",t),l(t),void new bootstrap.Modal(document.getElementById("kt_modal_users_search"),{keyboard:!1}).show();var t},className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Editar"))))))))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_users_search",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header pb-0 border-0 justify-content-end"},i.createElement("div",{className:"btn btn-sm btn-icon btn-active-color-primary",id:"closeMd","data-bs-dismiss":"modal"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 mx-xl-18 pt-0 pb-15"},i.createElement("div",{className:"text-center mb-13"},i.createElement("h1",{className:"mb-3"},"Agregar Familiar")),i.createElement("form",{id:"kt_modal_add_user_familiar_form",className:"form",onSubmit:E},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nombres"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"nombre",className:"form-control form-control-lg form-control-solid",placeholder:"Nombres",onChange:x,value:o.nombre}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Apellidos"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"apellidos",className:"form-control form-control-lg form-control-solid",placeholder:"Apellidos",onChange:x,value:o.apellidos}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoDocumentoID","aria-label":"Seleccionar un Tipo de Documento...",value:o.tipoDocumentoID,"data-control":"select2",onChange:x,"data-placeholder":"Seleccionar un Tipo de Documento...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Documento..."),i.createElement("option",{value:"1"},"Cédula"),i.createElement("option",{value:"2"},"Pasaporte")))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Cédula"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"cc",className:"form-control form-control-lg form-control-solid",placeholder:"Cédula",onChange:x,value:o.cc}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Tipo de Contacto"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"contactoEmergencia","aria-label":"Seleccionar un Tipo de Contacto...",value:o.contactoEmergencia,onChange:x,"data-control":"select2","data-placeholder":"Seleccionar un Tipo de Contacto...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Contacto..."),i.createElement("option",{value:"1"},"Contacto de Emergencia1"),i.createElement("option",{value:"2"},"Contacto de Emergencia2")),i.createElement("div",{className:"form-text"},"Solo en el caso de que sea un contacto de emergencia."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Parentezco"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"parentezcoID","aria-label":"Seleccionar un Parentezco...",value:o.parentezcoID,"data-control":"select2",onChange:x,"data-placeholder":"Seleccionar un Parentezco...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Parentezco..."),i.createElement("option",{value:"1"},"Cónyugue"),i.createElement("option",{value:"2"},"Madre"),i.createElement("option",{value:"3"},"Padre"),i.createElement("option",{value:"4"},"Hijo")),i.createElement("div",{className:"form-text"},"Seleccionar un Parentezco..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Dirección"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"direccion",className:"form-control form-control-lg form-control-solid",placeholder:"Dirección",onChange:x,value:o.direccion}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Teléfono celular"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"telefono",className:"form-control form-control-lg form-control-solid",placeholder:"Teléfono celular",onChange:x,value:o.telefono}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Teléfono Opcional"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"telefono1",className:"form-control form-control-lg form-control-solid",placeholder:"Teléfono Opcional",onChange:x,value:o.telefono1}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Teléfono con Whatsapp"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"telefono2",className:"form-control form-control-lg form-control-solid",placeholder:"Teléfono con Whatsapp",onChange:x,value:o.telefono2}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Provincias"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"provinciaID","aria-label":"Seleccionar una Provincia...",value:o.provinciaID,onChange:x,"data-control":"select2","data-placeholder":"Seleccionar una Provincia...",className:"form-select form-select-solid form-select-lg"},f.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))),i.createElement("div",{className:"form-text"},"Seleccionar una Provincia..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Canton"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"cantonID","aria-label":"Seleccionar un Canton...","data-control":"select2",value:o.cantonID,onChange:x,"data-placeholder":"Seleccionar un Canton...",className:"form-select form-select-solid form-select-lg"},c.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))),i.createElement("div",{className:"form-text"},"Seleccionar un Canton..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Parroquia"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"parroquiaID","aria-label":"Seleccionar una Parroquia...","data-control":"select2",value:o.parroquiaID,onChange:x,"data-placeholder":"Seleccionar una Parroquia...",className:"form-select form-select-solid form-select-lg"},m.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))),i.createElement("div",{className:"form-text"},"Seleccionar una Parroquia..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Calle Primaria"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"callePrimaria",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Calle Primaria",value:o.callePrimaria}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Calle Secundaria"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"calleSecundaria",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Calle Secundaria",value:o.calleSecundaria}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Numeración"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"numeracion",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Numeración",value:o.numeracion}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Referencia"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"referencia",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Referencia",value:o.referencia}))),i.createElement("div",{className:"d-flex justify-content-center"},i.createElement("button",{type:"submit",className:"btn btn-lg btn-primary"},"Grabar Cambios"))))))))},Pu=()=>{let{userID:e}=te();const[t,n]=(0,i.useState)("https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"),a=Z(),r="https://madsis.mad.ec/api/",[o,l]=(0,i.useState)({}),[s,c]=(0,i.useState)({}),[u,m]=(0,i.useState)([]),d=async e=>(await Rn.get(e)).data,f=e=>{const{name:t,value:n,type:a,checked:r,files:o}=e.target;if("file"===a){const e=o[0];o.length>0&&l((t=>({...t,foto:e})))}else l((e=>({...e,[t]:"checkbox"===a?r:n})))};return(0,i.useEffect)((()=>{d(r+"users/"+e).then((e=>{c(e),(e=>{if(e.archivos.length>0){var t=e.archivos.find((e=>1===e.tipoArchivoID));if(t){var a=r+"archivo/"+t.archivoID;n(a)}}})(e)})),d(r+"archivo/"+e+"/user").then((e=>{m(e),console.log(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Detalle"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"},i.createElement("a",{href:"/usuarios",className:"btn btn-flex btn-outline btn-color-gray-700 btn-active-color-primary bg-body h-40px fs-7 fw-bold"},"Ir a Gestión de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:t,alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},s.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),s.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),s.direccionElectronica)))),i.createElement("div",{className:"d-flex flex-wrap flex-stack"},i.createElement("div",{className:"d-flex flex-column flex-grow-1 pe-8"},i.createElement("div",{className:"d-flex flex-wrap"},i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"$"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Ganacias")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-down fs-3 text-danger me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Prospectos")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"%"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Tasa de Conversión"))))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{a("/usuarios/personal/"+e)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{a("/usuarios/familiar/"+e)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{a("/usuarios/documentos/"+e)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles de los archivos de la persona")),i.createElement("div",{className:"card-toolbar"},i.createElement("button",{className:"btn btn-flex btn-primary","data-bs-toggle":"modal","data-bs-target":"#kt_modal_upload"},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Archivos"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",className:"form"},i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Nombre"),i.createElement("th",{className:"min-w-125px"},"Extension"),i.createElement("th",{className:"min-w-125px"},"Tipo de Archivo"),i.createElement("th",{className:"min-w-125px"},"Fecha de Creación"),i.createElement("th",{className:"min-w-125px"},"Peso"),i.createElement("th",{className:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},u.length>0&&i.createElement(i.Fragment,null,u.map(((e,t)=>i.createElement(i.Fragment,null,i.createElement("tr",{key:e.id||t},i.createElement("td",null,e.fileName),i.createElement("td",null,e.fileExtension),i.createElement("td",null,e.tipoArchivo.descripcion),i.createElement("td",null,e.createdAt.substring(0,10)),i.createElement("td",null,(e.fileSize/1024).toFixed(2)," ","KB"),i.createElement("td",{className:"text-end"},i.createElement("a",{onClick:()=>(async e=>{try{const t=await Rn.get(r+"archivo/"+e.archivoID,{responseType:"blob"}),n=window.URL.createObjectURL(new Blob([t.data])),a=document.createElement("a");a.href=n,a.setAttribute("download",e.fileName),document.body.appendChild(a),a.click(),a.remove(),window.URL.revokeObjectURL(n)}catch(e){console.error("There was a problem with the axios operation:",e)}})(e),className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Descargar"))))))))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_upload",tabindex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("form",{className:"form",action:"none",id:"kt_modal_upload_form",onSubmit:t=>{t.preventDefault();let n=new FormData;for(let e in o)o.hasOwnProperty(e)&&(o[e]instanceof File?n.append(e,o[e]):"object"==typeof o[e]?n.append(e,JSON.stringify(o[e])):n.append(e,o[e]));console.log(o),Rn.post(r+"archivo/"+e+"/user",n,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){e?swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{d(r+"archivo/"+e+"/user").then((e=>{m(e),console.log(e)})),document.getElementById("mdlClose").click()}))}},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Subir Archivos"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary",id:"mdlClose","data-bs-dismiss":"modal"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body pt-10 pb-15 px-lg-17"},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Archivo"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoArchivoID",value:o.tipoArchivoID,onChange:f,"aria-label":"Seleccionar un Tipo de Archivo...","data-control":"select2","data-placeholder":"Seleccionar un Tipo de Archivo...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Archivo..."),i.createElement("option",{value:"1"},"Foto Personal"),i.createElement("option",{value:"2"},"Cédula de Identidad Anverso y Reverso"),i.createElement("option",{value:"3"},"Papeleta de votación"),i.createElement("option",{value:"4"},"Licencia de conducir Anverso y Reverso"),i.createElement("option",{value:"5"},"Certificado médico"),i.createElement("option",{value:"6"},"Otros")))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("input",{type:"file",name:"foto",onChange:f,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Ingresa archivo"}),i.createElement("span",{className:"form-text fs-6 text-muted"},"Peso máximo por archivo 4MB.")),i.createElement("div",{className:"d-flex justify-content-center"},i.createElement("button",{type:"reset",className:"btn btn-lg btn-light fw-bold btn-active-light-primary me-2","data-kt-search-element":"preferences-dismiss"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-lg btn-primary"},"Grabar Cambios"))))))))},Tu=()=>{const[e,t]=(0,i.useState)("https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"),n={backgroundImage:"url("+e+")"};let{userID:a}=te();const r=Z(),o="https://madsis.mad.ec/api/",[l,s]=(0,i.useState)({}),[c,u]=(0,i.useState)(null);(0,i.useEffect)((()=>{(async e=>(await Rn.get(e)).data)(o+"users/"+a).then((e=>{s(e);const n=new Date(e.fechaNacimiento),a=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),l=String(n.getDate()).padStart(2,"0"),i="".concat(a,"-").concat(r,"-").concat(l);s((e=>({...e,fechaNacimiento:i}))),(e=>{if(e.archivos.length>0){var n=e.archivos.find((e=>1===e.tipoArchivoID));if(n){var a=o+"archivo/"+n.archivoID;t(a)}}})(e)}))}),[]);const m=e=>{const{name:n,value:a,type:r,checked:o,files:l}=e.target;if("file"===r){if(l.length>0){const e=l[0],n=new FileReader;n.onloadend=()=>{t(n.result)},n.readAsDataURL(e),s((t=>({...t,foto:e})))}}else s((e=>({...e,[n]:"checkbox"===r?o:a})))};return i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-center text-center p-10"},i.createElement("div",{className:"card card-flush w-lg-750px py-5"},i.createElement("div",{className:"card-body"},i.createElement("div",{className:"mb-14"},i.createElement("a",{href:"#",className:""},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-40px"}))),i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:e,alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},l.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),l.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),l.direccionElectronica)))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{r("/usuarioexterno/personal/"+a)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{r("/usuarioexterno/familiar/"+a)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{r("/usuarioexterno/documentos/"+a)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles del perfil"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",className:"form",onSubmit:e=>{e.preventDefault();let t=new FormData;for(let e in l)l.hasOwnProperty(e)&&(l[e]instanceof File?t.append(e,l[e]):"object"==typeof l[e]?t.append(e,JSON.stringify(l[e])):t.append(e,l[e]));console.log(l),Rn.put(o+"users/"+a+"/personal",t,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){e?swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{}))}},i.createElement("div",{className:"card-body border-top p-9"},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Foto"),i.createElement("div",{className:"col-lg-8"},i.createElement("div",{className:"image-input image-input-outline","data-kt-image-input":"true",style:n},i.createElement("div",{className:"image-input-wrapper w-125px h-125px",style:n}),i.createElement("label",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"change","data-bs-toggle":"tooltip",title:"Change avatar"},i.createElement("i",{className:"ki-outline ki-pencil fs-7"}),i.createElement("input",{type:"file",name:"foto",onChange:m,accept:".png, .jpg, .jpeg"}),i.createElement("input",{type:"hidden",name:"avatar_remove"})),i.createElement("span",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"cancel","data-bs-toggle":"tooltip",title:"Cancel avatar"},i.createElement("i",{className:"ki-outline ki-cross fs-2"}))),i.createElement("div",{className:"form-text"},"Tipos de Archivo permitido: png, jpg, jpeg."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nacionalidad"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"nacionalidad",className:"form-control form-control-lg form-control-solid",placeholder:"Nacionalidad",onChange:m,value:l.nacionalidad}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoDocumentoID","aria-label":"Seleccionar un documento...",value:l.tipoDocumentoID,"data-control":"select2",onChange:m,"data-placeholder":"Seleccionar un documento...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un documento..."),i.createElement("option",{value:"1"},"Cédula de Identidad"),i.createElement("option",{value:"2"},"Pasaporte")),i.createElement("div",{className:"form-text"},"Seleccionar un documento..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Número de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"ci",value:l.ci,className:"form-control form-control-lg form-control-solid",onChange:m,placeholder:"Ingrese su número de documento"}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nombres y Apellidos"),i.createElement("div",{className:"col-lg-8"},i.createElement("div",{className:"row"},i.createElement("div",{className:"col-lg-6 fv-row"},i.createElement("input",{type:"text",name:"nombres",className:"form-control form-control-lg form-control-solid mb-3 mb-lg-0",onChange:m,placeholder:"Nombres",value:l.nombres})),i.createElement("div",{className:"col-lg-6 fv-row"},i.createElement("input",{type:"text",name:"apellidos",className:"form-control form-control-lg form-control-solid",onChange:m,placeholder:"Apellidos",value:l.apellidos}))))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Correo electrónico"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"direccionElectronica",className:"form-control form-control-lg form-control-solid",onChange:m,placeholder:"Ingrese un correo electrónico",value:l.direccionElectronica}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Fecha de Nacimiento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{className:"form-control form-control-solid flatpickr-input active",name:"fechaNacimiento",placeholder:"Escoger una fecha",onChange:m,type:"date",value:l.fechaNacimiento}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},i.createElement("span",{className:"required"},"Edad"),i.createElement("span",{className:"ms-1","data-bs-toggle":"tooltip",title:"Debe ser un número positivo y entero."},i.createElement("i",{className:"ki-outline ki-information-5 text-gray-500 fs-6"}))),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"edad",className:"form-control form-control-lg form-control-solid",onChange:m,placeholder:"Edad",value:l.edad}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Sexo"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"sexo","aria-label":"Seleccionar género...",value:l.sexo,onChange:m,"data-placeholder":"Seleccionar género...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar género..."),i.createElement("option",{value:"M"},"Masculino"),i.createElement("option",{value:"F"},"Femenino")),i.createElement("div",{className:"form-text"},"Seleccionar género..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Estado Civil"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"language","aria-label":"Seleccionar estado civil...",value:l.estadoCivilID,onChange:m,"data-placeholder":"Seleccionar estado civil...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar estado civil..."),i.createElement("option",{value:"1"},"CASADO"),i.createElement("option",{value:"2"},"SOLTERO"),i.createElement("option",{value:"3"},"DIVORCIADO"),i.createElement("option",{value:"4"},"SEPARADO"),i.createElement("option",{value:"5"},"VIUDO"),i.createElement("option",{value:"6"},"COMPROMISO"),i.createElement("option",{value:"7"},"UNION DE HECHO")),i.createElement("div",{className:"form-text"},"Seleccionar estado civil...")))),i.createElement("div",{className:"card-footer d-flex justify-content-end py-6 px-9"},i.createElement("button",{type:"submit",className:"btn btn-primary",id:"kt_account_profile_details_submit"},"Grabar Cambios")))))))))))},Ou=()=>{var e;const[t,n]=(0,i.useState)("https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png");let{userID:a}=te();const r=Z(),[o,l]=(0,i.useState)({}),s="https://madsis.mad.ec/api/",[c,u]=(0,i.useState)([]),[m,d]=(0,i.useState)([]),[f,p]=(0,i.useState)([]),[h,b]=(0,i.useState)(""),[v,g]=(0,i.useState)([]),y=async e=>(await Rn.get(e)).data,E=e=>{e.preventDefault(),o.familiarID?Rn.put(s+"familiar/"+o.familiarID,{nombre:o.nombre,apellidos:o.apellidos,tipoDocumentoID:o.tipoDocumentoID,cc:o.cc,contactoEmergencia:o.contactoEmergencia,parentezcoID:o.parentezcoID,direccion:o.direccion,telefono:o.telefono,telefono1:o.telefono1,telefono2:o.telefono2,parroquiaID:o.parroquiaID,callePrimaria:o.callePrimaria,calleSecundaria:o.calleSecundaria,numeracion:o.numeracion,referencia:o.referencia},{headers:{"Content-Type":"application/json"}}).then((function(e){console.log("response",e),e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),y(s+"familiar/"+a+"/user").then((e=>{g(e)}))):(console.log("error1",error1),swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}))})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{document.getElementById("closeMd").click()})):Rn.post(s+"familiar/"+a+"/user",{nombre:o.nombre,apellidos:o.apellidos,tipoDocumentoID:o.tipoDocumentoID,cc:o.cc,contactoEmergencia:o.contactoEmergencia,parentezcoID:o.parentezcoID,direccion:o.direccion,telefono:o.telefono,telefono1:o.telefono1,telefono2:o.telefono2,parroquiaID:o.parroquiaID,callePrimaria:o.callePrimaria,calleSecundaria:o.calleSecundaria,numeracion:o.numeracion,referencia:o.referencia},{headers:{"Content-Type":"application/json"}}).then((function(e){console.log("response",e),e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),y(s+"familiar/"+a+"/user").then((e=>{g(e)}))):(console.log("error1",error1),swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}))})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{document.getElementById("closeMd").click()}))},x=e=>{const{name:t,value:n}=e.target;l({...o,[t]:n}),console.log(n),console.log(t),"provinciaID"===t&&k(n),"cantonID"===t&&N(n)},w=async e=>(await Rn.get(e)).data,N=t=>{e=t;var n=document.getElementsByName("provinciaID")[0],a=n.options[n.selectedIndex],r=document.getElementsByName("parroquiaID")[0];r.length=0,t&&""!==t&&w(s+"divisionpolitica/provincias/"+a.value+"/cantones/"+e+"/parroquias").then((e=>{r.add(new Option("",""));for(let t=0;t<e.length;t++)r.add(new Option(e[t].value,e[t].id));l((e=>({...e,parroquiaID:""})))}))},k=e=>{var t=document.getElementsByName("cantonID")[0],n=document.getElementsByName("parroquiaID")[0];t.length=0,n.length=0,e&&""!==e&&w(s+"divisionpolitica/provincias/"+e+"/cantones").then((e=>{document.getElementsByName("parroquiaID")[0].length=0,t.add(new Option("",""));for(let n=0;n<e.length;n++)t.add(new Option(e[n].value,e[n].id));l((e=>({...e,parroquiaID:"",cantonID:""})))}))};return(0,i.useEffect)((()=>{y(s+"divisionpolitica/provincias").then((e=>p(e))),y(s+"divisionpolitica/provincias/1/cantones").then((e=>u(e))),y(s+"divisionpolitica/provincias/1/cantones/1/parroquias").then((e=>d(e))),y(s+"users/"+a).then((e=>{b(e),(e=>{if(e.archivos.length>0){var t=e.archivos.find((e=>1===e.tipoArchivoID));if(t){var a=s+"archivo/"+t.archivoID;n(a)}}})(e)})),y(s+"familiar/"+a+"/user").then((e=>{g(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:t,alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},h.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),h.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),h.direccionElectronica)))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{r("/usuarioexterno/personal/"+a)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{r("/usuarioexterno/familiar/"+a)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{r("/usuarioexterno/documentos/"+a)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles de la familia")),i.createElement("div",{className:"card-toolbar"},i.createElement("a",{className:"btn btn-flex btn-primary",onClick:()=>{document.getElementById("kt_modal_add_user_familiar_form").reset(),l({}),new bootstrap.Modal(document.getElementById("kt_modal_users_search"),{keyboard:!1}).show()}},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Familiar"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",onSubmit:E,className:"form"},i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Cédula"),i.createElement("th",{className:"min-w-125px"},"Nombres"),i.createElement("th",{className:"min-w-125px"},"Apellidos"),i.createElement("th",{className:"min-w-125px"},"Parentezco"),i.createElement("th",{className:"min-w-125px"},"Telefono 1"),i.createElement("th",{className:"min-w-125px"},"Telefono 2"),i.createElement("th",{className:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},v.length>0&&i.createElement(i.Fragment,null,v.map(((e,t)=>i.createElement(i.Fragment,null,i.createElement("tr",{key:e.id||t},i.createElement("td",null,e.cc),i.createElement("td",null,e.nombre),i.createElement("td",null,e.apellidos),i.createElement("td",null,e.parentezco.descripcion),i.createElement("td",null,e.telefono),i.createElement("td",null,e.telefono1),i.createElement("td",{className:"text-end"},i.createElement("a",{onClick:()=>{return t=e,document.getElementById("kt_modal_add_user_familiar_form").reset(),console.log("data",t),l(t),void new bootstrap.Modal(document.getElementById("kt_modal_users_search"),{keyboard:!1}).show();var t},className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Editar"))))))))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_users_search",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header pb-0 border-0 justify-content-end"},i.createElement("div",{className:"btn btn-sm btn-icon btn-active-color-primary",id:"closeMd","data-bs-dismiss":"modal"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 mx-xl-18 pt-0 pb-15"},i.createElement("div",{className:"text-center mb-13"},i.createElement("h1",{className:"mb-3"},"Agregar Familiar")),i.createElement("form",{id:"kt_modal_add_user_familiar_form",className:"form",onSubmit:E},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nombres"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"nombre",className:"form-control form-control-lg form-control-solid",placeholder:"Nombres",onChange:x,value:o.nombre}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Apellidos"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"apellidos",className:"form-control form-control-lg form-control-solid",placeholder:"Apellidos",onChange:x,value:o.apellidos}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoDocumentoID","aria-label":"Seleccionar un Tipo de Documento...",value:o.tipoDocumentoID,"data-control":"select2",onChange:x,"data-placeholder":"Seleccionar un Tipo de Documento...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Documento..."),i.createElement("option",{value:"1"},"Cédula"),i.createElement("option",{value:"2"},"Pasaporte")))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Cédula"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"cc",className:"form-control form-control-lg form-control-solid",placeholder:"Cédula",onChange:x,value:o.cc}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Tipo de Contacto"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"contactoEmergencia","aria-label":"Seleccionar un Tipo de Contacto...",value:o.contactoEmergencia,onChange:x,"data-control":"select2","data-placeholder":"Seleccionar un Tipo de Contacto...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Contacto..."),i.createElement("option",{value:"1"},"Contacto de Emergencia1"),i.createElement("option",{value:"2"},"Contacto de Emergencia2")),i.createElement("div",{className:"form-text"},"Solo en el caso de que sea un contacto de emergencia."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Parentezco"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"parentezcoID","aria-label":"Seleccionar un Parentezco...",value:o.parentezcoID,"data-control":"select2",onChange:x,"data-placeholder":"Seleccionar un Parentezco...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Parentezco..."),i.createElement("option",{value:"1"},"Cónyugue"),i.createElement("option",{value:"2"},"Madre"),i.createElement("option",{value:"3"},"Padre"),i.createElement("option",{value:"4"},"Hijo")),i.createElement("div",{className:"form-text"},"Seleccionar un Parentezco..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Dirección"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"direccion",className:"form-control form-control-lg form-control-solid",placeholder:"Dirección",onChange:x,value:o.direccion}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Teléfono celular"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"telefono",className:"form-control form-control-lg form-control-solid",placeholder:"Teléfono celular",onChange:x,value:o.telefono}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Teléfono Opcional"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"telefono1",className:"form-control form-control-lg form-control-solid",placeholder:"Teléfono Opcional",onChange:x,value:o.telefono1}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Teléfono con Whatsapp"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"telefono2",className:"form-control form-control-lg form-control-solid",placeholder:"Teléfono con Whatsapp",onChange:x,value:o.telefono2}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Provincias"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"provinciaID","aria-label":"Seleccionar una Provincia...",value:o.provinciaID,onChange:x,"data-control":"select2","data-placeholder":"Seleccionar una Provincia...",className:"form-select form-select-solid form-select-lg"},f.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))),i.createElement("div",{className:"form-text"},"Seleccionar una Provincia..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Canton"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"cantonID","aria-label":"Seleccionar un Canton...","data-control":"select2",value:o.cantonID,onChange:x,"data-placeholder":"Seleccionar un Canton...",className:"form-select form-select-solid form-select-lg"},c.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))),i.createElement("div",{className:"form-text"},"Seleccionar un Canton..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Parroquia"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"parroquiaID","aria-label":"Seleccionar una Parroquia...","data-control":"select2",value:o.parroquiaID,onChange:x,"data-placeholder":"Seleccionar una Parroquia...",className:"form-select form-select-solid form-select-lg"},m.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))),i.createElement("div",{className:"form-text"},"Seleccionar una Parroquia..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Calle Primaria"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"callePrimaria",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Calle Primaria",value:o.callePrimaria}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Calle Secundaria"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"calleSecundaria",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Calle Secundaria",value:o.calleSecundaria}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Numeración"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"numeracion",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Numeración",value:o.numeracion}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Referencia"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"referencia",className:"form-control form-control-lg form-control-solid",onChange:x,placeholder:"Referencia",value:o.referencia}))),i.createElement("div",{className:"d-flex justify-content-center"},i.createElement("button",{type:"submit",className:"btn btn-lg btn-primary"},"Grabar Cambios"))))))))},Iu=()=>{let{userID:e}=te();const[t,n]=(0,i.useState)("https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"),a=Z(),r="https://madsis.mad.ec/api/",[o,l]=(0,i.useState)({}),[s,c]=(0,i.useState)({}),[u,m]=(0,i.useState)([]),d=async e=>(await Rn.get(e)).data,f=e=>{const{name:t,value:n,type:a,checked:r,files:o}=e.target;if("file"===a){const e=o[0];o.length>0&&l((t=>({...t,foto:e})))}else l((e=>({...e,[t]:"checkbox"===a?r:n})))};return(0,i.useEffect)((()=>{d(r+"users/"+e).then((e=>{c(e),(e=>{if(e.archivos.length>0){var t=e.archivos.find((e=>1===e.tipoArchivoID));if(t){var a=r+"archivo/"+t.archivoID;n(a)}}})(e)})),d(r+"archivo/"+e+"/user").then((e=>{m(e),console.log(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:t,alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},s.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),s.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),s.direccionElectronica)))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{a("/usuarioexterno/personal/"+e)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{a("/usuarioexterno/familiar/"+e)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{a("/usuarioexterno/documentos/"+e)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles de los archivos de la persona")),i.createElement("div",{className:"card-toolbar"},i.createElement("button",{className:"btn btn-flex btn-primary","data-bs-toggle":"modal","data-bs-target":"#kt_modal_upload"},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Archivos"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",className:"form"},i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Nombre"),i.createElement("th",{className:"min-w-125px"},"Extension"),i.createElement("th",{className:"min-w-125px"},"Tipo de Archivo"),i.createElement("th",{className:"min-w-125px"},"Fecha de Creación"),i.createElement("th",{className:"min-w-125px"},"Peso"),i.createElement("th",{className:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},u.length>0&&i.createElement(i.Fragment,null,u.map(((e,t)=>i.createElement(i.Fragment,null,i.createElement("tr",{key:e.id||t},i.createElement("td",null,e.fileName),i.createElement("td",null,e.fileExtension),i.createElement("td",null,e.tipoArchivo.descripcion),i.createElement("td",null,e.createdAt.substring(0,10)),i.createElement("td",null,(e.fileSize/1024).toFixed(2)," ","KB"),i.createElement("td",{className:"text-end"},i.createElement("a",{onClick:()=>(async e=>{try{const t=await Rn.get(r+"archivo/"+e.archivoID,{responseType:"blob"}),n=window.URL.createObjectURL(new Blob([t.data])),a=document.createElement("a");a.href=n,a.setAttribute("download",e.fileName),document.body.appendChild(a),a.click(),a.remove(),window.URL.revokeObjectURL(n)}catch(e){console.error("There was a problem with the axios operation:",e)}})(e),className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Descargar"))))))))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_upload",tabindex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("form",{className:"form",action:"none",id:"kt_modal_upload_form",onSubmit:t=>{t.preventDefault();let n=new FormData;for(let e in o)o.hasOwnProperty(e)&&(o[e]instanceof File?n.append(e,o[e]):"object"==typeof o[e]?n.append(e,JSON.stringify(o[e])):n.append(e,o[e]));console.log(o),Rn.post(r+"archivo/"+e+"/user",n,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){e?swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{d(r+"archivo/"+e+"/user").then((e=>{m(e),console.log(e)})),document.getElementById("mdlClose").click()}))}},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Subir Archivos"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary",id:"mdlClose","data-bs-dismiss":"modal"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body pt-10 pb-15 px-lg-17"},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Archivo"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoArchivoID",value:o.tipoArchivoID,onChange:f,"aria-label":"Seleccionar un Tipo de Archivo...","data-control":"select2","data-placeholder":"Seleccionar un Tipo de Archivo...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Archivo..."),i.createElement("option",{value:"1"},"Foto Personal"),i.createElement("option",{value:"2"},"Cédula de Identidad Anverso y Reverso"),i.createElement("option",{value:"3"},"Papeleta de votación"),i.createElement("option",{value:"4"},"Licencia de conducir Anverso y Reverso"),i.createElement("option",{value:"5"},"Certificado médico"),i.createElement("option",{value:"6"},"Otros")))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("input",{type:"file",name:"foto",onChange:f,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Ingresa archivo"}),i.createElement("span",{className:"form-text fs-6 text-muted"},"Peso máximo por archivo 4MB.")),i.createElement("div",{className:"d-flex justify-content-center"},i.createElement("button",{type:"reset",className:"btn btn-lg btn-light fw-bold btn-active-light-primary me-2","data-kt-search-element":"preferences-dismiss"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-lg btn-primary"},"Grabar Cambios"))))))))},Du=()=>i.createElement(i.Fragment,null,i.createElement(pe,null,i.createElement(de,{path:"/",element:i.createElement(mu,null)}),i.createElement(de,{path:"/inscribirse",element:i.createElement(Nu,null)}),i.createElement(de,{path:"/resultado",element:i.createElement(ku,null)}),i.createElement(de,{exact:!0,path:"/usuarioexterno/personal/:userID",element:i.createElement(Tu,null)}),i.createElement(de,{exact:!0,path:"/usuarioexterno/familiar/:userID",element:i.createElement(Ou,null)}),i.createElement(de,{exact:!0,path:"/usuarioexterno/documentos/:userID",element:i.createElement(Iu,null)}),i.createElement(de,{element:i.createElement(bu,null)},i.createElement(de,{exact:!0,path:"/dashboard",element:i.createElement(Ee,null)}),i.createElement(de,{exact:!0,path:"/roles",element:i.createElement(Pn,null)}),i.createElement(de,{exact:!0,path:"/candidatos",element:i.createElement(Su,null)}),i.createElement(de,{exact:!0,path:"/candidatos/:postulantID",element:i.createElement(Nu,null)}),i.createElement(de,{exact:!0,path:"/usuarios",element:i.createElement(Cu,null)}),i.createElement(de,{path:"/usuarios/personal/:userID",element:i.createElement(_u,null)}),i.createElement(de,{path:"/usuarios/familiar/:userID",element:i.createElement(Ru,null)}),i.createElement(de,{path:"/usuarios/documentos/:userID",element:i.createElement(Pu,null)}),i.createElement(de,{exact:!0,path:"/form",element:i.createElement(Un,null)}),i.createElement(de,{exact:!0,path:"/form/:id",element:i.createElement(uu,null)})))),Au=()=>i.createElement(ve,null,i.createElement(Du,null));var Fu=r(418),Lu=i,Bu=Symbol.for("react-redux-context"),zu="undefined"!=typeof globalThis?globalThis:{};function Mu(){if(!Lu.createContext)return{};const e=zu[Bu]??(zu[Bu]=new Map);let t=e.get(Lu.createContext);return t||(t=Lu.createContext(null),e.set(Lu.createContext,t)),t}var ju=Mu();Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen"),Symbol.for("react.client.reference");var Uu={notify(){},get:()=>[]};var qu=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Wu="undefined"!=typeof navigator&&"ReactNative"===navigator.product,$u=qu||Wu?Lu.useLayoutEffect:Lu.useEffect;Object.defineProperty,Object.getOwnPropertyNames,Object.getOwnPropertySymbols,Object.getOwnPropertyDescriptor,Object.getPrototypeOf,Object.prototype;var Vu=function({store:e,context:t,children:n,serverState:a,stabilityCheck:r="once",identityFunctionCheck:o="once"}){const l=Lu.useMemo((()=>{const t=function(e,t){let n,a=Uu,r=0,o=!1;function l(){c.onStateChange&&c.onStateChange()}function i(){r++,n||(n=t?t.addNestedSub(l):e.subscribe(l),a=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){(()=>{let t=e;for(;t;)t.callback(),t=t.next})()},get(){const t=[];let n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let a=!0;const r=t={callback:n,next:null,prev:t};return r.prev?r.prev.next=r:e=r,function(){a&&null!==e&&(a=!1,r.next?r.next.prev=r.prev:t=r.prev,r.prev?r.prev.next=r.next:e=r.next)}}}}())}function s(){r--,n&&0===r&&(n(),n=void 0,a.clear(),a=Uu)}const c={addNestedSub:function(e){i();const t=a.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),s())}},notifyNestedSubs:function(){a.notify()},handleChangeWrapper:l,isSubscribed:function(){return o},trySubscribe:function(){o||(o=!0,i())},tryUnsubscribe:function(){o&&(o=!1,s())},getListeners:()=>a};return c}(e);return{store:e,subscription:t,getServerState:a?()=>a:void 0,stabilityCheck:r,identityFunctionCheck:o}}),[e,a,r,o]),i=Lu.useMemo((()=>e.getState()),[e]);$u((()=>{const{subscription:t}=l;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),i!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[l,i]);const s=t||ju;return Lu.createElement(s.Provider,{value:l},n)};function Hu(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}Fu.useSyncExternalStoreWithSelector,i.useSyncExternalStore;var Gu=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),Ku=()=>Math.random().toString(36).substring(7).split("").join("."),Qu={INIT:`@@redux/INIT${Ku()}`,REPLACE:`@@redux/REPLACE${Ku()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${Ku()}`};function Ju(e,t,n){if("function"!=typeof e)throw new Error(Hu(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(Hu(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(Hu(1));return n(Ju)(e,t)}let a=e,r=t,o=new Map,l=o,i=0,s=!1;function c(){l===o&&(l=new Map,o.forEach(((e,t)=>{l.set(t,e)})))}function u(){if(s)throw new Error(Hu(3));return r}function m(e){if("function"!=typeof e)throw new Error(Hu(4));if(s)throw new Error(Hu(5));let t=!0;c();const n=i++;return l.set(n,e),function(){if(t){if(s)throw new Error(Hu(6));t=!1,c(),l.delete(n),o=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}(e))throw new Error(Hu(7));if(void 0===e.type)throw new Error(Hu(8));if("string"!=typeof e.type)throw new Error(Hu(17));if(s)throw new Error(Hu(9));try{s=!0,r=a(r,e)}finally{s=!1}return(o=l).forEach((e=>{e()})),e}return d({type:Qu.INIT}),{dispatch:d,subscribe:m,getState:u,replaceReducer:function(e){if("function"!=typeof e)throw new Error(Hu(10));a=e,d({type:Qu.REPLACE})},[Gu]:function(){const e=m;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(Hu(11));function n(){const e=t;e.next&&e.next(u())}return n(),{unsubscribe:e(n)}},[Gu](){return this}}}}}const Yu={questions:[],isFormSaved:!1,formResponses:[]},Xu=Ju((function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Yu,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"ADD_QUESTION":return{...e,questions:[...e.questions,t.payload]};case"ADD_FORM_FIELD":return{...e,questions:e.questions.map(((e,n)=>n===t.payload.questionIndex?{...e,formFields:[...e.formFields,t.payload.fieldType]}:e))};case"SAVE_FORM":return{...e,isFormSaved:!0};case"SAVE_FORM_RESPONSES":return{...e,formResponses:t.payload};default:return e}}),void 0,void 0);c.createRoot(document.getElementById("kt_app_root")).render(i.createElement(Vu,{store:Xu},i.createElement(Au,null)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,