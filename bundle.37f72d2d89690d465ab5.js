/*! For license information please see bundle.37f72d2d89690d465ab5.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={146:(e,t,n)=>{var r=n(404),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},l={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},i={};function s(e){return r.isMemo(e)?l:i[e.$$typeof]||a}i[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},i[r.Memo]=l;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,m=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var a=f(n);a&&a!==p&&e(t,a,r)}var l=u(n);d&&(l=l.concat(d(n)));for(var i=s(t),h=s(n),b=0;b<l.length;++b){var g=l[b];if(!(o[g]||r&&r[g]||h&&h[g]||i&&i[g])){var v=m(n,g);try{c(t,g,v)}catch(e){}}}}return t}},72:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,l=n?Symbol.for("react.strict_mode"):60108,i=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,m=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,b=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,E=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case o:case i:case l:case f:return e;default:switch(e=e&&e.$$typeof){case c:case m:case b:case h:case s:return e;default:return t}}case a:return t}}}function k(e){return x(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=r,t.ForwardRef=m,t.Fragment=o,t.Lazy=b,t.Memo=h,t.Portal=a,t.Profiler=i,t.StrictMode=l,t.Suspense=f,t.isAsyncMode=function(e){return k(e)||x(e)===u},t.isConcurrentMode=k,t.isContextConsumer=function(e){return x(e)===c},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===m},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===b},t.isMemo=function(e){return x(e)===h},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===i},t.isStrictMode=function(e){return x(e)===l},t.isSuspense=function(e){return x(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===i||e===l||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===h||e.$$typeof===s||e.$$typeof===c||e.$$typeof===m||e.$$typeof===v||e.$$typeof===y||e.$$typeof===E||e.$$typeof===g)},t.typeOf=x},404:(e,t,n)=>{e.exports=n(72)},551:(e,t,n)=>{var r=n(540),a=n(982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,i={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(i[e]=t,e=0;e<t.length;e++)l.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,m=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function h(e,t,n,r,a,o,l){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];b[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=b.hasOwnProperty(t)?b[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(p,e)||!d.call(f,e)&&(m.test(e)?p[e]=!0:(f[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,v);b[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,v);b[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,v);b[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=Symbol.for("react.element"),k=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),N=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),_=Symbol.for("react.context"),R=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),I=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var F=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}var L,M=Object.assign;function z(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var B=!1;function j(e,t){if(!e||B)return"";B=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),l=a.length-1,i=o.length-1;1<=l&&0<=i&&a[l]!==o[i];)i--;for(;1<=l&&0<=i;l--,i--)if(a[l]!==o[i]){if(1!==l||1!==i)do{if(l--,0>--i||a[l]!==o[i]){var s="\n"+a[l].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=l&&0<=i);break}}}finally{B=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function U(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case w:return"Fragment";case k:return"Portal";case S:return"Profiler";case N:return"StrictMode";case P:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case R:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:q(e.type)||"Memo";case I:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return q(t);case 8:return t===N?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function Y(e,t){X(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function oe(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function me(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var fe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||fe.hasOwnProperty(e)&&fe[e]?(""+t).trim():t+"px"}function be(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(fe).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),fe[t]=fe[e]}))}));var ge=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ee=null;function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,we=null,Ne=null;function Se(e){if(e=ya(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=xa(t),ke(e.stateNode,e.type,t))}}function Ce(e){we?Ne?Ne.push(e):Ne=[e]:we=e}function _e(){if(we){var e=we,t=Ne;if(Ne=we=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Re(e,t){return e(t)}function Pe(){}var Oe=!1;function Te(e,t,n){if(Oe)return e(t,n);Oe=!0;try{return Re(e,t,n)}finally{Oe=!1,(null!==we||null!==Ne)&&(Pe(),_e())}}function Ie(e,t){var n=e.stateNode;if(null===n)return null;var r=xa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Ae=!1;if(u)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){Ae=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(ue){Ae=!1}function De(e,t,n,r,a,o,l,i,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Le=!1,Me=null,ze=!1,Be=null,je={onError:function(e){Le=!0,Me=e}};function Ue(e,t,n,r,a,o,l,i,s){Le=!1,Me=null,De.apply(je,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(qe(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return $e(a),e;if(l===r)return $e(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,s=a.child;s;){if(s===n){i=!0,n=a,r=l;break}if(s===r){i=!0,r=a,n=l;break}s=s.sibling}if(!i){for(s=l.child;s;){if(s===n){i=!0,n=l,r=a;break}if(s===r){i=!0,r=l,n=a;break}s=s.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Ge=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Qe=a.unstable_shouldYield,Je=a.unstable_requestPaint,Xe=a.unstable_now,Ye=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(it(e)/st|0)|0},it=Math.log,st=Math.LN2,ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function mt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,l=268435455&n;if(0!==l){var i=l&~a;0!==i?r=dt(i):0!=(o&=l)&&(r=dt(o))}else 0!=(l=n&~a)?r=dt(l):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-lt(t)),r|=e[n],t&=~a;return r}function ft(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ct;return!(4194240&(ct<<=1))&&(ct=64),e}function bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function Et(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var xt,kt,wt,Nt,St,Ct=!1,_t=[],Rt=null,Pt=null,Ot=null,Tt=new Map,It=new Map,At=[],Ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":Rt=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":It.delete(t.pointerId)}}function Lt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ya(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Mt(e){var t=va(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void St(e.priority,(function(){wt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ya(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ee=r,n.target.dispatchEvent(r),Ee=null,t.shift()}return!0}function Bt(e,t,n){zt(e)&&n.delete(t)}function jt(){Ct=!1,null!==Rt&&zt(Rt)&&(Rt=null),null!==Pt&&zt(Pt)&&(Pt=null),null!==Ot&&zt(Ot)&&(Ot=null),Tt.forEach(Bt),It.forEach(Bt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,jt)))}function qt(e){function t(t){return Ut(t,e)}if(0<_t.length){Ut(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Rt&&Ut(Rt,e),null!==Pt&&Ut(Pt,e),null!==Ot&&Ut(Ot,e),Tt.forEach(t),It.forEach(t),n=0;n<At.length;n++)(r=At[n]).blockedOn===e&&(r.blockedOn=null);for(;0<At.length&&null===(n=At[0]).blockedOn;)Mt(n),null===n.blockedOn&&At.shift()}var Wt=E.ReactCurrentBatchConfig,$t=!0;function Vt(e,t,n,r){var a=yt,o=Wt.transition;Wt.transition=null;try{yt=1,Gt(e,t,n,r)}finally{yt=a,Wt.transition=o}}function Ht(e,t,n,r){var a=yt,o=Wt.transition;Wt.transition=null;try{yt=4,Gt(e,t,n,r)}finally{yt=a,Wt.transition=o}}function Gt(e,t,n,r){if($t){var a=Qt(e,t,n,r);if(null===a)$r(e,t,r,Kt,n),Dt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Rt=Lt(Rt,e,t,n,r,a),!0;case"dragenter":return Pt=Lt(Pt,e,t,n,r,a),!0;case"mouseover":return Ot=Lt(Ot,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Tt.set(o,Lt(Tt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,It.set(o,Lt(It.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<Ft.indexOf(e)){for(;null!==a;){var o=ya(a);if(null!==o&&xt(o),null===(o=Qt(e,t,n,r))&&$r(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Kt=null;function Qt(e,t,n,r){if(Kt=null,null!==(e=va(e=xe(r))))if(null===(t=qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Yt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Yt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(a):a[l]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,sn,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=an(cn),dn=M({},cn,{view:0,detail:0}),mn=an(dn),fn=M({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(on=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=on=0,sn=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),pn=an(fn),hn=an(M({},fn,{dataTransfer:0})),bn=an(M({},dn,{relatedTarget:0})),gn=an(M({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=M({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=an(vn),En=an(M({},cn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Nn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=wn[e])&&!!t[e]}function Sn(){return Nn}var Cn=M({},dn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(Cn),Rn=an(M({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(M({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),On=an(M({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=M({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=an(Tn),An=[9,13,27,32],Fn=u&&"CompositionEvent"in window,Dn=null;u&&"documentMode"in document&&(Dn=document.documentMode);var Ln=u&&"TextEvent"in window&&!Dn,Mn=u&&(!Fn||Dn&&8<Dn&&11>=Dn),zn=String.fromCharCode(32),Bn=!1;function jn(e,t){switch(e){case"keyup":return-1!==An.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Vn(e,t,n,r){Ce(r),0<(t=Hr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Gn=null;function Kn(e){zr(e,0)}function Qn(e){if(G(Ea(e)))return e}function Jn(e,t){if("change"===e)return t}var Xn=!1;if(u){var Yn;if(u){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Yn=Zn}else Yn=!1;Xn=Yn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Gn=Hn=null)}function nr(e){if("value"===e.propertyName&&Qn(Gn)){var t=[];Vn(t,Gn,e,xe(e)),Te(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Gn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Gn)}function or(e,t){if("click"===e)return Qn(t)}function lr(e,t){if("input"===e||"change"===e)return Qn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=mr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=ur(n,o);var l=ur(n,r);a&&l&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=u&&"documentMode"in document&&11>=document.documentMode,br=null,gr=null,vr=null,yr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==br||br!==K(r)||(r="selectionStart"in(r=br)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&sr(vr,r)||(vr=r,0<(r=Hr(gr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=br)))}function xr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:xr("Animation","AnimationEnd"),animationiteration:xr("Animation","AnimationIteration"),animationstart:xr("Animation","AnimationStart"),transitionend:xr("Transition","TransitionEnd")},wr={},Nr={};function Sr(e){if(wr[e])return wr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Nr)return wr[e]=n[t];return e}u&&(Nr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Cr=Sr("animationend"),_r=Sr("animationiteration"),Rr=Sr("animationstart"),Pr=Sr("transitionend"),Or=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ir(e,t){Or.set(e,t),s(t,[e])}for(var Ar=0;Ar<Tr.length;Ar++){var Fr=Tr[Ar];Ir(Fr.toLowerCase(),"on"+(Fr[0].toUpperCase()+Fr.slice(1)))}Ir(Cr,"onAnimationEnd"),Ir(_r,"onAnimationIteration"),Ir(Rr,"onAnimationStart"),Ir("dblclick","onDoubleClick"),Ir("focusin","onFocus"),Ir("focusout","onBlur"),Ir(Pr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,i,s,c){if(Ue.apply(this,arguments),Le){if(!Le)throw Error(o(198));var u=Me;Le=!1,Me=null,ze||(ze=!0,Be=u)}}(r,t,void 0,e),e.currentTarget=null}function zr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var i=r[l],s=i.instance,c=i.currentTarget;if(i=i.listener,s!==o&&a.isPropagationStopped())break e;Mr(a,i,c),o=s}else for(l=0;l<r.length;l++){if(s=(i=r[l]).instance,c=i.currentTarget,i=i.listener,s!==o&&a.isPropagationStopped())break e;Mr(a,i,c),o=s}}}if(ze)throw e=Be,ze=!1,Be=null,e}function Br(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function qr(e){if(!e[Ur]){e[Ur]=!0,l.forEach((function(t){"selectionchange"!==t&&(Lr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,jr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Jt(t)){case 1:var a=Vt;break;case 4:a=Ht;break;default:a=Gt}n=a.bind(null,t,n,e),a=void 0,!Ae||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===l)for(l=r.return;null!==l;){var s=l.tag;if((3===s||4===s)&&((s=l.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;l=l.return}for(;null!==i;){if(null===(l=va(i)))return;if(5===(s=l.tag)||6===s){r=o=l;continue e}i=i.parentNode}}r=r.return}Te((function(){var r=o,a=xe(n),l=[];e:{var i=Or.get(e);if(void 0!==i){var s=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=_n;break;case"focusin":c="focus",s=bn;break;case"focusout":c="blur",s=bn;break;case"beforeblur":case"afterblur":s=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Pn;break;case Cr:case _r:case Rr:s=gn;break;case Pr:s=On;break;case"scroll":s=mn;break;case"wheel":s=In;break;case"copy":case"cut":case"paste":s=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Rn}var u=!!(4&t),d=!u&&"scroll"===e,m=u?null!==i?i+"Capture":null:i;u=[];for(var f,p=r;null!==p;){var h=(f=p).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==m&&null!=(h=Ie(p,m))&&u.push(Vr(p,h,f))),d)break;p=p.return}0<u.length&&(i=new s(i,c,null,n,a),l.push({event:i,listeners:u}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Ee||!(c=n.relatedTarget||n.fromElement)||!va(c)&&!c[pa])&&(s||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?va(c):null)&&(c!==(d=qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(u=pn,h="onMouseLeave",m="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Rn,h="onPointerLeave",m="onPointerEnter",p="pointer"),d=null==s?i:Ea(s),f=null==c?i:Ea(c),(i=new u(h,p+"leave",s,n,a)).target=d,i.relatedTarget=f,h=null,va(a)===r&&((u=new u(m,p+"enter",c,n,a)).target=f,u.relatedTarget=d,h=u),d=h,s&&c)e:{for(m=c,p=0,f=u=s;f;f=Gr(f))p++;for(f=0,h=m;h;h=Gr(h))f++;for(;0<p-f;)u=Gr(u),p--;for(;0<f-p;)m=Gr(m),f--;for(;p--;){if(u===m||null!==m&&u===m.alternate)break e;u=Gr(u),m=Gr(m)}u=null}else u=null;null!==s&&Kr(l,i,s,u,!1),null!==c&&null!==d&&Kr(l,d,c,u,!0)}if("select"===(s=(i=r?Ea(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var b=Jn;else if($n(i))if(Xn)b=lr;else{b=ar;var g=rr}else(s=i.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(b=or);switch(b&&(b=b(e,r))?Vn(l,b,n,a):(g&&g(e,i,r),"focusout"===e&&(g=i._wrapperState)&&g.controlled&&"number"===i.type&&ee(i,"number",i.value)),g=r?Ea(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(br=g,gr=r,vr=null);break;case"focusout":vr=gr=br=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,Er(l,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":Er(l,n,a)}var v;if(Fn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else qn?jn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Mn&&"ko"!==n.locale&&(qn||"onCompositionStart"!==y?"onCompositionEnd"===y&&qn&&(v=en()):(Yt="value"in(Xt=a)?Xt.value:Xt.textContent,qn=!0)),0<(g=Hr(r,y)).length&&(y=new En(y,e,null,n,a),l.push({event:y,listeners:g}),(v||null!==(v=Un(n)))&&(y.data=v))),(v=Ln?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Bn=!0,zn);case"textInput":return(e=t.data)===zn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Fn&&jn(e,t)?(e=en(),Zt=Yt=Xt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new En("onBeforeInput","beforeinput",null,n,a),l.push({event:a,listeners:r}),a.data=v)}zr(l,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ie(e,n))&&r.unshift(Vr(e,o,a)),null!=(o=Ie(e,t))&&r.push(Vr(e,o,a))),e=e.return}return r}function Gr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,l=[];null!==n&&n!==r;){var i=n,s=i.alternate,c=i.stateNode;if(null!==s&&s===r)break;5===i.tag&&null!==c&&(i=c,a?null!=(s=Ie(n,o))&&l.unshift(Vr(n,s,i)):a||null!=(s=Ie(n,o))&&l.push(Vr(n,s,i))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var Qr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Jr,"")}function Yr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,la="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function sa(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void qt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);qt(t)}function ca(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ua(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),ma="__reactFiber$"+da,fa="__reactProps$"+da,pa="__reactContainer$"+da,ha="__reactEvents$"+da,ba="__reactListeners$"+da,ga="__reactHandles$"+da;function va(e){var t=e[ma];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pa]||n[ma]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ua(e);null!==e;){if(n=e[ma])return n;e=ua(e)}return t}n=(e=n).parentNode}return null}function ya(e){return!(e=e[ma]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ea(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function xa(e){return e[fa]||null}var ka=[],wa=-1;function Na(e){return{current:e}}function Sa(e){0>wa||(e.current=ka[wa],ka[wa]=null,wa--)}function Ca(e,t){wa++,ka[wa]=e.current,e.current=t}var _a={},Ra=Na(_a),Pa=Na(!1),Oa=_a;function Ta(e,t){var n=e.type.contextTypes;if(!n)return _a;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ia(e){return null!=e.childContextTypes}function Aa(){Sa(Pa),Sa(Ra)}function Fa(e,t,n){if(Ra.current!==_a)throw Error(o(168));Ca(Ra,t),Ca(Pa,n)}function Da(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return M({},n,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_a,Oa=Ra.current,Ca(Ra,e),Ca(Pa,Pa.current),!0}function Ma(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Da(e,t,Oa),r.__reactInternalMemoizedMergedChildContext=e,Sa(Pa),Sa(Ra),Ca(Ra,e)):Sa(Pa),Ca(Pa,n)}var za=null,Ba=!1,ja=!1;function Ua(e){null===za?za=[e]:za.push(e)}function qa(){if(!ja&&null!==za){ja=!0;var e=0,t=yt;try{var n=za;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}za=null,Ba=!1}catch(t){throw null!==za&&(za=za.slice(e+1)),Ge(Ze,qa),t}finally{yt=t,ja=!1}}return null}var Wa=[],$a=0,Va=null,Ha=0,Ga=[],Ka=0,Qa=null,Ja=1,Xa="";function Ya(e,t){Wa[$a++]=Ha,Wa[$a++]=Va,Va=e,Ha=t}function Za(e,t,n){Ga[Ka++]=Ja,Ga[Ka++]=Xa,Ga[Ka++]=Qa,Qa=e;var r=Ja;e=Xa;var a=32-lt(r)-1;r&=~(1<<a),n+=1;var o=32-lt(t)+a;if(30<o){var l=a-a%5;o=(r&(1<<l)-1).toString(32),r>>=l,a-=l,Ja=1<<32-lt(t)+a|n<<a|r,Xa=o+e}else Ja=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Ya(e,1),Za(e,1,0))}function to(e){for(;e===Va;)Va=Wa[--$a],Wa[$a]=null,Ha=Wa[--$a],Wa[$a]=null;for(;e===Qa;)Qa=Ga[--Ka],Ga[Ka]=null,Xa=Ga[--Ka],Ga[Ka]=null,Ja=Ga[--Ka],Ga[Ka]=null}var no=null,ro=null,ao=!1,oo=null;function lo(e,t){var n=Tc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ca(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qa?{id:Ja,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Tc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function so(e){return!(!(1&e.mode)||128&e.flags)}function co(e){if(ao){var t=ro;if(t){var n=t;if(!io(e,t)){if(so(e))throw Error(o(418));t=ca(n.nextSibling);var r=no;t&&io(e,t)?lo(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(so(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function mo(e){if(e!==no)return!1;if(!ao)return uo(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(so(e))throw fo(),Error(o(418));for(;t;)lo(e,t),t=ca(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ca(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ca(e.stateNode.nextSibling):null;return!0}function fo(){for(var e=ro;e;)e=ca(e.nextSibling)}function po(){ro=no=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var bo=E.ReactCurrentBatchConfig;function go(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=a.refs;null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function vo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function yo(e){return(0,e._init)(e._payload)}function Eo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ac(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){var o=n.type;return o===w?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===I&&yo(o)===t.type)?((r=a(t,n.props)).ref=go(e,t,n),r.return=e,r):((r=Fc(n.type,n.key,n.props,null,e.mode,r)).ref=go(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Dc(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function m(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Fc(t.type,t.key,t.props,null,e.mode,n)).ref=go(e,null,t),n.return=e,n;case k:return(t=zc(t,e.mode,n)).return=e,t;case I:return m(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Dc(t,e.mode,n,null)).return=e,t;vo(e,t)}return null}function f(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===a?c(e,t,n,r):null;case k:return n.key===a?u(e,t,n,r):null;case I:return f(e,t,(a=n._init)(n._payload),r)}if(te(n)||D(n))return null!==a?null:d(e,t,n,r,null);vo(e,n)}return null}function p(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case I:return p(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||D(r))return d(t,e=e.get(n)||null,r,a,null);vo(t,r)}return null}function h(a,o,i,s){for(var c=null,u=null,d=o,h=o=0,b=null;null!==d&&h<i.length;h++){d.index>h?(b=d,d=null):b=d.sibling;var g=f(a,d,i[h],s);if(null===g){null===d&&(d=b);break}e&&d&&null===g.alternate&&t(a,d),o=l(g,o,h),null===u?c=g:u.sibling=g,u=g,d=b}if(h===i.length)return n(a,d),ao&&Ya(a,h),c;if(null===d){for(;h<i.length;h++)null!==(d=m(a,i[h],s))&&(o=l(d,o,h),null===u?c=d:u.sibling=d,u=d);return ao&&Ya(a,h),c}for(d=r(a,d);h<i.length;h++)null!==(b=p(d,a,h,i[h],s))&&(e&&null!==b.alternate&&d.delete(null===b.key?h:b.key),o=l(b,o,h),null===u?c=b:u.sibling=b,u=b);return e&&d.forEach((function(e){return t(a,e)})),ao&&Ya(a,h),c}function b(a,i,s,c){var u=D(s);if("function"!=typeof u)throw Error(o(150));if(null==(s=u.call(s)))throw Error(o(151));for(var d=u=null,h=i,b=i=0,g=null,v=s.next();null!==h&&!v.done;b++,v=s.next()){h.index>b?(g=h,h=null):g=h.sibling;var y=f(a,h,v.value,c);if(null===y){null===h&&(h=g);break}e&&h&&null===y.alternate&&t(a,h),i=l(y,i,b),null===d?u=y:d.sibling=y,d=y,h=g}if(v.done)return n(a,h),ao&&Ya(a,b),u;if(null===h){for(;!v.done;b++,v=s.next())null!==(v=m(a,v.value,c))&&(i=l(v,i,b),null===d?u=v:d.sibling=v,d=v);return ao&&Ya(a,b),u}for(h=r(a,h);!v.done;b++,v=s.next())null!==(v=p(h,a,b,v.value,c))&&(e&&null!==v.alternate&&h.delete(null===v.key?b:v.key),i=l(v,i,b),null===d?u=v:d.sibling=v,d=v);return e&&h.forEach((function(e){return t(a,e)})),ao&&Ya(a,b),u}return function e(r,o,l,s){if("object"==typeof l&&null!==l&&l.type===w&&null===l.key&&(l=l.props.children),"object"==typeof l&&null!==l){switch(l.$$typeof){case x:e:{for(var c=l.key,u=o;null!==u;){if(u.key===c){if((c=l.type)===w){if(7===u.tag){n(r,u.sibling),(o=a(u,l.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===I&&yo(c)===u.type){n(r,u.sibling),(o=a(u,l.props)).ref=go(r,u,l),o.return=r,r=o;break e}n(r,u);break}t(r,u),u=u.sibling}l.type===w?((o=Dc(l.props.children,r.mode,s,l.key)).return=r,r=o):((s=Fc(l.type,l.key,l.props,null,r.mode,s)).ref=go(r,o,l),s.return=r,r=s)}return i(r);case k:e:{for(u=l.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===l.containerInfo&&o.stateNode.implementation===l.implementation){n(r,o.sibling),(o=a(o,l.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=zc(l,r.mode,s)).return=r,r=o}return i(r);case I:return e(r,o,(u=l._init)(l._payload),s)}if(te(l))return h(r,o,l,s);if(D(l))return b(r,o,l,s);vo(r,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,l)).return=r,r=o):(n(r,o),(o=Mc(l,r.mode,s)).return=r,r=o),i(r)):n(r,o)}}var xo=Eo(!0),ko=Eo(!1),wo=Na(null),No=null,So=null,Co=null;function _o(){Co=So=No=null}function Ro(e){var t=wo.current;Sa(wo),e._currentValue=t}function Po(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Oo(e,t){No=e,Co=So=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(yi=!0),e.firstContext=null)}function To(e){var t=e._currentValue;if(Co!==e)if(e={context:e,memoizedValue:t,next:null},null===So){if(null===No)throw Error(o(308));So=e,No.dependencies={lanes:0,firstContext:e}}else So=So.next=e;return t}var Io=null;function Ao(e){null===Io?Io=[e]:Io.push(e)}function Fo(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Ao(t)):(n.next=a.next,a.next=n),t.interleaved=n,Do(e,r)}function Do(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Lo=!1;function Mo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Bo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function jo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Rs){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Do(e,n)}return null===(a=r.interleaved)?(t.next=t,Ao(r)):(t.next=a.next,a.next=t),r.interleaved=t,Do(e,n)}function Uo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function qo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=l:o=o.next=l,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Wo(e,t,n,r){var a=e.updateQueue;Lo=!1;var o=a.firstBaseUpdate,l=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var s=i,c=s.next;s.next=null,null===l?o=c:l.next=c,l=s;var u=e.alternate;null!==u&&(i=(u=u.updateQueue).lastBaseUpdate)!==l&&(null===i?u.firstBaseUpdate=c:i.next=c,u.lastBaseUpdate=s)}if(null!==o){var d=a.baseState;for(l=0,u=c=s=null,i=o;;){var m=i.lane,f=i.eventTime;if((r&m)===m){null!==u&&(u=u.next={eventTime:f,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var p=e,h=i;switch(m=t,f=n,h.tag){case 1:if("function"==typeof(p=h.payload)){d=p.call(f,d,m);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(m="function"==typeof(p=h.payload)?p.call(f,d,m):p))break e;d=M({},d,m);break e;case 2:Lo=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(m=a.effects)?a.effects=[i]:m.push(i))}else f={eventTime:f,lane:m,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===u?(c=u=f,s=d):u=u.next=f,l|=m;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(m=i).next,m.next=null,a.lastBaseUpdate=m,a.shared.pending=null}}if(null===u&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do{l|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);Ls|=l,e.lanes=l,e.memoizedState=d}}function $o(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Vo={},Ho=Na(Vo),Go=Na(Vo),Ko=Na(Vo);function Qo(e){if(e===Vo)throw Error(o(174));return e}function Jo(e,t){switch(Ca(Ko,t),Ca(Go,e),Ca(Ho,Vo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Sa(Ho),Ca(Ho,t)}function Xo(){Sa(Ho),Sa(Go),Sa(Ko)}function Yo(e){Qo(Ko.current);var t=Qo(Ho.current),n=se(t,e.type);t!==n&&(Ca(Go,e),Ca(Ho,n))}function Zo(e){Go.current===e&&(Sa(Ho),Sa(Go))}var el=Na(0);function tl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var nl=[];function rl(){for(var e=0;e<nl.length;e++)nl[e]._workInProgressVersionPrimary=null;nl.length=0}var al=E.ReactCurrentDispatcher,ol=E.ReactCurrentBatchConfig,ll=0,il=null,sl=null,cl=null,ul=!1,dl=!1,ml=0,fl=0;function pl(){throw Error(o(321))}function hl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function bl(e,t,n,r,a,l){if(ll=l,il=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,al.current=null===e||null===e.memoizedState?Zl:ei,e=n(r,a),dl){l=0;do{if(dl=!1,ml=0,25<=l)throw Error(o(301));l+=1,cl=sl=null,t.updateQueue=null,al.current=ti,e=n(r,a)}while(dl)}if(al.current=Yl,t=null!==sl&&null!==sl.next,ll=0,cl=sl=il=null,ul=!1,t)throw Error(o(300));return e}function gl(){var e=0!==ml;return ml=0,e}function vl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===cl?il.memoizedState=cl=e:cl=cl.next=e,cl}function yl(){if(null===sl){var e=il.alternate;e=null!==e?e.memoizedState:null}else e=sl.next;var t=null===cl?il.memoizedState:cl.next;if(null!==t)cl=t,sl=e;else{if(null===e)throw Error(o(310));e={memoizedState:(sl=e).memoizedState,baseState:sl.baseState,baseQueue:sl.baseQueue,queue:sl.queue,next:null},null===cl?il.memoizedState=cl=e:cl=cl.next=e}return cl}function El(e,t){return"function"==typeof t?t(e):t}function xl(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=sl,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}r.baseQueue=a=l,n.pending=null}if(null!==a){l=a.next,r=r.baseState;var s=i=null,c=null,u=l;do{var d=u.lane;if((ll&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var m={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=m,i=r):c=c.next=m,il.lanes|=d,Ls|=d}u=u.next}while(null!==u&&u!==l);null===c?i=r:c.next=s,ir(r,t.memoizedState)||(yi=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{l=a.lane,il.lanes|=l,Ls|=l,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function kl(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);ir(l,t.memoizedState)||(yi=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function wl(){}function Nl(e,t){var n=il,r=yl(),a=t(),l=!ir(r.memoizedState,a);if(l&&(r.memoizedState=a,yi=!0),r=r.queue,Ll(_l.bind(null,n,r,e),[e]),r.getSnapshot!==t||l||null!==cl&&1&cl.memoizedState.tag){if(n.flags|=2048,Tl(9,Cl.bind(null,n,r,a,t),void 0,null),null===Ps)throw Error(o(349));30&ll||Sl(n,t,a)}return a}function Sl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Cl(e,t,n,r){t.value=n,t.getSnapshot=r,Rl(t)&&Pl(e)}function _l(e,t,n){return n((function(){Rl(t)&&Pl(e)}))}function Rl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Pl(e){var t=Do(e,1);null!==t&&nc(t,e,1,-1)}function Ol(e){var t=vl();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:El,lastRenderedState:e},t.queue=e,e=e.dispatch=Kl.bind(null,il,e),[t.memoizedState,e]}function Tl(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=il.updateQueue)?(t={lastEffect:null,stores:null},il.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Il(){return yl().memoizedState}function Al(e,t,n,r){var a=vl();il.flags|=e,a.memoizedState=Tl(1|t,n,void 0,void 0===r?null:r)}function Fl(e,t,n,r){var a=yl();r=void 0===r?null:r;var o=void 0;if(null!==sl){var l=sl.memoizedState;if(o=l.destroy,null!==r&&hl(r,l.deps))return void(a.memoizedState=Tl(t,n,o,r))}il.flags|=e,a.memoizedState=Tl(1|t,n,o,r)}function Dl(e,t){return Al(8390656,8,e,t)}function Ll(e,t){return Fl(2048,8,e,t)}function Ml(e,t){return Fl(4,2,e,t)}function zl(e,t){return Fl(4,4,e,t)}function Bl(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function jl(e,t,n){return n=null!=n?n.concat([e]):null,Fl(4,4,Bl.bind(null,t,e),n)}function Ul(){}function ql(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Wl(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&hl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function $l(e,t,n){return 21&ll?(ir(n,t)||(n=ht(),il.lanes|=n,Ls|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,yi=!0),e.memoizedState=n)}function Vl(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=ol.transition;ol.transition={};try{e(!1),t()}finally{yt=n,ol.transition=r}}function Hl(){return yl().memoizedState}function Gl(e,t,n){var r=tc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ql(e)?Jl(t,n):null!==(n=Fo(e,t,n,r))&&(nc(n,e,r,ec()),Xl(n,t,r))}function Kl(e,t,n){var r=tc(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ql(e))Jl(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var l=t.lastRenderedState,i=o(l,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,l)){var s=t.interleaved;return null===s?(a.next=a,Ao(t)):(a.next=s.next,s.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Fo(e,t,a,r))&&(nc(n,e,r,a=ec()),Xl(n,t,r))}}function Ql(e){var t=e.alternate;return e===il||null!==t&&t===il}function Jl(e,t){dl=ul=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xl(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Yl={readContext:To,useCallback:pl,useContext:pl,useEffect:pl,useImperativeHandle:pl,useInsertionEffect:pl,useLayoutEffect:pl,useMemo:pl,useReducer:pl,useRef:pl,useState:pl,useDebugValue:pl,useDeferredValue:pl,useTransition:pl,useMutableSource:pl,useSyncExternalStore:pl,useId:pl,unstable_isNewReconciler:!1},Zl={readContext:To,useCallback:function(e,t){return vl().memoizedState=[e,void 0===t?null:t],e},useContext:To,useEffect:Dl,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Al(4194308,4,Bl.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Al(4194308,4,e,t)},useInsertionEffect:function(e,t){return Al(4,2,e,t)},useMemo:function(e,t){var n=vl();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=vl();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Gl.bind(null,il,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vl().memoizedState=e},useState:Ol,useDebugValue:Ul,useDeferredValue:function(e){return vl().memoizedState=e},useTransition:function(){var e=Ol(!1),t=e[0];return e=Vl.bind(null,e[1]),vl().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=il,a=vl();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Ps)throw Error(o(349));30&ll||Sl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Dl(_l.bind(null,r,l,e),[e]),r.flags|=2048,Tl(9,Cl.bind(null,r,l,n,t),void 0,null),n},useId:function(){var e=vl(),t=Ps.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ja&~(1<<32-lt(Ja)-1)).toString(32)+n),0<(n=ml++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=fl++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ei={readContext:To,useCallback:ql,useContext:To,useEffect:Ll,useImperativeHandle:jl,useInsertionEffect:Ml,useLayoutEffect:zl,useMemo:Wl,useReducer:xl,useRef:Il,useState:function(){return xl(El)},useDebugValue:Ul,useDeferredValue:function(e){return $l(yl(),sl.memoizedState,e)},useTransition:function(){return[xl(El)[0],yl().memoizedState]},useMutableSource:wl,useSyncExternalStore:Nl,useId:Hl,unstable_isNewReconciler:!1},ti={readContext:To,useCallback:ql,useContext:To,useEffect:Ll,useImperativeHandle:jl,useInsertionEffect:Ml,useLayoutEffect:zl,useMemo:Wl,useReducer:kl,useRef:Il,useState:function(){return kl(El)},useDebugValue:Ul,useDeferredValue:function(e){var t=yl();return null===sl?t.memoizedState=e:$l(t,sl.memoizedState,e)},useTransition:function(){return[kl(El)[0],yl().memoizedState]},useMutableSource:wl,useSyncExternalStore:Nl,useId:Hl,unstable_isNewReconciler:!1};function ni(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ri(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ai={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ec(),a=tc(e),o=Bo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,a))&&(nc(t,e,a,r),Uo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ec(),a=tc(e),o=Bo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=jo(e,o,a))&&(nc(t,e,a,r),Uo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),r=tc(e),a=Bo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=jo(e,a,r))&&(nc(t,e,r,n),Uo(t,e,r))}};function oi(e,t,n,r,a,o,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,l):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(a,o))}function li(e,t,n){var r=!1,a=_a,o=t.contextType;return"object"==typeof o&&null!==o?o=To(o):(a=Ia(t)?Oa:Ra.current,o=(r=null!=(r=t.contextTypes))?Ta(e,a):_a),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ai,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ii(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function si(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Mo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=To(o):(o=Ia(t)?Oa:Ra.current,a.context=Ta(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ri(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ai.enqueueReplaceState(a,a.state,null),Wo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function ci(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function ui(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function di(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var mi="function"==typeof WeakMap?WeakMap:Map;function fi(e,t,n){(n=Bo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$s||($s=!0,Vs=r),di(0,t)},n}function pi(e,t,n){(n=Bo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){di(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){di(0,t),"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function hi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new mi;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Sc.bind(null,e,t,n),t.then(e,e))}function bi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gi(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Bo(-1,1)).tag=2,jo(n,t,1))),n.lanes|=1),e)}var vi=E.ReactCurrentOwner,yi=!1;function Ei(e,t,n,r){t.child=null===e?ko(t,null,n,r):xo(t,e.child,n,r)}function xi(e,t,n,r,a){n=n.render;var o=t.ref;return Oo(t,a),r=bl(e,t,n,r,o,a),n=gl(),null===e||yi?(ao&&n&&eo(t),t.flags|=1,Ei(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$i(e,t,a))}function ki(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ic(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fc(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,wi(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var l=o.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(l,r)&&e.ref===t.ref)return $i(e,t,a)}return t.flags|=1,(e=Ac(o,r)).ref=t.ref,e.return=t,t.child=e}function wi(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(sr(o,r)&&e.ref===t.ref){if(yi=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,$i(e,t,a);131072&e.flags&&(yi=!0)}}return Ci(e,t,n,r,a)}function Ni(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ca(As,Is),Is|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ca(As,Is),Is|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ca(As,Is),Is|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ca(As,Is),Is|=r;return Ei(e,t,a,n),t.child}function Si(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ci(e,t,n,r,a){var o=Ia(n)?Oa:Ra.current;return o=Ta(t,o),Oo(t,a),n=bl(e,t,n,r,o,a),r=gl(),null===e||yi?(ao&&r&&eo(t),t.flags|=1,Ei(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$i(e,t,a))}function _i(e,t,n,r,a){if(Ia(n)){var o=!0;La(t)}else o=!1;if(Oo(t,a),null===t.stateNode)Wi(e,t),li(t,n,r),si(t,n,r,a),r=!0;else if(null===e){var l=t.stateNode,i=t.memoizedProps;l.props=i;var s=l.context,c=n.contextType;c="object"==typeof c&&null!==c?To(c):Ta(t,c=Ia(n)?Oa:Ra.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==r||s!==c)&&ii(t,l,r,c),Lo=!1;var m=t.memoizedState;l.state=m,Wo(t,r,l,a),s=t.memoizedState,i!==r||m!==s||Pa.current||Lo?("function"==typeof u&&(ri(t,n,u,r),s=t.memoizedState),(i=Lo||oi(t,n,i,r,m,s,c))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=c,r=i):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,zo(e,t),i=t.memoizedProps,c=t.type===t.elementType?i:ni(t.type,i),l.props=c,d=t.pendingProps,m=l.context,s="object"==typeof(s=n.contextType)&&null!==s?To(s):Ta(t,s=Ia(n)?Oa:Ra.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i!==d||m!==s)&&ii(t,l,r,s),Lo=!1,m=t.memoizedState,l.state=m,Wo(t,r,l,a);var p=t.memoizedState;i!==d||m!==p||Pa.current||Lo?("function"==typeof f&&(ri(t,n,f,r),p=t.memoizedState),(c=Lo||oi(t,n,c,r,m,p,s)||!1)?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&m===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&m===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),l.props=r,l.state=p,l.context=s,r=c):("function"!=typeof l.componentDidUpdate||i===e.memoizedProps&&m===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||i===e.memoizedProps&&m===e.memoizedState||(t.flags|=1024),r=!1)}return Ri(e,t,n,r,o,a)}function Ri(e,t,n,r,a,o){Si(e,t);var l=!!(128&t.flags);if(!r&&!l)return a&&Ma(t,n,!1),$i(e,t,o);r=t.stateNode,vi.current=t;var i=l&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&l?(t.child=xo(t,e.child,null,o),t.child=xo(t,null,i,o)):Ei(e,t,i,o),t.memoizedState=r.state,a&&Ma(t,n,!0),t.child}function Pi(e){var t=e.stateNode;t.pendingContext?Fa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Fa(0,t.context,!1),Jo(e,t.containerInfo)}function Oi(e,t,n,r,a){return po(),ho(a),t.flags|=256,Ei(e,t,n,r),t.child}var Ti,Ii,Ai,Fi,Di={dehydrated:null,treeContext:null,retryLane:0};function Li(e){return{baseLanes:e,cachePool:null,transitions:null}}function Mi(e,t,n){var r,a=t.pendingProps,l=el.current,i=!1,s=!!(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&!!(2&l)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(l|=1),Ca(el,1&l),null===e)return co(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=a.children,e=a.fallback,i?(a=t.mode,i=t.child,s={mode:"hidden",children:s},1&a||null===i?i=Lc(s,a,0,null):(i.childLanes=0,i.pendingProps=s),e=Dc(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Li(n),t.memoizedState=Di,e):zi(t,s));if(null!==(l=e.memoizedState)&&null!==(r=l.dehydrated))return function(e,t,n,r,a,l,i){if(n)return 256&t.flags?(t.flags&=-257,Bi(e,t,i,r=ui(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=r.fallback,a=t.mode,r=Lc({mode:"visible",children:r.children},a,0,null),(l=Dc(l,a,i,null)).flags|=2,r.return=t,l.return=t,r.sibling=l,t.child=r,1&t.mode&&xo(t,e.child,null,i),t.child.memoizedState=Li(i),t.memoizedState=Di,l);if(!(1&t.mode))return Bi(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var s=r.dgst;return r=s,Bi(e,t,i,r=ui(l=Error(o(419)),r,void 0))}if(s=!!(i&e.childLanes),yi||s){if(null!==(r=Ps)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|i)?0:a)&&a!==l.retryLane&&(l.retryLane=a,Do(e,a),nc(r,e,a,-1))}return hc(),Bi(e,t,i,r=ui(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=_c.bind(null,e),a._reactRetry=t,null):(e=l.treeContext,ro=ca(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Ga[Ka++]=Ja,Ga[Ka++]=Xa,Ga[Ka++]=Qa,Ja=e.id,Xa=e.overflow,Qa=t),(t=zi(t,r.children)).flags|=4096,t)}(e,t,s,a,r,l,n);if(i){i=a.fallback,s=t.mode,r=(l=e.child).sibling;var c={mode:"hidden",children:a.children};return 1&s||t.child===l?(a=Ac(l,c)).subtreeFlags=14680064&l.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=c,t.deletions=null),null!==r?i=Ac(r,i):(i=Dc(i,s,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,s=null===(s=e.child.memoizedState)?Li(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},i.memoizedState=s,i.childLanes=e.childLanes&~n,t.memoizedState=Di,a}return e=(i=e.child).sibling,a=Ac(i,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function zi(e,t){return(t=Lc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Bi(e,t,n,r){return null!==r&&ho(r),xo(t,e.child,null,n),(e=zi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ji(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Po(e.return,t,n)}function Ui(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function qi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ei(e,t,r.children,n),2&(r=el.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ji(e,n,t);else if(19===e.tag)ji(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ca(el,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===tl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ui(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===tl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ui(t,!0,n,null,o);break;case"together":Ui(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Wi(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $i(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ac(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ac(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vi(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gi(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hi(t),null;case 1:case 17:return Ia(t.type)&&Aa(),Hi(t),null;case 3:return r=t.stateNode,Xo(),Sa(Pa),Sa(Ra),rl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(mo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(lc(oo),oo=null))),Ii(e,t),Hi(t),null;case 5:Zo(t);var a=Qo(Ko.current);if(n=t.type,null!==e&&null!=t.stateNode)Ai(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Hi(t),null}if(e=Qo(Ho.current),mo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[ma]=t,r[fa]=l,e=!!(1&t.mode),n){case"dialog":Br("cancel",r),Br("close",r);break;case"iframe":case"object":case"embed":Br("load",r);break;case"video":case"audio":for(a=0;a<Dr.length;a++)Br(Dr[a],r);break;case"source":Br("error",r);break;case"img":case"image":case"link":Br("error",r),Br("load",r);break;case"details":Br("toggle",r);break;case"input":J(r,l),Br("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Br("invalid",r);break;case"textarea":ae(r,l),Br("invalid",r)}for(var s in ve(n,l),a=null,l)if(l.hasOwnProperty(s)){var c=l[s];"children"===s?"string"==typeof c?r.textContent!==c&&(!0!==l.suppressHydrationWarning&&Yr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==l.suppressHydrationWarning&&Yr(r.textContent,c,e),a=["children",""+c]):i.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&Br("scroll",r)}switch(n){case"input":H(r),Z(r,l,!0);break;case"textarea":H(r),le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[ma]=t,e[fa]=r,Ti(e,t,!1,!1),t.stateNode=e;e:{switch(s=ye(n,r),n){case"dialog":Br("cancel",e),Br("close",e),a=r;break;case"iframe":case"object":case"embed":Br("load",e),a=r;break;case"video":case"audio":for(a=0;a<Dr.length;a++)Br(Dr[a],e);a=r;break;case"source":Br("error",e),a=r;break;case"img":case"image":case"link":Br("error",e),Br("load",e),a=r;break;case"details":Br("toggle",e),a=r;break;case"input":J(e,r),a=Q(e,r),Br("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Br("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Br("invalid",e)}for(l in ve(n,a),c=a)if(c.hasOwnProperty(l)){var u=c[l];"style"===l?be(e,u):"dangerouslySetInnerHTML"===l?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===l?"string"==typeof u?("textarea"!==n||""!==u)&&me(e,u):"number"==typeof u&&me(e,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(i.hasOwnProperty(l)?null!=u&&"onScroll"===l&&Br("scroll",e):null!=u&&y(e,l,u,s))}switch(n){case"input":H(e),Z(e,r,!1);break;case"textarea":H(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ne(e,!!r.multiple,l,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hi(t),null;case 6:if(e&&null!=t.stateNode)Fi(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Qo(Ko.current),Qo(Ho.current),mo(t)){if(r=t.stateNode,n=t.memoizedProps,r[ma]=t,(l=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Yr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yr(r.nodeValue,n,!!(1&e.mode))}l&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ma]=t,t.stateNode=r}return Hi(t),null;case 13:if(Sa(el),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))fo(),po(),t.flags|=98560,l=!1;else if(l=mo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[ma]=t}else po(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hi(t),l=!1}else null!==oo&&(lc(oo),oo=null),l=!0;if(!l)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&el.current?0===Fs&&(Fs=3):hc())),null!==t.updateQueue&&(t.flags|=4),Hi(t),null);case 4:return Xo(),Ii(e,t),null===e&&qr(t.stateNode.containerInfo),Hi(t),null;case 10:return Ro(t.type._context),Hi(t),null;case 19:if(Sa(el),null===(l=t.memoizedState))return Hi(t),null;if(r=!!(128&t.flags),null===(s=l.rendering))if(r)Vi(l,!1);else{if(0!==Fs||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(s=tl(e))){for(t.flags|=128,Vi(l,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=14680066,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ca(el,1&el.current|2),t.child}e=e.sibling}null!==l.tail&&Xe()>qs&&(t.flags|=128,r=!0,Vi(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=tl(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vi(l,!0),null===l.tail&&"hidden"===l.tailMode&&!s.alternate&&!ao)return Hi(t),null}else 2*Xe()-l.renderingStartTime>qs&&1073741824!==n&&(t.flags|=128,r=!0,Vi(l,!1),t.lanes=4194304);l.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=l.last)?n.sibling=s:t.child=s,l.last=s)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=Xe(),t.sibling=null,n=el.current,Ca(el,r?1&n|2:1&n),t):(Hi(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Is)&&(Hi(t),6&t.subtreeFlags&&(t.flags|=8192)):Hi(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ki(e,t){switch(to(t),t.tag){case 1:return Ia(t.type)&&Aa(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xo(),Sa(Pa),Sa(Ra),rl(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(Sa(el),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));po()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Sa(el),null;case 4:return Xo(),null;case 10:return Ro(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ti=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ii=function(){},Ai=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Qo(Ho.current);var o,l=null;switch(n){case"input":a=Q(e,a),r=Q(e,r),l=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),l=[];break;case"textarea":a=re(e,a),r=re(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(u in ve(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var s=a[u];for(o in s)s.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(i.hasOwnProperty(u)?l||(l=[]):(l=l||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(o in s)!s.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&s[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(l||(l=[]),l.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(i.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Br("scroll",e),l||s===c||(l=[])):(l=l||[]).push(u,c))}n&&(l=l||[]).push("style",n);var u=l;(t.updateQueue=u)&&(t.flags|=4)}},Fi=function(e,t,n,r){n!==r&&(t.flags|=4)};var Qi=!1,Ji=!1,Xi="function"==typeof WeakSet?WeakSet:Set,Yi=null;function Zi(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Nc(e,t,n)}else n.current=null}function es(e,t,n){try{n()}catch(n){Nc(e,t,n)}}var ts=!1;function ns(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&es(t,n,o)}a=a.next}while(a!==r)}}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function as(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function os(e){var t=e.alternate;null!==t&&(e.alternate=null,os(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[ma],delete t[fa],delete t[ha],delete t[ba],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function is(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ss(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ss(e,t,n),e=e.sibling;null!==e;)ss(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var us=null,ds=!1;function ms(e,t,n){for(n=n.child;null!==n;)fs(e,t,n),n=n.sibling}function fs(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Ji||Zi(n,t);case 6:var r=us,a=ds;us=null,ms(e,t,n),ds=a,null!==(us=r)&&(ds?(e=us,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):us.removeChild(n.stateNode));break;case 18:null!==us&&(ds?(e=us,n=n.stateNode,8===e.nodeType?sa(e.parentNode,n):1===e.nodeType&&sa(e,n),qt(e)):sa(us,n.stateNode));break;case 4:r=us,a=ds,us=n.stateNode.containerInfo,ds=!0,ms(e,t,n),us=r,ds=a;break;case 0:case 11:case 14:case 15:if(!Ji&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,l=o.destroy;o=o.tag,void 0!==l&&(2&o||4&o)&&es(n,t,l),a=a.next}while(a!==r)}ms(e,t,n);break;case 1:if(!Ji&&(Zi(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Nc(n,t,e)}ms(e,t,n);break;case 21:ms(e,t,n);break;case 22:1&n.mode?(Ji=(r=Ji)||null!==n.memoizedState,ms(e,t,n),Ji=r):ms(e,t,n);break;default:ms(e,t,n)}}function ps(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xi),t.forEach((function(t){var r=Rc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function hs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var l=e,i=t,s=i;e:for(;null!==s;){switch(s.tag){case 5:us=s.stateNode,ds=!1;break e;case 3:case 4:us=s.stateNode.containerInfo,ds=!0;break e}s=s.return}if(null===us)throw Error(o(160));fs(l,i,a),us=null,ds=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(e){Nc(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)bs(t,e),t=t.sibling}function bs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hs(t,e),gs(e),4&r){try{ns(3,e,e.return),rs(3,e)}catch(t){Nc(e,e.return,t)}try{ns(5,e,e.return)}catch(t){Nc(e,e.return,t)}}break;case 1:hs(t,e),gs(e),512&r&&null!==n&&Zi(n,n.return);break;case 5:if(hs(t,e),gs(e),512&r&&null!==n&&Zi(n,n.return),32&e.flags){var a=e.stateNode;try{me(a,"")}catch(t){Nc(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var l=e.memoizedProps,i=null!==n?n.memoizedProps:l,s=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===s&&"radio"===l.type&&null!=l.name&&X(a,l),ye(s,i);var u=ye(s,l);for(i=0;i<c.length;i+=2){var d=c[i],m=c[i+1];"style"===d?be(a,m):"dangerouslySetInnerHTML"===d?de(a,m):"children"===d?me(a,m):y(a,d,m,u)}switch(s){case"input":Y(a,l);break;case"textarea":oe(a,l);break;case"select":var f=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!l.multiple;var p=l.value;null!=p?ne(a,!!l.multiple,p,!1):f!==!!l.multiple&&(null!=l.defaultValue?ne(a,!!l.multiple,l.defaultValue,!0):ne(a,!!l.multiple,l.multiple?[]:"",!1))}a[fa]=l}catch(t){Nc(e,e.return,t)}}break;case 6:if(hs(t,e),gs(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,l=e.memoizedProps;try{a.nodeValue=l}catch(t){Nc(e,e.return,t)}}break;case 3:if(hs(t,e),gs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{qt(t.containerInfo)}catch(t){Nc(e,e.return,t)}break;case 4:default:hs(t,e),gs(e);break;case 13:hs(t,e),gs(e),8192&(a=e.child).flags&&(l=null!==a.memoizedState,a.stateNode.isHidden=l,!l||null!==a.alternate&&null!==a.alternate.memoizedState||(Us=Xe())),4&r&&ps(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Ji=(u=Ji)||d,hs(t,e),Ji=u):hs(t,e),gs(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Yi=e,d=e.child;null!==d;){for(m=Yi=d;null!==Yi;){switch(p=(f=Yi).child,f.tag){case 0:case 11:case 14:case 15:ns(4,f,f.return);break;case 1:Zi(f,f.return);var h=f.stateNode;if("function"==typeof h.componentWillUnmount){r=f,n=f.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Nc(r,n,e)}}break;case 5:Zi(f,f.return);break;case 22:if(null!==f.memoizedState){xs(m);continue}}null!==p?(p.return=f,Yi=p):xs(m)}d=d.sibling}e:for(d=null,m=e;;){if(5===m.tag){if(null===d){d=m;try{a=m.stateNode,u?"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none":(s=m.stateNode,i=null!=(c=m.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,s.style.display=he("display",i))}catch(t){Nc(e,e.return,t)}}}else if(6===m.tag){if(null===d)try{m.stateNode.nodeValue=u?"":m.memoizedProps}catch(t){Nc(e,e.return,t)}}else if((22!==m.tag&&23!==m.tag||null===m.memoizedState||m===e)&&null!==m.child){m.child.return=m,m=m.child;continue}if(m===e)break e;for(;null===m.sibling;){if(null===m.return||m.return===e)break e;d===m&&(d=null),m=m.return}d===m&&(d=null),m.sibling.return=m.return,m=m.sibling}}break;case 19:hs(t,e),gs(e),4&r&&ps(e);case 21:}}function gs(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(me(a,""),r.flags&=-33),cs(e,is(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;ss(e,is(e),l);break;default:throw Error(o(161))}}catch(t){Nc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vs(e,t,n){Yi=e,ys(e,t,n)}function ys(e,t,n){for(var r=!!(1&e.mode);null!==Yi;){var a=Yi,o=a.child;if(22===a.tag&&r){var l=null!==a.memoizedState||Qi;if(!l){var i=a.alternate,s=null!==i&&null!==i.memoizedState||Ji;i=Qi;var c=Ji;if(Qi=l,(Ji=s)&&!c)for(Yi=a;null!==Yi;)s=(l=Yi).child,22===l.tag&&null!==l.memoizedState?ks(a):null!==s?(s.return=l,Yi=s):ks(a);for(;null!==o;)Yi=o,ys(o,t,n),o=o.sibling;Yi=a,Qi=i,Ji=c}Es(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Yi=o):Es(e)}}function Es(e){for(;null!==Yi;){var t=Yi;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Ji||rs(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ji)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:ni(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var l=t.updateQueue;null!==l&&$o(t,l,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}$o(t,i,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var m=d.dehydrated;null!==m&&qt(m)}}}break;default:throw Error(o(163))}Ji||512&t.flags&&as(t)}catch(e){Nc(t,t.return,e)}}if(t===e){Yi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Yi=n;break}Yi=t.return}}function xs(e){for(;null!==Yi;){var t=Yi;if(t===e){Yi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Yi=n;break}Yi=t.return}}function ks(e){for(;null!==Yi;){var t=Yi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rs(4,t)}catch(e){Nc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Nc(t,a,e)}}var o=t.return;try{as(t)}catch(e){Nc(t,o,e)}break;case 5:var l=t.return;try{as(t)}catch(e){Nc(t,l,e)}}}catch(e){Nc(t,t.return,e)}if(t===e){Yi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Yi=i;break}Yi=t.return}}var ws,Ns=Math.ceil,Ss=E.ReactCurrentDispatcher,Cs=E.ReactCurrentOwner,_s=E.ReactCurrentBatchConfig,Rs=0,Ps=null,Os=null,Ts=0,Is=0,As=Na(0),Fs=0,Ds=null,Ls=0,Ms=0,zs=0,Bs=null,js=null,Us=0,qs=1/0,Ws=null,$s=!1,Vs=null,Hs=null,Gs=!1,Ks=null,Qs=0,Js=0,Xs=null,Ys=-1,Zs=0;function ec(){return 6&Rs?Xe():-1!==Ys?Ys:Ys=Xe()}function tc(e){return 1&e.mode?2&Rs&&0!==Ts?Ts&-Ts:null!==bo.transition?(0===Zs&&(Zs=ht()),Zs):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Jt(e.type):1}function nc(e,t,n,r){if(50<Js)throw Js=0,Xs=null,Error(o(185));gt(e,n,r),2&Rs&&e===Ps||(e===Ps&&(!(2&Rs)&&(Ms|=n),4===Fs&&ic(e,Ts)),rc(e,r),1===n&&0===Rs&&!(1&t.mode)&&(qs=Xe()+500,Ba&&qa()))}function rc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-lt(o),i=1<<l,s=a[l];-1===s?i&n&&!(i&r)||(a[l]=ft(i,t)):s<=t&&(e.expiredLanes|=i),o&=~i}}(e,t);var r=mt(e,e===Ps?Ts:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Ba=!0,Ua(e)}(sc.bind(null,e)):Ua(sc.bind(null,e)),la((function(){!(6&Rs)&&qa()})),n=null;else{switch(Et(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pc(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Ys=-1,Zs=0,6&Rs)throw Error(o(327));var n=e.callbackNode;if(kc()&&e.callbackNode!==n)return null;var r=mt(e,e===Ps?Ts:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=bc(e,r);else{t=r;var a=Rs;Rs|=2;var l=pc();for(Ps===e&&Ts===t||(Ws=null,qs=Xe()+500,mc(e,t));;)try{vc();break}catch(t){fc(e,t)}_o(),Ss.current=l,Rs=a,null!==Os?t=0:(Ps=null,Ts=0,t=Fs)}if(0!==t){if(2===t&&0!==(a=pt(e))&&(r=a,t=oc(e,a)),1===t)throw n=Ds,mc(e,0),ic(e,r),rc(e,Xe()),n;if(6===t)ic(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!ir(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=bc(e,r),2===t&&(l=pt(e),0!==l&&(r=l,t=oc(e,l))),1!==t)))throw n=Ds,mc(e,0),ic(e,r),rc(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:xc(e,js,Ws);break;case 3:if(ic(e,r),(130023424&r)===r&&10<(t=Us+500-Xe())){if(0!==mt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(xc.bind(null,e,js,Ws),t);break}xc(e,js,Ws);break;case 4:if(ic(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-lt(r);l=1<<i,(i=t[i])>a&&(a=i),r&=~l}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ns(r/1960))-r)){e.timeoutHandle=ra(xc.bind(null,e,js,Ws),r);break}xc(e,js,Ws);break;default:throw Error(o(329))}}}return rc(e,Xe()),e.callbackNode===n?ac.bind(null,e):null}function oc(e,t){var n=Bs;return e.current.memoizedState.isDehydrated&&(mc(e,t).flags|=256),2!==(e=bc(e,t))&&(t=js,js=n,null!==t&&lc(t)),e}function lc(e){null===js?js=e:js.push.apply(js,e)}function ic(e,t){for(t&=~zs,t&=~Ms,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function sc(e){if(6&Rs)throw Error(o(327));kc();var t=mt(e,0);if(!(1&t))return rc(e,Xe()),null;var n=bc(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=oc(e,r))}if(1===n)throw n=Ds,mc(e,0),ic(e,t),rc(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xc(e,js,Ws),rc(e,Xe()),null}function cc(e,t){var n=Rs;Rs|=1;try{return e(t)}finally{0===(Rs=n)&&(qs=Xe()+500,Ba&&qa())}}function uc(e){null!==Ks&&0===Ks.tag&&!(6&Rs)&&kc();var t=Rs;Rs|=1;var n=_s.transition,r=yt;try{if(_s.transition=null,yt=1,e)return e()}finally{yt=r,_s.transition=n,!(6&(Rs=t))&&qa()}}function dc(){Is=As.current,Sa(As)}function mc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Os)for(n=Os.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Aa();break;case 3:Xo(),Sa(Pa),Sa(Ra),rl();break;case 5:Zo(r);break;case 4:Xo();break;case 13:case 19:Sa(el);break;case 10:Ro(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Ps=e,Os=e=Ac(e.current,null),Ts=Is=t,Fs=0,Ds=null,zs=Ms=Ls=0,js=Bs=null,null!==Io){for(t=0;t<Io.length;t++)if(null!==(r=(n=Io[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var l=o.next;o.next=a,r.next=l}n.pending=r}Io=null}return e}function fc(e,t){for(;;){var n=Os;try{if(_o(),al.current=Yl,ul){for(var r=il.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ul=!1}if(ll=0,cl=sl=il=null,dl=!1,ml=0,Cs.current=null,null===n||null===n.return){Fs=1,Ds=t,Os=null;break}e:{var l=e,i=n.return,s=n,c=t;if(t=Ts,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=s,m=d.tag;if(!(1&d.mode||0!==m&&11!==m&&15!==m)){var f=d.alternate;f?(d.updateQueue=f.updateQueue,d.memoizedState=f.memoizedState,d.lanes=f.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=bi(i);if(null!==p){p.flags&=-257,gi(p,i,s,0,t),1&p.mode&&hi(l,u,t),c=u;var h=(t=p).updateQueue;if(null===h){var b=new Set;b.add(c),t.updateQueue=b}else h.add(c);break e}if(!(1&t)){hi(l,u,t),hc();break e}c=Error(o(426))}else if(ao&&1&s.mode){var g=bi(i);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gi(g,i,s,0,t),ho(ci(c,s));break e}}l=c=ci(c,s),4!==Fs&&(Fs=2),null===Bs?Bs=[l]:Bs.push(l),l=i;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,qo(l,fi(0,c,t));break e;case 1:s=c;var v=l.type,y=l.stateNode;if(!(128&l.flags||"function"!=typeof v.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Hs&&Hs.has(y)))){l.flags|=65536,t&=-t,l.lanes|=t,qo(l,pi(l,s,t));break e}}l=l.return}while(null!==l)}Ec(n)}catch(e){t=e,Os===n&&null!==n&&(Os=n=n.return);continue}break}}function pc(){var e=Ss.current;return Ss.current=Yl,null===e?Yl:e}function hc(){0!==Fs&&3!==Fs&&2!==Fs||(Fs=4),null===Ps||!(268435455&Ls)&&!(268435455&Ms)||ic(Ps,Ts)}function bc(e,t){var n=Rs;Rs|=2;var r=pc();for(Ps===e&&Ts===t||(Ws=null,mc(e,t));;)try{gc();break}catch(t){fc(e,t)}if(_o(),Rs=n,Ss.current=r,null!==Os)throw Error(o(261));return Ps=null,Ts=0,Fs}function gc(){for(;null!==Os;)yc(Os)}function vc(){for(;null!==Os&&!Qe();)yc(Os)}function yc(e){var t=ws(e.alternate,e,Is);e.memoizedProps=e.pendingProps,null===t?Ec(e):Os=t,Cs.current=null}function Ec(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Os=n);if(null===e)return Fs=6,void(Os=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Gi(n,t,Is)))return void(Os=n);if(null!==(t=t.sibling))return void(Os=t);Os=t=e}while(null!==t);0===Fs&&(Fs=5)}function xc(e,t,n){var r=yt,a=_s.transition;try{_s.transition=null,yt=1,function(e,t,n,r){do{kc()}while(null!==Ks);if(6&Rs)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var l=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-lt(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,l),e===Ps&&(Os=Ps=null,Ts=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Gs||(Gs=!0,Pc(tt,(function(){return kc(),null}))),l=!!(15990&n.flags),15990&n.subtreeFlags||l){l=_s.transition,_s.transition=null;var i=yt;yt=1;var s=Rs;Rs|=4,Cs.current=null,function(e,t){if(ea=$t,fr(e=mr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,s=-1,c=-1,u=0,d=0,m=e,f=null;t:for(;;){for(var p;m!==n||0!==a&&3!==m.nodeType||(s=i+a),m!==l||0!==r&&3!==m.nodeType||(c=i+r),3===m.nodeType&&(i+=m.nodeValue.length),null!==(p=m.firstChild);)f=m,m=p;for(;;){if(m===e)break t;if(f===n&&++u===a&&(s=i),f===l&&++d===r&&(c=i),null!==(p=m.nextSibling))break;f=(m=f).parentNode}m=p}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},$t=!1,Yi=t;null!==Yi;)if(e=(t=Yi).child,1028&t.subtreeFlags&&null!==e)e.return=t,Yi=e;else for(;null!==Yi;){t=Yi;try{var h=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var b=h.memoizedProps,g=h.memoizedState,v=t.stateNode,y=v.getSnapshotBeforeUpdate(t.elementType===t.type?b:ni(t.type,b),g);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var E=t.stateNode.containerInfo;1===E.nodeType?E.textContent="":9===E.nodeType&&E.documentElement&&E.removeChild(E.documentElement);break;default:throw Error(o(163))}}catch(e){Nc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Yi=e;break}Yi=t.return}h=ts,ts=!1}(e,n),bs(n,e),pr(ta),$t=!!ea,ta=ea=null,e.current=n,vs(n,e,a),Je(),Rs=s,yt=i,_s.transition=l}else e.current=n;if(Gs&&(Gs=!1,Ks=e,Qs=a),0===(l=e.pendingLanes)&&(Hs=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rc(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if($s)throw $s=!1,e=Vs,Vs=null,e;!!(1&Qs)&&0!==e.tag&&kc(),1&(l=e.pendingLanes)?e===Xs?Js++:(Js=0,Xs=e):Js=0,qa()}(e,t,n,r)}finally{_s.transition=a,yt=r}return null}function kc(){if(null!==Ks){var e=Et(Qs),t=_s.transition,n=yt;try{if(_s.transition=null,yt=16>e?16:e,null===Ks)var r=!1;else{if(e=Ks,Ks=null,Qs=0,6&Rs)throw Error(o(331));var a=Rs;for(Rs|=4,Yi=e.current;null!==Yi;){var l=Yi,i=l.child;if(16&Yi.flags){var s=l.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Yi=u;null!==Yi;){var d=Yi;switch(d.tag){case 0:case 11:case 15:ns(8,d,l)}var m=d.child;if(null!==m)m.return=d,Yi=m;else for(;null!==Yi;){var f=(d=Yi).sibling,p=d.return;if(os(d),d===u){Yi=null;break}if(null!==f){f.return=p,Yi=f;break}Yi=p}}}var h=l.alternate;if(null!==h){var b=h.child;if(null!==b){h.child=null;do{var g=b.sibling;b.sibling=null,b=g}while(null!==b)}}Yi=l}}if(2064&l.subtreeFlags&&null!==i)i.return=l,Yi=i;else e:for(;null!==Yi;){if(2048&(l=Yi).flags)switch(l.tag){case 0:case 11:case 15:ns(9,l,l.return)}var v=l.sibling;if(null!==v){v.return=l.return,Yi=v;break e}Yi=l.return}}var y=e.current;for(Yi=y;null!==Yi;){var E=(i=Yi).child;if(2064&i.subtreeFlags&&null!==E)E.return=i,Yi=E;else e:for(i=y;null!==Yi;){if(2048&(s=Yi).flags)try{switch(s.tag){case 0:case 11:case 15:rs(9,s)}}catch(e){Nc(s,s.return,e)}if(s===i){Yi=null;break e}var x=s.sibling;if(null!==x){x.return=s.return,Yi=x;break e}Yi=s.return}}if(Rs=a,qa(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,_s.transition=t}}return!1}function wc(e,t,n){e=jo(e,t=fi(0,t=ci(n,t),1),1),t=ec(),null!==e&&(gt(e,1,t),rc(e,t))}function Nc(e,t,n){if(3===e.tag)wc(e,e,n);else for(;null!==t;){if(3===t.tag){wc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){t=jo(t,e=pi(t,e=ci(n,e),1),1),e=ec(),null!==t&&(gt(t,1,e),rc(t,e));break}}t=t.return}}function Sc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Ps===e&&(Ts&n)===n&&(4===Fs||3===Fs&&(130023424&Ts)===Ts&&500>Xe()-Us?mc(e,0):zs|=n),rc(e,t)}function Cc(e,t){0===t&&(1&e.mode?(t=ut,!(130023424&(ut<<=1))&&(ut=4194304)):t=1);var n=ec();null!==(e=Do(e,t))&&(gt(e,t,n),rc(e,n))}function _c(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cc(e,n)}function Rc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Cc(e,n)}function Pc(e,t){return Ge(e,t)}function Oc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tc(e,t,n,r){return new Oc(e,t,n,r)}function Ic(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ac(e,t){var n=e.alternate;return null===n?((n=Tc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fc(e,t,n,r,a,l){var i=2;if(r=e,"function"==typeof e)Ic(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case w:return Dc(n.children,a,l,t);case N:i=8,a|=8;break;case S:return(e=Tc(12,n,t,2|a)).elementType=S,e.lanes=l,e;case P:return(e=Tc(13,n,t,a)).elementType=P,e.lanes=l,e;case O:return(e=Tc(19,n,t,a)).elementType=O,e.lanes=l,e;case A:return Lc(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:i=10;break e;case _:i=9;break e;case R:i=11;break e;case T:i=14;break e;case I:i=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Tc(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Dc(e,t,n,r){return(e=Tc(7,e,r,t)).lanes=n,e}function Lc(e,t,n,r){return(e=Tc(22,e,r,t)).elementType=A,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=Tc(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=Tc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bc(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=bt(0),this.expirationTimes=bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=bt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function jc(e,t,n,r,a,o,l,i,s){return e=new Bc(e,t,n,i,s),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Tc(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Mo(o),e}function Uc(e){if(!e)return _a;e:{if(qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ia(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ia(n))return Da(e,n,t)}return t}function qc(e,t,n,r,a,o,l,i,s){return(e=jc(n,r,!0,e,0,o,0,i,s)).context=Uc(null),n=e.current,(o=Bo(r=ec(),a=tc(n))).callback=null!=t?t:null,jo(n,o,a),e.current.lanes=a,gt(e,a,r),rc(e,r),e}function Wc(e,t,n,r){var a=t.current,o=ec(),l=tc(a);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Bo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=jo(a,t,l))&&(nc(e,a,l,o),Uo(e,a,l)),l}function $c(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hc(e,t){Vc(e,t),(e=e.alternate)&&Vc(e,t)}ws=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)yi=!0;else{if(!(e.lanes&n||128&t.flags))return yi=!1,function(e,t,n){switch(t.tag){case 3:Pi(t),po();break;case 5:Yo(t);break;case 1:Ia(t.type)&&La(t);break;case 4:Jo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ca(wo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ca(el,1&el.current),t.flags|=128,null):n&t.child.childLanes?Mi(e,t,n):(Ca(el,1&el.current),null!==(e=$i(e,t,n))?e.sibling:null);Ca(el,1&el.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return qi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ca(el,el.current),r)break;return null;case 22:case 23:return t.lanes=0,Ni(e,t,n)}return $i(e,t,n)}(e,t,n);yi=!!(131072&e.flags)}else yi=!1,ao&&1048576&t.flags&&Za(t,Ha,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Wi(e,t),e=t.pendingProps;var a=Ta(t,Ra.current);Oo(t,n),a=bl(null,t,r,e,a,n);var l=gl();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ia(r)?(l=!0,La(t)):l=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Mo(t),a.updater=ai,t.stateNode=a,a._reactInternals=t,si(t,r,e,n),t=Ri(null,t,r,!0,l,n)):(t.tag=0,ao&&l&&eo(t),Ei(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Wi(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ic(e)?1:0;if(null!=e){if((e=e.$$typeof)===R)return 11;if(e===T)return 14}return 2}(r),e=ni(r,e),a){case 0:t=Ci(null,t,r,e,n);break e;case 1:t=_i(null,t,r,e,n);break e;case 11:t=xi(null,t,r,e,n);break e;case 14:t=ki(null,t,r,ni(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ci(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 1:return r=t.type,a=t.pendingProps,_i(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 3:e:{if(Pi(t),null===e)throw Error(o(387));r=t.pendingProps,a=(l=t.memoizedState).element,zo(e,t),Wo(t,r,null,n);var i=t.memoizedState;if(r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Oi(e,t,r,n,a=ci(Error(o(423)),t));break e}if(r!==a){t=Oi(e,t,r,n,a=ci(Error(o(424)),t));break e}for(ro=ca(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=ko(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(po(),r===a){t=$i(e,t,n);break e}Ei(e,t,r,n)}t=t.child}return t;case 5:return Yo(t),null===e&&co(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==l&&na(r,l)&&(t.flags|=32),Si(e,t),Ei(e,t,i,n),t.child;case 6:return null===e&&co(t),null;case 13:return Mi(e,t,n);case 4:return Jo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xo(t,null,r,n):Ei(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,xi(e,t,r,a=t.elementType===r?a:ni(r,a),n);case 7:return Ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value,Ca(wo,r._currentValue),r._currentValue=i,null!==l)if(ir(l.value,i)){if(l.children===a.children&&!Pa.current){t=$i(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){i=l.child;for(var c=s.firstContext;null!==c;){if(c.context===r){if(1===l.tag){(c=Bo(-1,n&-n)).tag=2;var u=l.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Po(l.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===l.tag)i=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Po(i,n,t),i=l.sibling}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===t){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}Ei(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Oo(t,n),r=r(a=To(a)),t.flags|=1,Ei(e,t,r,n),t.child;case 14:return a=ni(r=t.type,t.pendingProps),ki(e,t,r,a=ni(r.type,a),n);case 15:return wi(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ni(r,a),Wi(e,t),t.tag=1,Ia(r)?(e=!0,La(t)):e=!1,Oo(t,n),li(t,r,a),si(t,r,a,n),Ri(null,t,r,!0,e,n);case 19:return qi(e,t,n);case 22:return Ni(e,t,n)}throw Error(o(156,t.tag))};var Gc="function"==typeof reportError?reportError:function(e){console.error(e)};function Kc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Yc(){}function Zc(e,t,n,r,a){var o=n._reactRootContainer;if(o){var l=o;if("function"==typeof a){var i=a;a=function(){var e=$c(l);i.call(e)}}Wc(t,l,e,a)}else l=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=$c(l);o.call(e)}}var l=qc(t,r,e,0,null,!1,0,"",Yc);return e._reactRootContainer=l,e[pa]=l.current,qr(8===e.nodeType?e.parentNode:e),uc(),l}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=$c(s);i.call(e)}}var s=jc(e,0,!1,null,0,!1,0,"",Yc);return e._reactRootContainer=s,e[pa]=s.current,qr(8===e.nodeType?e.parentNode:e),uc((function(){Wc(t,s,n,r)})),s}(n,t,e,a,r);return $c(l)}Qc.prototype.render=Kc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Wc(e,t,null,null)},Qc.prototype.unmount=Kc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Wc(null,e,null,null)})),t[pa]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Nt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<At.length&&0!==t&&t<At[n].priority;n++);At.splice(n,0,e),0===n&&Mt(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),rc(t,Xe()),!(6&Rs)&&(qs=Xe()+500,qa()))}break;case 13:uc((function(){var t=Do(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Hc(e,1)}},kt=function(e){if(13===e.tag){var t=Do(e,134217728);null!==t&&nc(t,e,134217728,ec()),Hc(e,134217728)}},wt=function(e){if(13===e.tag){var t=tc(e),n=Do(e,t);null!==n&&nc(n,e,t,ec()),Hc(e,t)}},Nt=function(){return yt},St=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},ke=function(e,t,n){switch(t){case"input":if(Y(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=xa(r);if(!a)throw Error(o(90));G(r),Y(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Re=cc,Pe=uc;var eu={usingClientEntryPoint:!1,Events:[ya,Ea,xa,Ce,_e,cc]},tu={findFiberByHostInstance:va,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{at=ru.inject(nu),ot=ru}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jc(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Jc(e))throw Error(o(299));var n=!1,r="",a=Gc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=jc(e,1,!1,null,0,n,0,r,a),e[pa]=t.current,qr(8===e.nodeType?e.parentNode:e),new Kc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Xc(t))throw Error(o(200));return Zc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Jc(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,l="",i=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=qc(t,null,e,1,null!=n?n:null,a,0,l,i),e[pa]=t.current,qr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Qc(t)},t.render=function(e,t,n){if(!Xc(t))throw Error(o(200));return Zc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){Zc(null,null,e,!1,(function(){e._reactRootContainer=null,e[pa]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zc(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,n)=>{var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},799:(e,t)=>{if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},363:(e,t,n)=>{n(799)},287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,b={};function g(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||p}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var E=y.prototype=new v;E.constructor=y,h(E,g.prototype),E.isPureReactComponent=!0;var x=Array.isArray,k=Object.prototype.hasOwnProperty,w={current:null},N={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var a,o={},l=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(l=""+t.key),t)k.call(t,a)&&!N.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:n,type:e,key:l,ref:i,props:o,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,o,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var s=!1;if(null===e)s=!0;else switch(i){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return l=l(s=e),e=""===o?"."+R(s,0):o,x(l)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),P(l,t,a,"",(function(e){return e}))):null!=l&&(C(l)&&(l=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,a+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(_,"$&/")+"/")+e)),t.push(l)),1;if(s=0,o=""===o?".":o+":",x(e))for(var c=0;c<e.length;c++){var u=o+R(i=e[c],c);s+=P(i,t,a,u,l)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(i=e.next()).done;)s+=P(i=i.value,t,a,u=o+R(i,c++),l);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function O(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var I={current:null},A={transition:null},F={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:A,ReactCurrentOwner:w};function D(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=l,t.PureComponent=y,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.act=D,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,l=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,i=w.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!N.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];a.children=s}return{$$typeof:n,type:e.type,key:o,ref:l,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:m,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.transition;A.transition={};try{e()}finally{A.transition=t}},t.unstable_act=D,t.useCallback=function(e,t){return I.current.useCallback(e,t)},t.useContext=function(e){return I.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return I.current.useDeferredValue(e)},t.useEffect=function(e,t){return I.current.useEffect(e,t)},t.useId=function(){return I.current.useId()},t.useImperativeHandle=function(e,t,n){return I.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return I.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return I.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return I.current.useMemo(e,t)},t.useReducer=function(e,t,n){return I.current.useReducer(e,t,n)},t.useRef=function(e){return I.current.useRef(e)},t.useState=function(e){return I.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return I.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return I.current.useTransition()},t.version="18.3.1"},540:(e,t,n)=>{e.exports=n(287)},463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,l=a>>>1;r<l;){var i=2*(r+1)-1,s=e[i],c=i+1,u=e[c];if(0>o(s,n))c<a&&0>o(u,s)?(e[r]=u,e[c]=n,r=c):(e[r]=s,e[i]=n,r=i);else{if(!(c<a&&0>o(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var i=Date,s=i.now();t.unstable_now=function(){return i.now()-s}}var c=[],u=[],d=1,m=null,f=3,p=!1,h=!1,b=!1,g="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function E(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function x(e){if(b=!1,E(e),!h)if(null!==r(c))h=!0,A(k);else{var t=r(u);null!==t&&F(x,t.startTime-e)}}function k(e,n){h=!1,b&&(b=!1,v(C),C=-1),p=!0;var o=f;try{for(E(n),m=r(c);null!==m&&(!(m.expirationTime>n)||e&&!P());){var l=m.callback;if("function"==typeof l){m.callback=null,f=m.priorityLevel;var i=l(m.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?m.callback=i:m===r(c)&&a(c),E(n)}else a(c);m=r(c)}if(null!==m)var s=!0;else{var d=r(u);null!==d&&F(x,d.startTime-n),s=!1}return s}finally{m=null,f=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var w,N=!1,S=null,C=-1,_=5,R=-1;function P(){return!(t.unstable_now()-R<_)}function O(){if(null!==S){var e=t.unstable_now();R=e;var n=!0;try{n=S(!0,e)}finally{n?w():(N=!1,S=null)}}else N=!1}if("function"==typeof y)w=function(){y(O)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,I=T.port2;T.port1.onmessage=O,w=function(){I.postMessage(null)}}else w=function(){g(O,0)};function A(e){S=e,N||(N=!0,w())}function F(e,n){C=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||p||(h=!0,A(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return f},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(f){case 1:case 2:case 3:var t=3;break;default:t=f}var n=f;f=t;try{return e()}finally{f=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=f;f=e;try{return t()}finally{f=n}},t.unstable_scheduleCallback=function(e,a,o){var l=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?l+o:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:i=o+i,sortIndex:-1},o>l?(e.sortIndex=o,n(u,e),null===r(c)&&e===r(u)&&(b?(v(C),C=-1):b=!0,F(x,o-l))):(e.sortIndex=i,n(c,e),h||p||(h=!0,A(k))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=f;return function(){var n=f;f=t;try{return e.apply(this,arguments)}finally{f=n}}}},982:(e,t,n)=>{e.exports=n(463)},154:(e,t,n)=>{var r=n(540),a="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},o=r.useSyncExternalStore,l=r.useRef,i=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,u){var d=l(null);if(null===d.current){var m={hasValue:!1,value:null};d.current=m}else m=d.current;d=s((function(){function e(e){if(!i){if(i=!0,o=e,e=r(e),void 0!==u&&m.hasValue){var t=m.value;if(u(t,e))return l=t}return l=e}if(t=l,a(o,e))return t;var n=r(e);return void 0!==u&&u(t,n)?t:(o=e,l=n)}var o,l,i=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,u]);var f=o(e,d[0],d[1]);return i((function(){m.hasValue=!0,m.value=f}),[f]),c(f),f}},418:(e,t,n)=>{e.exports=n(154)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var l={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>n[e]));return l.default=()=>n,a.d(o,l),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};a.r(o),a.d(o,{hasBrowserEnv:()=>wt,hasStandardBrowserEnv:()=>Nt,hasStandardBrowserWebWorkerEnv:()=>Ct,origin:()=>_t});var l,i=a(540),s=a.t(i,2),c=a(338),u=a(961),d=a.t(u,2);function m(){return m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(l||(l={}));const f="popstate";function p(e,t){if(!1===e||null==e)throw new Error(t)}function h(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function b(e,t){return{usr:e.state,key:e.key,idx:t}}function g(e,t,n,r){return void 0===n&&(n=null),m({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?y(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function v(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function y(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var E;function x(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=D(("string"==typeof t?y(t):t).pathname||"/",n);if(null==a)return null;let o=k(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let l=null;for(let e=0;null==l&&e<o.length;++e){let t=F(a);l=I(o[e],t,r)}return l}(e,t,n,!1)}function k(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let l={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(p(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let i=M([r,l.relativePath]),s=n.concat(l);e.children&&e.children.length>0&&(p(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),k(e.children,t,s,i)),(null!=e.path||e.index)&&t.push({path:i,score:T(i,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of w(e.path))a(e,t,n);else a(e,t)})),t}function w(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let l=w(r.join("/")),i=[];return i.push(...l.map((e=>""===e?o:[o,e].join("/")))),a&&i.push(...l),i.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(E||(E={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const N=/^:[\w-]+$/,S=3,C=2,_=1,R=10,P=-2,O=e=>"*"===e;function T(e,t){let n=e.split("/"),r=n.length;return n.some(O)&&(r+=P),t&&(r+=C),n.filter((e=>!O(e))).reduce(((e,t)=>e+(N.test(t)?S:""===t?_:R)),r)}function I(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",l=[];for(let e=0;e<r.length;++e){let i=r[e],s=e===r.length-1,c="/"===o?t:t.slice(o.length)||"/",u=A({path:i.relativePath,caseSensitive:i.caseSensitive,end:s},c),d=i.route;if(!u&&s&&n&&!r[r.length-1].route.index&&(u=A({path:i.relativePath,caseSensitive:i.caseSensitive,end:!1},c)),!u)return null;Object.assign(a,u.params),l.push({params:a,pathname:M([o,u.pathname]),pathnameBase:z(M([o,u.pathnameBase])),route:d}),"/"!==u.pathnameBase&&(o=M([o,u.pathnameBase]))}return l}function A(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),h("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],l=o.replace(/(.)\/+$/,"$1"),i=a.slice(1),s=r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=i[n]||"";l=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const s=i[n];return e[r]=a&&!s?void 0:(s||"").replace(/%2F/g,"/"),e}),{});return{params:s,pathname:o,pathnameBase:l,pattern:e}}function F(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return h(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function D(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function L(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}const M=e=>e.join("/").replace(/\/\/+/g,"/"),z=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),B=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",j=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const U=["post","put","patch","delete"],q=(new Set(U),["get",...U]);function W(){return W=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},W.apply(this,arguments)}new Set(q),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const $=i.createContext(null),V=i.createContext(null),H=i.createContext(null),G=i.createContext(null),K=i.createContext({outlet:null,matches:[],isDataRoute:!1}),Q=i.createContext(null);function J(){return null!=i.useContext(G)}function X(){return J()||p(!1),i.useContext(G).location}function Y(e){i.useContext(H).static||i.useLayoutEffect(e)}function Z(){let{isDataRoute:e}=i.useContext(K);return e?function(){let{router:e}=function(e){let t=i.useContext($);return t||p(!1),t}(ie.UseNavigateStable),t=ce(se.UseNavigateStable),n=i.useRef(!1);return Y((()=>{n.current=!0})),i.useCallback((function(r,a){void 0===a&&(a={}),n.current&&("number"==typeof r?e.navigate(r):e.navigate(r,W({fromRouteId:t},a)))}),[e,t])}():function(){J()||p(!1);let e=i.useContext($),{basename:t,future:n,navigator:r}=i.useContext(H),{matches:a}=i.useContext(K),{pathname:o}=X(),l=JSON.stringify(function(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}(a,n.v7_relativeSplatPath)),s=i.useRef(!1);return Y((()=>{s.current=!0})),i.useCallback((function(n,a){if(void 0===a&&(a={}),!s.current)return;if("number"==typeof n)return void r.go(n);let i=function(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=y(e):(a=m({},e),p(!a.pathname||!a.pathname.includes("?"),L("?","pathname","search",a)),p(!a.pathname||!a.pathname.includes("#"),L("#","pathname","hash",a)),p(!a.search||!a.search.includes("#"),L("#","search","hash",a)));let o,l=""===e||""===a.pathname,i=l?"/":a.pathname;if(null==i)o=n;else{let e=t.length-1;if(!r&&i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?y(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:B(r),hash:j(a)}}(a,o),c=i&&"/"!==i&&i.endsWith("/"),u=(l||"."===i)&&n.endsWith("/");return s.pathname.endsWith("/")||!c&&!u||(s.pathname+="/"),s}(n,JSON.parse(l),o,"path"===a.relative);null==e&&"/"!==t&&(i.pathname="/"===i.pathname?t:M([t,i.pathname])),(a.replace?r.replace:r.push)(i,a.state,a)}),[t,r,l,o,e])}()}const ee=i.createContext(null);function te(){let{matches:e}=i.useContext(K),t=e[e.length-1];return t?t.params:{}}function ne(e,t,n,r){J()||p(!1);let{navigator:a}=i.useContext(H),{matches:o}=i.useContext(K),s=o[o.length-1],c=s?s.params:{},u=(s&&s.pathname,s?s.pathnameBase:"/");s&&s.route;let d,m=X();if(t){var f;let e="string"==typeof t?y(t):t;"/"===u||(null==(f=e.pathname)?void 0:f.startsWith(u))||p(!1),d=e}else d=m;let h=d.pathname||"/",b=h;if("/"!==u){let e=u.replace(/^\//,"").split("/");b="/"+h.replace(/^\//,"").split("/").slice(e.length).join("/")}let g=x(e,{pathname:b}),v=function(e,t,n,r){var a;if(void 0===t&&(t=[]),void 0===n&&(n=null),void 0===r&&(r=null),null==e){var o;if(null==(o=n)||!o.errors)return null;e=n.matches}let l=e,s=null==(a=n)?void 0:a.errors;if(null!=s){let e=l.findIndex((e=>e.route.id&&void 0!==(null==s?void 0:s[e.route.id])));e>=0||p(!1),l=l.slice(0,Math.min(l.length,e+1))}let c=!1,u=-1;if(n&&r&&r.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(u=e),t.route.id){let{loaderData:e,errors:r}=n,a=t.route.loader&&void 0===e[t.route.id]&&(!r||void 0===r[t.route.id]);if(t.route.lazy||a){c=!0,l=u>=0?l.slice(0,u+1):[l[0]];break}}}return l.reduceRight(((e,r,a)=>{let o,d=!1,m=null,f=null;n&&(o=s&&r.route.id?s[r.route.id]:void 0,m=r.route.errorElement||ae,c&&(u<0&&0===a?(function(e,t,n){!1||ue[e]||(ue[e]=!0)}("route-fallback"),d=!0,f=null):u===a&&(d=!0,f=r.route.hydrateFallbackElement||null)));let p=t.concat(l.slice(0,a+1)),h=()=>{let t;return t=o?m:d?f:r.route.Component?i.createElement(r.route.Component,null):r.route.element?r.route.element:e,i.createElement(le,{match:r,routeContext:{outlet:e,matches:p,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===a)?i.createElement(oe,{location:n.location,revalidation:n.revalidation,component:m,error:o,children:h(),routeContext:{outlet:null,matches:p,isDataRoute:!0}}):h()}),null)}(g&&g.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:M([u,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:M([u,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),o,n,r);return t&&v?i.createElement(G.Provider,{value:{location:W({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:l.Pop}},v):v}function re(){let e=function(){var e;let t=i.useContext(Q),n=function(e){let t=i.useContext(V);return t||p(!1),t}(se.UseRouteError),r=ce(se.UseRouteError);return void 0!==t?t:null==(e=n.errors)?void 0:e[r]}(),t=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return i.createElement(i.Fragment,null,i.createElement("h2",null,"Unexpected Application Error!"),i.createElement("h3",{style:{fontStyle:"italic"}},t),n?i.createElement("pre",{style:r},n):null,null)}const ae=i.createElement(re,null);class oe extends i.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?i.createElement(K.Provider,{value:this.props.routeContext},i.createElement(Q.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function le(e){let{routeContext:t,match:n,children:r}=e,a=i.useContext($);return a&&a.static&&a.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=n.route.id),i.createElement(K.Provider,{value:t},r)}var ie=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ie||{}),se=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(se||{});function ce(e){let t=function(e){let t=i.useContext(K);return t||p(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||p(!1),n.route.id}const ue={};function de(e){return function(e){let t=i.useContext(K).outlet;return t?i.createElement(ee.Provider,{value:e},t):t}(e.context)}function me(e){p(!1)}function fe(e){let{basename:t="/",children:n=null,location:r,navigationType:a=l.Pop,navigator:o,static:s=!1,future:c}=e;J()&&p(!1);let u=t.replace(/^\/*/,"/"),d=i.useMemo((()=>({basename:u,navigator:o,static:s,future:W({v7_relativeSplatPath:!1},c)})),[u,c,o,s]);"string"==typeof r&&(r=y(r));let{pathname:m="/",search:f="",hash:h="",state:b=null,key:g="default"}=r,v=i.useMemo((()=>{let e=D(m,u);return null==e?null:{location:{pathname:e,search:f,hash:h,state:b,key:g},navigationType:a}}),[u,m,f,h,b,g,a]);return null==v?null:i.createElement(H.Provider,{value:d},i.createElement(G.Provider,{children:n,value:v}))}function pe(e){let{children:t,location:n}=e;return ne(he(t),n)}function he(e,t){void 0===t&&(t=[]);let n=[];return i.Children.forEach(e,((e,r)=>{if(!i.isValidElement(e))return;let a=[...t,r];if(e.type===i.Fragment)return void n.push.apply(n,he(e.props.children,a));e.type!==me&&p(!1),e.props.index&&e.props.children&&p(!1);let o={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(o.children=he(e.props.children,a)),n.push(o)})),n}s.startTransition,new Promise((()=>{})),i.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);try{window.__reactRouterVersion="6"}catch(e){}new Map;const be=s.startTransition;function ge(e){let{basename:t,children:n,future:r,window:a}=e,o=i.useRef();var s;null==o.current&&(o.current=(void 0===(s={window:a,v5Compat:!0})&&(s={}),function(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:o=!1}=r,i=a.history,s=l.Pop,c=null,u=d();function d(){return(i.state||{idx:null}).idx}function h(){s=l.Pop;let e=d(),t=null==e?null:e-u;u=e,c&&c({action:s,location:E.location,delta:t})}function y(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:v(e);return n=n.replace(/ $/,"%20"),p(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==u&&(u=0,i.replaceState(m({},i.state,{idx:u}),""));let E={get action(){return s},get location(){return e(a,i)},listen(e){if(c)throw new Error("A history only accepts one active listener");return a.addEventListener(f,h),c=e,()=>{a.removeEventListener(f,h),c=null}},createHref:e=>t(a,e),createURL:y,encodeLocation(e){let t=y(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){s=l.Push;let r=g(E.location,e,t);n&&n(r,e),u=d()+1;let m=b(r,u),f=E.createHref(r);try{i.pushState(m,"",f)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(f)}o&&c&&c({action:s,location:E.location,delta:1})},replace:function(e,t){s=l.Replace;let r=g(E.location,e,t);n&&n(r,e),u=d();let a=b(r,u),m=E.createHref(r);i.replaceState(a,"",m),o&&c&&c({action:s,location:E.location,delta:0})},go:e=>i.go(e)};return E}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return g("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:v(t)}),null,s)));let c=o.current,[u,d]=i.useState({action:c.action,location:c.location}),{v7_startTransition:h}=r||{},y=i.useCallback((e=>{h&&be?be((()=>d(e))):d(e)}),[d,h]);return i.useLayoutEffect((()=>c.listen(y)),[c,y]),i.createElement(fe,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:c,future:r})}var ve,ye;d.flushSync,s.useId,"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"}(ve||(ve={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(ye||(ye={}));const Ee=()=>i.createElement(i.Fragment,null);function xe(e,t){return function(){return e.apply(t,arguments)}}const{toString:ke}=Object.prototype,{getPrototypeOf:we}=Object,Ne=(e=>t=>{const n=ke.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),Se=e=>(e=e.toLowerCase(),t=>Ne(t)===e),Ce=e=>t=>typeof t===e,{isArray:_e}=Array,Re=Ce("undefined"),Pe=Se("ArrayBuffer"),Oe=Ce("string"),Te=Ce("function"),Ie=Ce("number"),Ae=e=>null!==e&&"object"==typeof e,Fe=e=>{if("object"!==Ne(e))return!1;const t=we(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},De=Se("Date"),Le=Se("File"),Me=Se("Blob"),ze=Se("FileList"),Be=Se("URLSearchParams"),[je,Ue,qe,We]=["ReadableStream","Request","Response","Headers"].map(Se);function $e(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,a;if("object"!=typeof e&&(e=[e]),_e(e))for(r=0,a=e.length;r<a;r++)t.call(null,e[r],r,e);else{const a=n?Object.getOwnPropertyNames(e):Object.keys(e),o=a.length;let l;for(r=0;r<o;r++)l=a[r],t.call(null,e[l],l,e)}}function Ve(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,a=n.length;for(;a-- >0;)if(r=n[a],t===r.toLowerCase())return r;return null}const He="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Ge=e=>!Re(e)&&e!==He,Ke=(Qe="undefined"!=typeof Uint8Array&&we(Uint8Array),e=>Qe&&e instanceof Qe);var Qe;const Je=Se("HTMLFormElement"),Xe=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Ye=Se("RegExp"),Ze=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};$e(n,((n,a)=>{let o;!1!==(o=t(n,a,e))&&(r[a]=o||n)})),Object.defineProperties(e,r)},et="abcdefghijklmnopqrstuvwxyz",tt="0123456789",nt={DIGIT:tt,ALPHA:et,ALPHA_DIGIT:et+et.toUpperCase()+tt},rt=Se("AsyncFunction"),at={isArray:_e,isArrayBuffer:Pe,isBuffer:function(e){return null!==e&&!Re(e)&&null!==e.constructor&&!Re(e.constructor)&&Te(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||Te(e.append)&&("formdata"===(t=Ne(e))||"object"===t&&Te(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&Pe(e.buffer),t},isString:Oe,isNumber:Ie,isBoolean:e=>!0===e||!1===e,isObject:Ae,isPlainObject:Fe,isReadableStream:je,isRequest:Ue,isResponse:qe,isHeaders:We,isUndefined:Re,isDate:De,isFile:Le,isBlob:Me,isRegExp:Ye,isFunction:Te,isStream:e=>Ae(e)&&Te(e.pipe),isURLSearchParams:Be,isTypedArray:Ke,isFileList:ze,forEach:$e,merge:function e(){const{caseless:t}=Ge(this)&&this||{},n={},r=(r,a)=>{const o=t&&Ve(n,a)||a;Fe(n[o])&&Fe(r)?n[o]=e(n[o],r):Fe(r)?n[o]=e({},r):_e(r)?n[o]=r.slice():n[o]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&$e(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>($e(t,((t,r)=>{n&&Te(t)?e[r]=xe(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let a,o,l;const i={};if(t=t||{},null==e)return t;do{for(a=Object.getOwnPropertyNames(e),o=a.length;o-- >0;)l=a[o],r&&!r(l,e,t)||i[l]||(t[l]=e[l],i[l]=!0);e=!1!==n&&we(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:Ne,kindOfTest:Se,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(_e(e))return e;let t=e.length;if(!Ie(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Je,hasOwnProperty:Xe,hasOwnProp:Xe,reduceDescriptors:Ze,freezeMethods:e=>{Ze(e,((t,n)=>{if(Te(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];Te(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return _e(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:Ve,global:He,isContextDefined:Ge,ALPHABET:nt,generateString:(e=16,t=nt.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&Te(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(Ae(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const a=_e(e)?[]:{};return $e(e,((e,t)=>{const o=n(e,r+1);!Re(o)&&(a[t]=o)})),t[r]=void 0,a}}return e};return n(e,0)},isAsyncFn:rt,isThenable:e=>e&&(Ae(e)||Te(e))&&Te(e.then)&&Te(e.catch)};function ot(e,t,n,r,a){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),a&&(this.response=a)}at.inherits(ot,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:at.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const lt=ot.prototype,it={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{it[e]={value:e}})),Object.defineProperties(ot,it),Object.defineProperty(lt,"isAxiosError",{value:!0}),ot.from=(e,t,n,r,a,o)=>{const l=Object.create(lt);return at.toFlatObject(e,l,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ot.call(l,e.message,t,n,r,a),l.cause=e,l.name=e.name,o&&Object.assign(l,o),l};const st=ot;function ct(e){return at.isPlainObject(e)||at.isArray(e)}function ut(e){return at.endsWith(e,"[]")?e.slice(0,-2):e}function dt(e,t,n){return e?e.concat(t).map((function(e,t){return e=ut(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const mt=at.toFlatObject(at,{},null,(function(e){return/^is[A-Z]/.test(e)})),ft=function(e,t,n){if(!at.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=at.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!at.isUndefined(t[e])}))).metaTokens,a=n.visitor||c,o=n.dots,l=n.indexes,i=(n.Blob||"undefined"!=typeof Blob&&Blob)&&at.isSpecCompliantForm(t);if(!at.isFunction(a))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(at.isDate(e))return e.toISOString();if(!i&&at.isBlob(e))throw new st("Blob is not supported. Use a Buffer instead.");return at.isArrayBuffer(e)||at.isTypedArray(e)?i&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,a){let i=e;if(e&&!a&&"object"==typeof e)if(at.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(at.isArray(e)&&function(e){return at.isArray(e)&&!e.some(ct)}(e)||(at.isFileList(e)||at.endsWith(n,"[]"))&&(i=at.toArray(e)))return n=ut(n),i.forEach((function(e,r){!at.isUndefined(e)&&null!==e&&t.append(!0===l?dt([n],r,o):null===l?n:n+"[]",s(e))})),!1;return!!ct(e)||(t.append(dt(a,n,o),s(e)),!1)}const u=[],d=Object.assign(mt,{defaultVisitor:c,convertValue:s,isVisitable:ct});if(!at.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!at.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),at.forEach(n,(function(n,o){!0===(!(at.isUndefined(n)||null===n)&&a.call(t,n,at.isString(o)?o.trim():o,r,d))&&e(n,r?r.concat(o):[o])})),u.pop()}}(e),t};function pt(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function ht(e,t){this._pairs=[],e&&ft(e,this,t)}const bt=ht.prototype;bt.append=function(e,t){this._pairs.push([e,t])},bt.toString=function(e){const t=e?function(t){return e.call(this,t,pt)}:pt;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const gt=ht;function vt(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function yt(e,t,n){if(!t)return e;const r=n&&n.encode||vt,a=n&&n.serialize;let o;if(o=a?a(t,n):at.isURLSearchParams(t)?t.toString():new gt(t,n).toString(r),o){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}const Et=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){at.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},xt={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},kt={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:gt,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},wt="undefined"!=typeof window&&"undefined"!=typeof document,Nt=(St="undefined"!=typeof navigator&&navigator.product,wt&&["ReactNative","NativeScript","NS"].indexOf(St)<0);var St;const Ct="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,_t=wt&&window.location.href||"http://localhost",Rt={...o,...kt},Pt=function(e){function t(e,n,r,a){let o=e[a++];if("__proto__"===o)return!0;const l=Number.isFinite(+o),i=a>=e.length;return o=!o&&at.isArray(r)?r.length:o,i?(at.hasOwnProp(r,o)?r[o]=[r[o],n]:r[o]=n,!l):(r[o]&&at.isObject(r[o])||(r[o]=[]),t(e,n,r[o],a)&&at.isArray(r[o])&&(r[o]=function(e){const t={},n=Object.keys(e);let r;const a=n.length;let o;for(r=0;r<a;r++)o=n[r],t[o]=e[o];return t}(r[o])),!l)}if(at.isFormData(e)&&at.isFunction(e.entries)){const n={};return at.forEachEntry(e,((e,r)=>{t(function(e){return at.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},Ot={transitional:xt,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,a=at.isObject(e);if(a&&at.isHTMLForm(e)&&(e=new FormData(e)),at.isFormData(e))return r?JSON.stringify(Pt(e)):e;if(at.isArrayBuffer(e)||at.isBuffer(e)||at.isStream(e)||at.isFile(e)||at.isBlob(e)||at.isReadableStream(e))return e;if(at.isArrayBufferView(e))return e.buffer;if(at.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(a){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return ft(e,new Rt.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Rt.isNode&&at.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((o=at.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return ft(o?{"files[]":e}:e,t&&new t,this.formSerializer)}}return a||r?(t.setContentType("application/json",!1),function(e,t,n){if(at.isString(e))try{return(0,JSON.parse)(e),at.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||Ot.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(at.isResponse(e)||at.isReadableStream(e))return e;if(e&&at.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw st.from(e,st.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Rt.classes.FormData,Blob:Rt.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};at.forEach(["delete","get","head","post","put","patch"],(e=>{Ot.headers[e]={}}));const Tt=Ot,It=at.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),At=Symbol("internals");function Ft(e){return e&&String(e).trim().toLowerCase()}function Dt(e){return!1===e||null==e?e:at.isArray(e)?e.map(Dt):String(e)}function Lt(e,t,n,r,a){return at.isFunction(r)?r.call(this,t,n):(a&&(t=n),at.isString(t)?at.isString(r)?-1!==t.indexOf(r):at.isRegExp(r)?r.test(t):void 0:void 0)}class Mt{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function a(e,t,n){const a=Ft(t);if(!a)throw new Error("header name must be a non-empty string");const o=at.findKey(r,a);(!o||void 0===r[o]||!0===n||void 0===n&&!1!==r[o])&&(r[o||t]=Dt(e))}const o=(e,t)=>at.forEach(e,((e,n)=>a(e,n,t)));if(at.isPlainObject(e)||e instanceof this.constructor)o(e,t);else if(at.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))o((e=>{const t={};let n,r,a;return e&&e.split("\n").forEach((function(e){a=e.indexOf(":"),n=e.substring(0,a).trim().toLowerCase(),r=e.substring(a+1).trim(),!n||t[n]&&It[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(at.isHeaders(e))for(const[t,r]of e.entries())a(r,t,n);else null!=e&&a(t,e,n);return this}get(e,t){if(e=Ft(e)){const n=at.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(at.isFunction(t))return t.call(this,e,n);if(at.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Ft(e)){const n=at.findKey(this,e);return!(!n||void 0===this[n]||t&&!Lt(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function a(e){if(e=Ft(e)){const a=at.findKey(n,e);!a||t&&!Lt(0,n[a],a,t)||(delete n[a],r=!0)}}return at.isArray(e)?e.forEach(a):a(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const a=t[n];e&&!Lt(0,this[a],a,e,!0)||(delete this[a],r=!0)}return r}normalize(e){const t=this,n={};return at.forEach(this,((r,a)=>{const o=at.findKey(n,a);if(o)return t[o]=Dt(r),void delete t[a];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(a):String(a).trim();l!==a&&delete t[a],t[l]=Dt(r),n[l]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return at.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&at.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[At]=this[At]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Ft(e);t[r]||(function(e,t){const n=at.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,a){return this[r].call(this,t,e,n,a)},configurable:!0})}))}(n,e),t[r]=!0)}return at.isArray(e)?e.forEach(r):r(e),this}}Mt.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),at.reduceDescriptors(Mt.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),at.freezeMethods(Mt);const zt=Mt;function Bt(e,t){const n=this||Tt,r=t||n,a=zt.from(r.headers);let o=r.data;return at.forEach(e,(function(e){o=e.call(n,o,a.normalize(),t?t.status:void 0)})),a.normalize(),o}function jt(e){return!(!e||!e.__CANCEL__)}function Ut(e,t,n){st.call(this,null==e?"canceled":e,st.ERR_CANCELED,t,n),this.name="CanceledError"}at.inherits(Ut,st,{__CANCEL__:!0});const qt=Ut;function Wt(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new st("Request failed with status code "+n.status,[st.ERR_BAD_REQUEST,st.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}const $t=(e,t,n=3)=>{let r=0;const a=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let a,o=0,l=0;return t=void 0!==t?t:1e3,function(i){const s=Date.now(),c=r[l];a||(a=s),n[o]=i,r[o]=s;let u=l,d=0;for(;u!==o;)d+=n[u++],u%=e;if(o=(o+1)%e,o===l&&(l=(l+1)%e),s-a<t)return;const m=c&&s-c;return m?Math.round(1e3*d/m):void 0}}(50,250);return function(e,t){let n=0;const r=1e3/t;let a=null;return function(){const t=!0===this,o=Date.now();if(t||o-n>r)return a&&(clearTimeout(a),a=null),n=o,e.apply(null,arguments);a||(a=setTimeout((()=>(a=null,n=Date.now(),e.apply(null,arguments))),r-(o-n)))}}((n=>{const o=n.loaded,l=n.lengthComputable?n.total:void 0,i=o-r,s=a(i);r=o;const c={loaded:o,total:l,progress:l?o/l:void 0,bytes:i,rate:s||void 0,estimated:s&&l&&o<=l?(l-o)/s:void 0,event:n,lengthComputable:null!=l};c[t?"download":"upload"]=!0,e(c)}),n)},Vt=Rt.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=at.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0},Ht=Rt.hasStandardBrowserEnv?{write(e,t,n,r,a,o){const l=[e+"="+encodeURIComponent(t)];at.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),at.isString(r)&&l.push("path="+r),at.isString(a)&&l.push("domain="+a),!0===o&&l.push("secure"),document.cookie=l.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function Gt(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Kt=e=>e instanceof zt?{...e}:e;function Qt(e,t){t=t||{};const n={};function r(e,t,n){return at.isPlainObject(e)&&at.isPlainObject(t)?at.merge.call({caseless:n},e,t):at.isPlainObject(t)?at.merge({},t):at.isArray(t)?t.slice():t}function a(e,t,n){return at.isUndefined(t)?at.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function o(e,t){if(!at.isUndefined(t))return r(void 0,t)}function l(e,t){return at.isUndefined(t)?at.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function i(n,a,o){return o in t?r(n,a):o in e?r(void 0,n):void 0}const s={url:o,method:o,data:o,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:i,headers:(e,t)=>a(Kt(e),Kt(t),!0)};return at.forEach(Object.keys(Object.assign({},e,t)),(function(r){const o=s[r]||a,l=o(e[r],t[r],r);at.isUndefined(l)&&o!==i||(n[r]=l)})),n}const Jt=e=>{const t=Qt({},e);let n,{data:r,withXSRFToken:a,xsrfHeaderName:o,xsrfCookieName:l,headers:i,auth:s}=t;if(t.headers=i=zt.from(i),t.url=yt(Gt(t.baseURL,t.url),e.params,e.paramsSerializer),s&&i.set("Authorization","Basic "+btoa((s.username||"")+":"+(s.password?unescape(encodeURIComponent(s.password)):""))),at.isFormData(r))if(Rt.hasStandardBrowserEnv||Rt.hasStandardBrowserWebWorkerEnv)i.setContentType(void 0);else if(!1!==(n=i.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];i.setContentType([e||"multipart/form-data",...t].join("; "))}if(Rt.hasStandardBrowserEnv&&(a&&at.isFunction(a)&&(a=a(t)),a||!1!==a&&Vt(t.url))){const e=o&&l&&Ht.read(l);e&&i.set(o,e)}return t},Xt="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Jt(e);let a=r.data;const o=zt.from(r.headers).normalize();let l,{responseType:i}=r;function s(){r.cancelToken&&r.cancelToken.unsubscribe(l),r.signal&&r.signal.removeEventListener("abort",l)}let c=new XMLHttpRequest;function u(){if(!c)return;const r=zt.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());Wt((function(e){t(e),s()}),(function(e){n(e),s()}),{data:i&&"text"!==i&&"json"!==i?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:r,config:e,request:c}),c=null}c.open(r.method.toUpperCase(),r.url,!0),c.timeout=r.timeout,"onloadend"in c?c.onloadend=u:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(u)},c.onabort=function(){c&&(n(new st("Request aborted",st.ECONNABORTED,r,c)),c=null)},c.onerror=function(){n(new st("Network Error",st.ERR_NETWORK,r,c)),c=null},c.ontimeout=function(){let e=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const t=r.transitional||xt;r.timeoutErrorMessage&&(e=r.timeoutErrorMessage),n(new st(e,t.clarifyTimeoutError?st.ETIMEDOUT:st.ECONNABORTED,r,c)),c=null},void 0===a&&o.setContentType(null),"setRequestHeader"in c&&at.forEach(o.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),at.isUndefined(r.withCredentials)||(c.withCredentials=!!r.withCredentials),i&&"json"!==i&&(c.responseType=r.responseType),"function"==typeof r.onDownloadProgress&&c.addEventListener("progress",$t(r.onDownloadProgress,!0)),"function"==typeof r.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",$t(r.onUploadProgress)),(r.cancelToken||r.signal)&&(l=t=>{c&&(n(!t||t.type?new qt(null,e,c):t),c.abort(),c=null)},r.cancelToken&&r.cancelToken.subscribe(l),r.signal&&(r.signal.aborted?l():r.signal.addEventListener("abort",l)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);d&&-1===Rt.protocols.indexOf(d)?n(new st("Unsupported protocol "+d+":",st.ERR_BAD_REQUEST,e)):c.send(a||null)}))},Yt=(e,t)=>{let n,r=new AbortController;const a=function(e){if(!n){n=!0,l();const t=e instanceof Error?e:this.reason;r.abort(t instanceof st?t:new qt(t instanceof Error?t.message:t))}};let o=t&&setTimeout((()=>{a(new st(`timeout ${t} of ms exceeded`,st.ETIMEDOUT))}),t);const l=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach((e=>{e&&(e.removeEventListener?e.removeEventListener("abort",a):e.unsubscribe(a))})),e=null)};e.forEach((e=>e&&e.addEventListener&&e.addEventListener("abort",a)));const{signal:i}=r;return i.unsubscribe=l,[i,()=>{o&&clearTimeout(o),o=null}]},Zt=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,a=0;for(;a<n;)r=a+t,yield e.slice(a,r),a=r},en=(e,t,n,r,a)=>{const o=async function*(e,t,n){for await(const r of e)yield*Zt(ArrayBuffer.isView(r)?r:await n(String(r)),t)}(e,t,a);let l=0;return new ReadableStream({type:"bytes",async pull(e){const{done:t,value:a}=await o.next();if(t)return e.close(),void r();let i=a.byteLength;n&&n(l+=i),e.enqueue(new Uint8Array(a))},cancel:e=>(r(e),o.return())},{highWaterMark:2})},tn=(e,t)=>{const n=null!=e;return r=>setTimeout((()=>t({lengthComputable:n,total:e,loaded:r})))},nn="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,rn=nn&&"function"==typeof ReadableStream,an=nn&&("function"==typeof TextEncoder?(on=new TextEncoder,e=>on.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var on;const ln=rn&&(()=>{let e=!1;const t=new Request(Rt.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),sn=rn&&!!(()=>{try{return at.isReadableStream(new Response("").body)}catch(e){}})(),cn={stream:sn&&(e=>e.body)};var un;nn&&(un=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!cn[e]&&(cn[e]=at.isFunction(un[e])?t=>t[e]():(t,n)=>{throw new st(`Response type '${e}' is not supported`,st.ERR_NOT_SUPPORT,n)})})));const dn={http:null,xhr:Xt,fetch:nn&&(async e=>{let{url:t,method:n,data:r,signal:a,cancelToken:o,timeout:l,onDownloadProgress:i,onUploadProgress:s,responseType:c,headers:u,withCredentials:d="same-origin",fetchOptions:m}=Jt(e);c=c?(c+"").toLowerCase():"text";let f,p,[h,b]=a||o||l?Yt([a,o],l):[];const g=()=>{!f&&setTimeout((()=>{h&&h.unsubscribe()})),f=!0};let v;try{if(s&&ln&&"get"!==n&&"head"!==n&&0!==(v=await(async(e,t)=>{const n=at.toFiniteNumber(e.getContentLength());return null==n?(async e=>null==e?0:at.isBlob(e)?e.size:at.isSpecCompliantForm(e)?(await new Request(e).arrayBuffer()).byteLength:at.isArrayBufferView(e)?e.byteLength:(at.isURLSearchParams(e)&&(e+=""),at.isString(e)?(await an(e)).byteLength:void 0))(t):n})(u,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});at.isFormData(r)&&(e=n.headers.get("content-type"))&&u.setContentType(e),n.body&&(r=en(n.body,65536,tn(v,$t(s)),null,an))}at.isString(d)||(d=d?"cors":"omit"),p=new Request(t,{...m,signal:h,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:r,duplex:"half",withCredentials:d});let a=await fetch(p);const o=sn&&("stream"===c||"response"===c);if(sn&&(i||o)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=a[t]}));const t=at.toFiniteNumber(a.headers.get("content-length"));a=new Response(en(a.body,65536,i&&tn(t,$t(i,!0)),o&&g,an),e)}c=c||"text";let l=await cn[at.findKey(cn,c)||"text"](a,e);return!o&&g(),b&&b(),await new Promise(((t,n)=>{Wt(t,n,{data:l,headers:zt.from(a.headers),status:a.status,statusText:a.statusText,config:e,request:p})}))}catch(t){if(g(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new st("Network Error",st.ERR_NETWORK,e,p),{cause:t.cause||t});throw st.from(t,t&&t.code,e,p)}})};at.forEach(dn,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const mn=e=>`- ${e}`,fn=e=>at.isFunction(e)||null===e||!1===e,pn=e=>{e=at.isArray(e)?e:[e];const{length:t}=e;let n,r;const a={};for(let o=0;o<t;o++){let t;if(n=e[o],r=n,!fn(n)&&(r=dn[(t=String(n)).toLowerCase()],void 0===r))throw new st(`Unknown adapter '${t}'`);if(r)break;a[t||"#"+o]=r}if(!r){const e=Object.entries(a).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(mn).join("\n"):" "+mn(e[0]):"as no adapter specified";throw new st("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function hn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new qt(null,e)}function bn(e){return hn(e),e.headers=zt.from(e.headers),e.data=Bt.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),pn(e.adapter||Tt.adapter)(e).then((function(t){return hn(e),t.data=Bt.call(e,e.transformResponse,t),t.headers=zt.from(t.headers),t}),(function(t){return jt(t)||(hn(e),t&&t.response&&(t.response.data=Bt.call(e,e.transformResponse,t.response),t.response.headers=zt.from(t.response.headers))),Promise.reject(t)}))}const gn={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{gn[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const vn={};gn.transitional=function(e,t,n){function r(e,t){return"[Axios v1.7.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,a,o)=>{if(!1===e)throw new st(r(a," has been removed"+(t?" in "+t:"")),st.ERR_DEPRECATED);return t&&!vn[a]&&(vn[a]=!0,console.warn(r(a," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,a,o)}};const yn={assertOptions:function(e,t,n){if("object"!=typeof e)throw new st("options must be an object",st.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let a=r.length;for(;a-- >0;){const o=r[a],l=t[o];if(l){const t=e[o],n=void 0===t||l(t,o,e);if(!0!==n)throw new st("option "+o+" must be "+n,st.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new st("Unknown option "+o,st.ERR_BAD_OPTION)}},validators:gn},En=yn.validators;class xn{constructor(e){this.defaults=e,this.interceptors={request:new Et,response:new Et}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Qt(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:a}=t;void 0!==n&&yn.assertOptions(n,{silentJSONParsing:En.transitional(En.boolean),forcedJSONParsing:En.transitional(En.boolean),clarifyTimeoutError:En.transitional(En.boolean)},!1),null!=r&&(at.isFunction(r)?t.paramsSerializer={serialize:r}:yn.assertOptions(r,{encode:En.function,serialize:En.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=a&&at.merge(a.common,a[t.method]);a&&at.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete a[e]})),t.headers=zt.concat(o,a);const l=[];let i=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(i=i&&e.synchronous,l.unshift(e.fulfilled,e.rejected))}));const s=[];let c;this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)}));let u,d=0;if(!i){const e=[bn.bind(this),void 0];for(e.unshift.apply(e,l),e.push.apply(e,s),u=e.length,c=Promise.resolve(t);d<u;)c=c.then(e[d++],e[d++]);return c}u=l.length;let m=t;for(d=0;d<u;){const e=l[d++],t=l[d++];try{m=e(m)}catch(e){t.call(this,e);break}}try{c=bn.call(this,m)}catch(e){return Promise.reject(e)}for(d=0,u=s.length;d<u;)c=c.then(s[d++],s[d++]);return c}getUri(e){return yt(Gt((e=Qt(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}at.forEach(["delete","get","head","options"],(function(e){xn.prototype[e]=function(t,n){return this.request(Qt(n||{},{method:e,url:t,data:(n||{}).data}))}})),at.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,a){return this.request(Qt(a||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}xn.prototype[e]=t(),xn.prototype[e+"Form"]=t(!0)}));const kn=xn;class wn{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,a){n.reason||(n.reason=new qt(e,r,a),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new wn((function(t){e=t})),cancel:e}}}const Nn=wn,Sn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Sn).forEach((([e,t])=>{Sn[t]=e}));const Cn=Sn,_n=function e(t){const n=new kn(t),r=xe(kn.prototype.request,n);return at.extend(r,kn.prototype,n,{allOwnKeys:!0}),at.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Qt(t,n))},r}(Tt);_n.Axios=kn,_n.CanceledError=qt,_n.CancelToken=Nn,_n.isCancel=jt,_n.VERSION="1.7.2",_n.toFormData=ft,_n.AxiosError=st,_n.Cancel=_n.CanceledError,_n.all=function(e){return Promise.all(e)},_n.spread=function(e){return function(t){return e.apply(null,t)}},_n.isAxiosError=function(e){return at.isObject(e)&&!0===e.isAxiosError},_n.mergeConfig=Qt,_n.AxiosHeaders=zt,_n.formToJSON=e=>Pt(at.isHTMLForm(e)?new FormData(e):e),_n.getAdapter=pn,_n.HttpStatusCode=Cn,_n.default=_n;const Rn=_n,Pn=()=>{const[e,t]=(0,i.useState)([]);var n,r,a,o,l,s;const c=e=>moment(e).subtract(5,"hours").format("YYYY-MM-DD HH:mm:ss"),u=async()=>{try{return(await Rn.get("https://localhost:7040/api/roles")).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}};return(0,i.useEffect)((()=>{n=document.getElementById("kt_modal_add_role"),r=n.querySelector("#kt_modal_add_role_form"),a=new bootstrap.Modal(n),(()=>{var e=FormValidation.formValidation(r,{fields:{role_name:{validators:{notEmpty:{message:"El nombre del Rol es requerido"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap:new FormValidation.plugins.Bootstrap5({rowSelector:".fv-row",eleInvalidClass:"",eleValidClass:""})}});n.querySelector('[data-kt-roles-modal-action="close"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cerrar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Sí",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value&&a.hide()}))})),n.querySelector('[data-kt-roles-modal-action="cancel"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cancelar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Sí",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value?(r.reset(),a.hide()):"cancel"===e.dismiss&&Swal.fire({text:"¡Tu formulario no ha sido cancelado!.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})}))}));const o=n.querySelector('[data-kt-roles-modal-action="submit"]');o.addEventListener("click",(function(n){n.preventDefault();const l=r.querySelectorAll('input[type="checkbox"]');var i=Array.from(l).filter((e=>e.checked&&""!==e.value&&"kt_roles_select_all"!==e.value)).map((e=>({permissionID:e.value,description:e.name,permissionName:e.name}))),s=r.querySelector('input[name="role_name"]').value;e&&e.validate().then((function(e){if("Valid"==e&&i.length>0){var n={roleName:s,description:s,isActive:!0,permissions:i};o.setAttribute("data-kt-indicator","on"),o.disabled=!0,Rn.post("https://localhost:7040/api/roles",n,{headers:{"Content-Type":"application/json"}}).then((function(e){e?(r.reset(),swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),u().then((e=>t(e))).catch((e=>console.error("Error al obtener los datos:",e))),a.hide()):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{o.removeAttribute("data-kt-indicator"),o.disabled=!1}))}else Swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores o no seleccionó un permiso. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})}))}))})(),(()=>{const e=r.querySelector("#kt_roles_select_all"),t=r.querySelectorAll('[type="checkbox"]');e.addEventListener("change",(e=>{t.forEach((t=>{t.checked=e.target.checked}))}))})(),u().then((e=>t(e))).catch((e=>console.error("Error al obtener los datos:",e))),o=document.getElementById("kt_modal_update_role"),l=o.querySelector("#kt_modal_update_role_form"),s=new bootstrap.Modal(o),(()=>{var e=FormValidation.formValidation(l,{fields:{role_name:{validators:{notEmpty:{message:"El nombre del Rol es requerido"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap:new FormValidation.plugins.Bootstrap5({rowSelector:".fv-row",eleInvalidClass:"",eleValidClass:""})}});o.querySelector('[data-kt-roles-modal-action="close"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cerrar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Yes",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value&&s.hide()}))})),o.querySelector('[data-kt-roles-modal-action="cancel"]').addEventListener("click",(e=>{e.preventDefault(),Swal.fire({text:"¿Estás seguro de que te gustaría cancelar?",icon:"warning",showCancelButton:!0,buttonsStyling:!1,confirmButtonText:"Yes",cancelButtonText:"No",customClass:{confirmButton:"btn btn-primary",cancelButton:"btn btn-active-light"}}).then((function(e){e.value?(l.reset(),s.hide()):"cancel"===e.dismiss&&Swal.fire({text:"¡Tu formulario no ha sido cancelado!.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})}))}));const n=o.querySelector('[data-kt-roles-modal-action="submit"]');n.addEventListener("click",(function(r){r.preventDefault();const a=l.querySelectorAll('input[type="checkbox"]');var o=Array.from(a).filter((e=>e.checked&&""!==e.value&&"kt_roles_select_all"!==e.value)).map((e=>({permissionID:e.value,description:e.name,permissionName:e.name}))),i=l.querySelector('input[name="role_name"]').value,c=l.querySelector('input[name="roleID"]').value;e&&e.validate().then((function(e){if("Valid"==e){n.setAttribute("data-kt-indicator","on"),n.disabled=!0;var r={roleID:c,roleName:i,description:i,isActive:!0,permissions:o};Rn.put("https://localhost:7040/api/roles/"+c,r,{headers:{"Content-Type":"application/json"}}).then((function(e){e?(l.reset(),swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),u().then((e=>t(e))).catch((e=>console.error("Error al obtener los datos:",e))),s.hide()):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{n.removeAttribute("data-kt-indicator"),n.disabled=!1}))}else Swal.fire({text:"Sorry, looks like there are some errors detected, please try again.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}))}))})()}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Roles"),i.createElement("ul",{class:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{class:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",class:"text-muted text-hover-primary"},"Home")),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Roles"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"row row-cols-1 row-cols-md-2 row-cols-xl-3 g-5 g-xl-9"},i.createElement("div",{className:"col-md-4"},i.createElement("div",{className:"card h-md-100"},i.createElement("div",{className:"card-body d-flex flex-center"},i.createElement("button",{type:"button",className:"btn btn-clear d-flex flex-column flex-center","data-bs-toggle":"modal","data-bs-target":"#kt_modal_add_role"},i.createElement("img",{src:"assets/media/illustrations/sketchy-1/4.png",alt:"",className:"mw-100 mh-150px mb-7"}),i.createElement("div",{className:"fw-bold fs-3 text-gray-600 text-hover-primary"},"Agregar Rol"))))),e.length>0&&i.createElement(i.Fragment,null,e.map(((e,t)=>i.createElement("div",{className:"col-md-4",key:t},i.createElement("div",{className:"card card-flush h-md-100"},i.createElement("div",{className:"card-header"},i.createElement("div",{className:"card-title"},i.createElement("h2",null,e.description))),i.createElement("div",{className:"card-body pt-1"},i.createElement("div",{className:"fw-bold text-gray-600 mb-5"},"Total de usuarios con este rol: 0"),i.createElement("div",{className:"d-flex flex-column text-gray-600"},i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Creación - ",c(e.createdAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Creado por - ",e.createdBy," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Actualización - ",c(e.updatedAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Actualizado por - ",e.updatedBy," "))),i.createElement("div",{className:"card-footer flex-wrap pt-0"},i.createElement("button",{type:"button",className:"btn btn-light btn-active-light-primary my-1",onClick:()=>(e=>{(l=document.getElementById("kt_modal_update_role_form")).elements.role_name.value=e.roleName,l.elements.roleID.value=e.roleID,(async e=>{try{return(await Rn.get("https://localhost:7040/api/roles/"+e+"/permissions")).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(e.roleID).then((e=>{e.map((e=>{console.log("item",e);const t=l.elements[e.permissionName];t&&(t.checked=!0)}))})).catch((e=>console.error("Error al obtener los datos:",e)))})(e),"data-bs-toggle":"modal","data-bs-target":"#kt_modal_update_role"},"Editar Rol")))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_add_role",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-750px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Registrar Rol"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-roles-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-lg-5 my-7"},i.createElement("form",{id:"kt_modal_add_role_form",className:"form",action:"#"},i.createElement("div",{className:"d-flex flex-column scroll-y me-n7 pe-7",id:"kt_modal_add_role_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"{default: false, lg: true}","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_add_role_header","data-kt-scroll-wrappers":"#kt_modal_add_role_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},i.createElement("span",{className:"required"},"Nombre")),i.createElement("input",{className:"form-control form-control-solid",placeholder:"Ingresa el Nombre del Rol",name:"role_name"})),i.createElement("div",{className:"fv-row"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},"Permisos"),i.createElement("div",{className:"table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5"},i.createElement("tbody",{className:"text-gray-600 fw-semibold"},i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Accesos total",i.createElement("span",{className:"ms-2","data-bs-toggle":"popover","data-bs-trigger":"hover","data-bs-html":"true","data-bs-content":"Permite el acceso total a las opciones del"},i.createElement("i",{className:"ki-outline ki-information fs-7"}))),i.createElement("td",null,i.createElement("label",{className:"form-check form-check-custom form-check-solid me-9"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"kt_roles_select_all",id:"kt_roles_select_all"}),i.createElement("span",{className:"form-check-label",htmlFor:"kt_roles_select_all"},"Seleccionar Todo")))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Gestión de Usuarios"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"1",name:"user_management_search"}),i.createElement("span",{className:"form-check-label"},"Buscar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"2",name:"user_management_write"}),i.createElement("span",{className:"form-check-label"},"Registrar Usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"3",name:"user_management_deactivate"}),i.createElement("span",{className:"form-check-label"},"Desactivar usuarios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"4",name:"user_management_edit"}),i.createElement("span",{className:"form-check-label"},"Editar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"5",name:"user_management_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20 invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"}))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Reclutamiento"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"6",name:"hunting_search"}),i.createElement("span",{className:"form-check-label"},"Buscar postulantes")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"7",name:"hunting_create_criteria"}),i.createElement("span",{className:"form-check-label"},"Registrar criterios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"8",name:"hunting_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"9",name:"hunting_export_eval"}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20 invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20  invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Roles y Permisos"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"11",name:"roles_create"}),i.createElement("span",{className:"form-check-label"},"Registrar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"10",name:"roles_edit"}),i.createElement("span",{className:"form-check-label"},"Editar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Editar Roles")))))))))),i.createElement("div",{className:"text-center pt-15"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-roles-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-roles-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_update_role",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-750px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Actualizar Rol"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-roles-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 my-7"},i.createElement("form",{id:"kt_modal_update_role_form",className:"form",action:"#"},i.createElement("input",{type:"hidden",name:"roleID",id:"roleID"}),i.createElement("div",{className:"d-flex flex-column scroll-y me-n7 pe-7",id:"kt_modal_update_role_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"{default: false, lg: true}","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_update_role_header","data-kt-scroll-wrappers":"#kt_modal_update_role_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},i.createElement("span",{className:"required"},"Nombre")),i.createElement("input",{className:"form-control form-control-solid",placeholder:"Ingresa el Nombre del Rol",name:"role_name"})),i.createElement("div",{className:"fv-row"},i.createElement("label",{className:"fs-5 fw-bold form-label mb-2"},"Permisos"),i.createElement("div",{className:"table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5"},i.createElement("tbody",{className:"text-gray-600 fw-semibold"},i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Accesos total",i.createElement("span",{className:"ms-2","data-bs-toggle":"popover","data-bs-trigger":"hover","data-bs-html":"true","data-bs-content":"Permite el acceso total a las opciones del"},i.createElement("i",{className:"ki-outline ki-information fs-7"}))),i.createElement("td",null,i.createElement("label",{className:"form-check form-check-custom form-check-solid me-9"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",id:"kt_roles_select_all"}),i.createElement("span",{className:"form-check-label",htmlFor:"kt_roles_select_all"},"Seleccionar Todo")))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Gestión de Usuarios"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"1",name:"user_management_search"}),i.createElement("span",{className:"form-check-label"},"Buscar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"2",name:"user_management_write"}),i.createElement("span",{className:"form-check-label"},"Registrar Usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"3",name:"user_management_deactivate"}),i.createElement("span",{className:"form-check-label"},"Desactivar usuarios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"4",name:"user_management_edit"}),i.createElement("span",{className:"form-check-label"},"Editar usuarios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"5",name:"user_management_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Editar usuarios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Reclutamiento"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"6",name:"hunting_search"}),i.createElement("span",{className:"form-check-label"},"Buscar postulantes")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"7",name:"hunting_create_criteria"}),i.createElement("span",{className:"form-check-label"},"Registrar criterios")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"8",name:"hunting_post_forms"}),i.createElement("span",{className:"form-check-label"},"Publicar formularios"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"}),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"9",name:"hunting_post_forms"}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20 invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:""}),i.createElement("span",{className:"form-check-label"},"Exportar Evaluaciones"))))),i.createElement("tr",null,i.createElement("td",{className:"text-gray-800"},"Roles y Permisos"),i.createElement("td",null,i.createElement("div",{className:"d-flex"},i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"11",name:"roles_create"}),i.createElement("span",{className:"form-check-label"},"Registrar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid me-5 me-lg-20"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"10",name:"roles_edit"}),i.createElement("span",{className:"form-check-label"},"Editar Roles")),i.createElement("label",{className:"form-check form-check-sm form-check-custom form-check-solid invisible"},i.createElement("input",{className:"form-check-input",type:"checkbox",value:"",name:"financial_management_write"}),i.createElement("span",{className:"form-check-label"},"Editar Roles")))))))))),i.createElement("div",{className:"text-center pt-15"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-roles-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-roles-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))))))};var On,Tn=new Uint8Array(16);function In(){if(!On&&!(On="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return On(Tn)}for(var An=[],Fn=0;Fn<256;++Fn)An.push((Fn+256).toString(16).slice(1));function Dn(e,t=0){return(An[e[t+0]]+An[e[t+1]]+An[e[t+2]]+An[e[t+3]]+"-"+An[e[t+4]]+An[e[t+5]]+"-"+An[e[t+6]]+An[e[t+7]]+"-"+An[e[t+8]]+An[e[t+9]]+"-"+An[e[t+10]]+An[e[t+11]]+An[e[t+12]]+An[e[t+13]]+An[e[t+14]]+An[e[t+15]]).toLowerCase()}var Ln,Mn,zn=0,Bn=0;const jn=()=>{const[e,t]=(0,i.useState)([]);let n=Z();const r=e=>moment(e).subtract(5,"hours").format("YYYY-MM-DD HH:mm:ss");return(0,i.useEffect)((()=>{(async()=>{try{return(await Rn.get("https://localhost:7040/api/form")).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})().then((e=>t(e.forms)))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Formularios de evaluación"),i.createElement("ul",{class:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{class:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",class:"text-muted text-hover-primary"},"Home")),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Formulario de Evaluación"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card"},i.createElement("div",{className:"card-header border-0"},i.createElement("div",{className:"card-title"},i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("i",{className:"ki-outline ki-magnifier fs-3 position-absolute ms-5"}),i.createElement("input",{type:"text",id:"titleSearch",className:"form-control form-control-solid w-250px ps-13",style:{width:"450px!important"},placeholder:"Buscar por nombre"})),i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("label",{className:"form-label ms-4"},"Fecha de Creación"),i.createElement("input",{type:"date",id:"createdAtInSearch",className:"ms-4 form-control form-control-solid w-250px ps-13"})),i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("label",{className:"form-label ms-4"},"Fecha Fin"),i.createElement("input",{type:"date",id:"createdAtFnSearch",className:"ms-4 form-control form-control-solid w-250px ps-13"}))),i.createElement("div",{className:"card-toolbar"},i.createElement("div",{className:"d-flex justify-content-end","data-kt-user-table-toolbar":"base"},i.createElement("button",{type:"button",className:"btn btn-light-primary me-3",onClick:()=>{(async(e,t,n)=>{try{var r="https://localhost:7040/api/form/search";return e&&(r=r+"?title="+e),t&&n&&e&&(r=r+"&startDate="+t+"&endDate="+n),t&&n&&!e&&(r=r+"?startDate="+t+"&endDate="+n),(await Rn.get(r)).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(document.getElementById("titleSearch").value||null,document.getElementById("createdAtInSearch").value||null,document.getElementById("createdAtFnSearch").value||null).then((e=>t(e)))}},i.createElement("i",{className:"ki-outline ki-sarch fs-2"}),"Buscar"),i.createElement("button",{type:"button",onClick:()=>{const e=function(e,t,n){var r=t&&n||0,a=t||new Array(16),o=(e=e||{}).node,l=e.clockseq;if(e._v6||(o||(o=Ln),null==l&&(l=Mn)),null==o||null==l){var i=e.random||(e.rng||In)();null==o&&(o=[i[0],i[1],i[2],i[3],i[4],i[5]],Ln||e._v6||(o[0]|=1,Ln=o)),null==l&&(l=16383&(i[6]<<8|i[7]),void 0!==Mn||e._v6||(Mn=l))}var s=void 0!==e.msecs?e.msecs:Date.now(),c=void 0!==e.nsecs?e.nsecs:Bn+1,u=s-zn+(c-Bn)/1e4;if(u<0&&void 0===e.clockseq&&(l=l+1&16383),(u<0||s>zn)&&void 0===e.nsecs&&(c=0),c>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");zn=s,Bn=c,Mn=l;var d=(1e4*(268435455&(s+=122192928e5))+c)%4294967296;a[r++]=d>>>24&255,a[r++]=d>>>16&255,a[r++]=d>>>8&255,a[r++]=255&d;var m=s/4294967296*1e4&268435455;a[r++]=m>>>8&255,a[r++]=255&m,a[r++]=m>>>24&15|16,a[r++]=m>>>16&255,a[r++]=l>>>8|128,a[r++]=255&l;for(var f=0;f<6;++f)a[r+f]=o[f];return t||Dn(a)}();n("/form/"+e)},className:"btn btn-primary"},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Formulario")),i.createElement("div",{className:"d-flex justify-content-end align-items-center d-none","data-kt-user-table-toolbar":"selected"},i.createElement("div",{className:"fw-bold me-5"},i.createElement("span",{className:"me-2","data-kt-user-table-select":"selected_count"}),"Seleccionado"),i.createElement("button",{type:"button",className:"btn btn-danger","data-kt-user-table-select":"delete_selected"},"Desactivar Seleccionados"))))),i.createElement("div",{className:"row row-cols-1 row-cols-md-2 row-cols-xl-3 g-5 g-xl-9 mt-1"},e.length>0&&i.createElement(i.Fragment,null,e.map(((e,t)=>i.createElement("div",{className:"col-md-4",key:t},i.createElement("div",{className:"card card-flush h-md-100"},i.createElement("div",{className:"card-header"},i.createElement("div",{className:"card-title"},i.createElement("h2",null,e.title))),i.createElement("div",{className:"card-body pt-1"},i.createElement("div",{className:"fw-bold text-gray-600 mb-5"},"Total de Preguntas: ",e.questions.length),i.createElement("div",{className:"d-flex flex-column text-gray-600"},i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Creación - ",r(e.createdAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Creado por - ",e.createdBy," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Fecha de Actualización - ",r(e.updatedAt)," "),i.createElement("div",{className:"d-flex align-items-center py-2"},i.createElement("span",{className:"bullet bg-primary me-3"}),"Actualizado por - ",e.updatedBy," "))),i.createElement("div",{className:"card-footer flex-wrap pt-0"},i.createElement("button",{type:"button",className:"btn btn-light btn-active-light-primary my-1",onClick:()=>(e=>{console.log("item",e),n("/form/"+e.id)})(e)},"Editar Formulario")))))))))))},Un=()=>i.createElement(i.Fragment,null,i.createElement(jn,null));function qn(){return qn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qn.apply(null,arguments)}function Wn(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}function $n(e,t){if(null==e)return{};var n,r,a=Wn(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.includes(n)||{}.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function Vn(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Vn(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}const Hn=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Vn(e))&&(r&&(r+=" "),r+=t);return r};function Gn(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Kn(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(Gn(e.value)&&""!==e.value||t&&Gn(e.defaultValue)&&""!==e.defaultValue)}var Qn=a(146),Jn=a.n(Qn),Xn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const Yn="object"===("undefined"==typeof window?"undefined":Xn(window))&&"object"===("undefined"==typeof document?"undefined":Xn(document))&&9===document.nodeType;function Zn(e){return Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zn(e)}function er(e){var t=function(e,t){if("object"!=Zn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Zn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Zn(t)?t:t+""}function tr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,er(r.key),r)}}function nr(e,t,n){return t&&tr(e.prototype,t),n&&tr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function rr(e,t){return rr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},rr(e,t)}function ar(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,rr(e,t)}function or(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var lr={}.constructor;function ir(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(ir);if(e.constructor!==lr)return e;var t={};for(var n in e)t[n]=ir(e[n]);return t}function sr(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,a=ir(t);return r.plugins.onCreateRule(e,a,n)||(e[0],null)}var cr=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},ur=function(e){if(!Array.isArray(e))return e;var t="";if(Array.isArray(e[0]))for(var n=0;n<e.length&&"!important"!==e[n];n++)t&&(t+=", "),t+=cr(e[n]," ");else t=cr(e,", ");return"!important"===e[e.length-1]&&(t+=" !important"),t};function dr(e){return e&&!1===e.format?{linebreak:"",space:""}:{linebreak:"\n",space:" "}}function mr(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function fr(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var a=n.indent,o=void 0===a?0:a,l=t.fallbacks;!1===n.format&&(o=-1/0);var i=dr(n),s=i.linebreak,c=i.space;if(e&&o++,l)if(Array.isArray(l))for(var u=0;u<l.length;u++){var d=l[u];for(var m in d){var f=d[m];null!=f&&(r&&(r+=s),r+=mr(m+":"+c+ur(f)+";",o))}}else for(var p in l){var h=l[p];null!=h&&(r&&(r+=s),r+=mr(p+":"+c+ur(h)+";",o))}for(var b in t){var g=t[b];null!=g&&"fallbacks"!==b&&(r&&(r+=s),r+=mr(b+":"+c+ur(g)+";",o))}return(r||n.allowEmpty)&&e?(r&&(r=""+s+r+s),mr(""+e+c+"{"+r,--o)+mr("}",o)):r}var pr=/([[\].#*$><+~=|^:(),"'`\s])/g,hr="undefined"!=typeof CSS&&CSS.escape,br=function(e){return hr?hr(e):e.replace(pr,"\\$1")},gr=function(){function e(e,t,n){this.type="style",this.isProcessed=!1;var r=n.sheet,a=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:a&&(this.renderer=new a)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var a=t;n&&!1===n.process||(a=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==a||!1===a,l=e in this.style;if(o&&!l&&!r)return this;var i=o&&l;if(i?delete this.style[e]:this.style[e]=a,this.renderable&&this.renderer)return i?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,a),this;var s=this.options.sheet;return s&&s.attached,this},e}(),vr=function(e){function t(t,n,r){var a;a=e.call(this,t,n,r)||this;var o=r.selector,l=r.scoped,i=r.sheet,s=r.generateId;return o?a.selectorText=o:!1!==l&&(a.id=s(or(or(a)),i),a.selectorText="."+br(a.id)),a}ar(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=ur(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?qn({},e,{allowEmpty:!0}):e;return fr(this.selectorText,this.style,n)},nr(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(gr),yr={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new vr(e,t,n)}},Er={indent:1,children:!0},xr=/@([\w-]+)/,kr=function(){function e(e,t,n){this.type="conditional",this.isProcessed=!1,this.key=e;var r=e.match(xr);for(var a in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new Hr(qn({},n,{parent:this})),t)this.rules.add(a,t[a]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.replaceRule=function(e,t,n){var r=this.rules.replace(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.toString=function(e){void 0===e&&(e=Er);var t=dr(e).linebreak;if(null==e.indent&&(e.indent=Er.indent),null==e.children&&(e.children=Er.children),!1===e.children)return this.query+" {}";var n=this.rules.toString(e);return n?this.query+" {"+t+n+t+"}":""},e}(),wr=/@container|@media|@supports\s+/,Nr={onCreateRule:function(e,t,n){return wr.test(e)?new kr(e,t,n):null}},Sr={indent:1,children:!0},Cr=/@keyframes\s+([\w-]+)/,_r=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.isProcessed=!1;var r=e.match(Cr);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var a=n.scoped,o=n.sheet,l=n.generateId;for(var i in this.id=!1===a?this.name:br(l(this,o)),this.rules=new Hr(qn({},n,{parent:this})),t)this.rules.add(i,t[i],qn({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){void 0===e&&(e=Sr);var t=dr(e).linebreak;if(null==e.indent&&(e.indent=Sr.indent),null==e.children&&(e.children=Sr.children),!1===e.children)return this.at+" "+this.id+" {}";var n=this.rules.toString(e);return n&&(n=""+t+n+t),this.at+" "+this.id+" {"+n+"}"},e}(),Rr=/@keyframes\s+/,Pr=/\$([\w-]+)/g,Or=function(e,t){return"string"==typeof e?e.replace(Pr,(function(e,n){return n in t?t[n]:e})):e},Tr=function(e,t,n){var r=e[t],a=Or(r,n);a!==r&&(e[t]=a)},Ir={onCreateRule:function(e,t,n){return"string"==typeof e&&Rr.test(e)?new _r(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&Tr(e,"animation-name",n.keyframes),"animation"in e&&Tr(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return Or(e,r.keyframes);default:return e}}},Ar=function(e){function t(){return e.apply(this,arguments)||this}return ar(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?qn({},e,{allowEmpty:!0}):e;return fr(this.key,this.style,n)},t}(gr),Fr={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new Ar(e,t,n):null}},Dr=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.isProcessed=!1,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){var t=dr(e).linebreak;if(Array.isArray(this.style)){for(var n="",r=0;r<this.style.length;r++)n+=fr(this.at,this.style[r]),this.style[r+1]&&(n+=t);return n}return fr(this.at,this.style,e)},e}(),Lr=/@font-face/,Mr={onCreateRule:function(e,t,n){return Lr.test(e)?new Dr(e,t,n):null}},zr=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.isProcessed=!1,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return fr(this.key,this.style,e)},e}(),Br={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new zr(e,t,n):null}},jr=function(){function e(e,t,n){this.type="simple",this.isProcessed=!1,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),Ur={"@charset":!0,"@import":!0,"@namespace":!0},qr={onCreateRule:function(e,t,n){return e in Ur?new jr(e,t,n):null}},Wr=[yr,Nr,Ir,Fr,Mr,Br,qr],$r={process:!0},Vr={force:!0,process:!0},Hr=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,a=r.parent,o=r.sheet,l=r.jss,i=r.Renderer,s=r.generateId,c=r.scoped,u=qn({classes:this.classes,parent:a,sheet:o,jss:l,Renderer:i,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(u.selector="."+br(this.classes[d]));var m=sr(d,t,u);if(!m)return null;this.register(m);var f=void 0===u.index?this.index.length:u.index;return this.index.splice(f,0,m),m},t.replace=function(e,t,n){var r=this.get(e),a=this.index.indexOf(r);r&&this.remove(r);var o=n;return-1!==a&&(o=qn({},n,{index:a})),this.add(e,t,o)},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof vr?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof _r&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof vr?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof _r&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.get(e),t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=$r);var a=this.options,o=a.jss.plugins,l=a.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var i=t.style;if(o.onUpdate(n,t,l,r),r.process&&i&&i!==t.style){for(var s in o.onProcessStyle(t.style,t,l),t.style){var c=t.style[s];c!==i[s]&&t.prop(s,c,Vr)}for(var u in i){var d=t.style[u],m=i[u];null==d&&d!==m&&t.prop(u,null,Vr)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,a=dr(e).linebreak,o=0;o<this.index.length;o++){var l=this.index[o].toString(e);(l||r)&&(t&&(t+=a),t+=l)}return t},e}(),Gr=function(){function e(e,t){for(var n in this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=qn({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Hr(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var a=this.rules.add(e,t,n);return a?(this.options.jss.plugins.onProcessRule(a),this.attached?this.deployed?(r?r.push(a):(this.insertRule(a),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),a):a:(this.deployed=!1,a)):null},t.replaceRule=function(e,t,n){var r=this.rules.get(e);if(!r)return this.addRule(e,t,n);var a=this.rules.replace(e,t,n);return a&&this.options.jss.plugins.onProcessRule(a),this.attached?this.deployed?(this.renderer&&(a?r.renderable&&this.renderer.replaceRule(r.renderable,a):this.renderer.deleteRule(r)),a):a:(this.deployed=!1,a)},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var a=this.addRule(r,e[r],t);a&&n.push(a)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Kr=function(){function e(){this.plugins={internal:[],external:[]},this.registry={}}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var a=this.registry.onCreateRule[r](e,t,n);if(a)return a}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var a=0;a<this.registry.onUpdate.length;a++)this.registry.onUpdate[a](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,a=0;a<this.registry.onChangeValue.length;a++)r=this.registry.onChangeValue[a](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Qr=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Wn(t,["attached"]),a=dr(r).linebreak,o="",l=0;l<this.registry.length;l++){var i=this.registry[l];null!=n&&i.attached!==n||(o&&(o+=a),o+=i.toString(r))}return o},nr(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),Jr=new Qr,Xr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),Yr="2f1acc6c3a606b082e5eef5e54414ffb";null==Xr[Yr]&&(Xr[Yr]=0);var Zr=Xr[Yr]++,ea=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var a="",o="";return r&&(r.options.classNamePrefix&&(o=r.options.classNamePrefix),null!=r.options.jss.id&&(a=String(r.options.jss.id))),e.minify?""+(o||"c")+Zr+a+t:o+n.key+"-"+Zr+(a?"-"+a:"")+"-"+t}},ta=function(e){var t;return function(){return t||(t=e()),t}},na=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ra=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=ur(n)),e.attributeStyleMap)e.attributeStyleMap.set(t,r);else{var a=r?r.indexOf("!important"):-1,o=a>-1?r.substr(0,a-1):r;e.style.setProperty(t,o,a>-1?"important":"")}}catch(e){return!1}return!0},aa=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},oa=function(e,t){return e.selectorText=t,e.selectorText===t},la=ta((function(){return document.querySelector("head")}));var ia=ta((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),sa=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},ca=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},ua=function(){function e(e){this.getPropertyValue=na,this.setProperty=ra,this.removeProperty=aa,this.setSelector=oa,this.hasInsertedRules=!1,this.cssRules=[],e&&Jr.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,a=t.element;this.element=a||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var o=ia();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=function(e){var t=Jr.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e),n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var a=function(e){for(var t=la(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(a)return{parent:a.parentNode,node:a.nextSibling}}return!1}(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var a=n,o=a.parentNode;o&&o.insertBefore(e,a.nextSibling)}else la().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,a=n;if("conditional"===e.type||"keyframes"===e.type){var o=ca(n,t);if(!1===(a=sa(n,r.toString({children:!1}),o)))return!1;this.refCssRule(e,o,a)}return this.insertRules(r.rules,a),a}var l=e.toString();if(!l)return!1;var i=ca(n,t),s=sa(n,l,i);return!1!==s&&(this.hasInsertedRules=!0,this.refCssRule(e,i,s),s)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof Gr&&this.cssRules.splice(t,0,n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),da=0,ma=function(){function e(e){this.id=da++,this.version="10.10.0",this.plugins=new Kr,this.options={id:{minify:!1},createGenerateId:ea,Renderer:Yn?ua:null,plugins:[]},this.generateId=ea({minify:!1});for(var t=0;t<Wr.length;t++)this.plugins.use(Wr[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=qn({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===Jr.index?0:Jr.index+1);var r=new Gr(e,qn({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),Jr.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=qn({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var a=sr(e,t,r);return a&&this.plugins.onProcessRule(a),a},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}(),fa=function(e){return new ma(e)},pa="object"==typeof CSS&&null!=CSS&&"number"in CSS;function ha(e){var t=null;for(var n in e){var r=e[n],a=typeof r;if("function"===a)t||(t={}),t[n]=r;else if("object"===a&&null!==r&&!Array.isArray(r)){var o=ha(r);o&&(t||(t={}),t[n]=o)}}return t}function ba(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=qn({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}fa();var ga={set:function(e,t,n,r){var a=e.get(t);a||(a=new Map,e.set(t,a)),a.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};const va=ga,ya=i.createContext(null);function Ea(){return i.useContext(ya)}const xa="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var ka=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],wa=Date.now(),Na="fnValues"+wa,Sa="fnStyle"+ ++wa;var Ca="@global",_a=function(){function e(e,t,n){for(var r in this.type="global",this.at=Ca,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new Hr(qn({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.replaceRule=function(e,t,n){var r=this.rules.replace(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(e){return this.rules.toString(e)},e}(),Ra=function(){function e(e,t,n){this.type="global",this.at=Ca,this.isProcessed=!1,this.key=e,this.options=n;var r=e.substr(8);this.rule=n.jss.createRule(r,t,qn({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Pa=/\s*,\s*/g;function Oa(e,t){for(var n=e.split(Pa),r="",a=0;a<n.length;a++)r+=t+" "+n[a].trim(),n[a+1]&&(r+=", ");return r}var Ta=/\s*,\s*/g,Ia=/&/g,Aa=/\$([\w-]+)/g;var Fa=/[A-Z]/g,Da=/^ms-/,La={};function Ma(e){return"-"+e.toLowerCase()}const za=function(e){if(La.hasOwnProperty(e))return La[e];var t=e.replace(Fa,Ma);return La[e]=Da.test(t)?"-"+t:t};function Ba(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:za(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ba):t.fallbacks=Ba(e.fallbacks)),t}var ja=pa&&CSS?CSS.px:"px",Ua=pa&&CSS?CSS.ms:"ms",qa=pa&&CSS?CSS.percent:"%";function Wa(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var a in e)r[a]=e[a],r[a.replace(t,n)]=e[a];return r}var $a=Wa({"animation-delay":Ua,"animation-duration":Ua,"background-position":ja,"background-position-x":ja,"background-position-y":ja,"background-size":ja,border:ja,"border-bottom":ja,"border-bottom-left-radius":ja,"border-bottom-right-radius":ja,"border-bottom-width":ja,"border-left":ja,"border-left-width":ja,"border-radius":ja,"border-right":ja,"border-right-width":ja,"border-top":ja,"border-top-left-radius":ja,"border-top-right-radius":ja,"border-top-width":ja,"border-width":ja,"border-block":ja,"border-block-end":ja,"border-block-end-width":ja,"border-block-start":ja,"border-block-start-width":ja,"border-block-width":ja,"border-inline":ja,"border-inline-end":ja,"border-inline-end-width":ja,"border-inline-start":ja,"border-inline-start-width":ja,"border-inline-width":ja,"border-start-start-radius":ja,"border-start-end-radius":ja,"border-end-start-radius":ja,"border-end-end-radius":ja,margin:ja,"margin-bottom":ja,"margin-left":ja,"margin-right":ja,"margin-top":ja,"margin-block":ja,"margin-block-end":ja,"margin-block-start":ja,"margin-inline":ja,"margin-inline-end":ja,"margin-inline-start":ja,padding:ja,"padding-bottom":ja,"padding-left":ja,"padding-right":ja,"padding-top":ja,"padding-block":ja,"padding-block-end":ja,"padding-block-start":ja,"padding-inline":ja,"padding-inline-end":ja,"padding-inline-start":ja,"mask-position-x":ja,"mask-position-y":ja,"mask-size":ja,height:ja,width:ja,"min-height":ja,"max-height":ja,"min-width":ja,"max-width":ja,bottom:ja,left:ja,top:ja,right:ja,inset:ja,"inset-block":ja,"inset-block-end":ja,"inset-block-start":ja,"inset-inline":ja,"inset-inline-end":ja,"inset-inline-start":ja,"box-shadow":ja,"text-shadow":ja,"column-gap":ja,"column-rule":ja,"column-rule-width":ja,"column-width":ja,"font-size":ja,"font-size-delta":ja,"letter-spacing":ja,"text-decoration-thickness":ja,"text-indent":ja,"text-stroke":ja,"text-stroke-width":ja,"word-spacing":ja,motion:ja,"motion-offset":ja,outline:ja,"outline-offset":ja,"outline-width":ja,perspective:ja,"perspective-origin-x":qa,"perspective-origin-y":qa,"transform-origin":qa,"transform-origin-x":qa,"transform-origin-y":qa,"transform-origin-z":qa,"transition-delay":Ua,"transition-duration":Ua,"vertical-align":ja,"flex-basis":ja,"shape-margin":ja,size:ja,gap:ja,grid:ja,"grid-gap":ja,"row-gap":ja,"grid-row-gap":ja,"grid-column-gap":ja,"grid-template-rows":ja,"grid-template-columns":ja,"grid-auto-rows":ja,"grid-auto-columns":ja,"box-shadow-x":ja,"box-shadow-y":ja,"box-shadow-blur":ja,"box-shadow-spread":ja,"font-line-height":ja,"text-shadow-x":ja,"text-shadow-y":ja,"text-shadow-blur":ja});function Va(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Va(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var a in t)t[a]=Va(a,t[a],n);else for(var o in t)t[o]=Va(e+"-"+o,t[o],n);else if("number"==typeof t&&!1===isNaN(t)){var l=n[e]||$a[e];return!l||0===t&&l===ja?t.toString():"function"==typeof l?l(t).toString():""+t+l}return t}function Ha(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Ga(e,t){if(e){if("string"==typeof e)return Ha(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ha(e,t):void 0}}function Ka(e){return function(e){if(Array.isArray(e))return Ha(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ga(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Qa="",Ja="",Xa="",Ya="",Za=Yn&&"ontouchstart"in document.documentElement;if(Yn){var eo={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},to=document.createElement("p").style;for(var no in eo)if(no+"Transform"in to){Qa=no,Ja=eo[no];break}"Webkit"===Qa&&"msHyphens"in to&&(Qa="ms",Ja=eo.ms,Ya="edge"),"Webkit"===Qa&&"-apple-trailing-word"in to&&(Xa="apple")}var ro=Qa,ao=Ja,oo=Xa,lo=Ya,io=Za,so={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===ro?"-webkit-"+e:ao+e)}},co={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===ro?ao+"print-"+e:e)}},uo=/[-\s]+(.)?/g;function mo(e,t){return t?t.toUpperCase():""}function fo(e){return e.replace(uo,mo)}function po(e){return fo("-"+e)}var ho,bo={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===ro){var n="mask-image";if(fo(n)in t)return e;if(ro+po(n)in t)return ao+e}return e}},go={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==oo||io?e:ao+e)}},vo={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:ao+e)}},yo={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:ao+e)}},Eo={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===ro||"ms"===ro&&"edge"!==lo?ao+e:e)}},xo={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===ro||"ms"===ro||"apple"===oo?ao+e:e)}},ko={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===ro?"WebkitColumn"+po(e)in t&&ao+"column-"+e:"Moz"===ro&&"page"+po(e)in t&&"page-"+e)}},wo={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===ro)return e;var n=e.replace("-inline","");return ro+po(n)in t&&ao+n}},No={supportedProperty:function(e,t){return fo(e)in t&&e}},So={supportedProperty:function(e,t){var n=po(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:ro+n in t?ao+e:"Webkit"!==ro&&"Webkit"+n in t&&"-webkit-"+e}},Co={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===ro?""+ao+e:e)}},_o={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===ro?ao+"scroll-chaining":e)}},Ro={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Po={supportedProperty:function(e,t){var n=Ro[e];return!!n&&ro+po(n)in t&&ao+n}},Oo={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},To=Object.keys(Oo),Io=function(e){return ao+e},Ao={supportedProperty:function(e,t,n){var r=n.multiple;if(To.indexOf(e)>-1){var a=Oo[e];if(!Array.isArray(a))return ro+po(a)in t&&ao+a;if(!r)return!1;for(var o=0;o<a.length;o++)if(!(ro+po(a[0])in t))return!1;return a.map(Io)}return!1}},Fo=[so,co,bo,go,vo,yo,Eo,xo,ko,wo,No,So,Co,_o,Po,Ao],Do=Fo.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Lo=Fo.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Ka(t.noPrefill)),e}),[]),Mo={};if(Yn){ho=document.createElement("p");var zo=window.getComputedStyle(document.documentElement,"");for(var Bo in zo)isNaN(Bo)||(Mo[zo[Bo]]=zo[Bo]);Lo.forEach((function(e){return delete Mo[e]}))}function jo(e,t){if(void 0===t&&(t={}),!ho)return e;if(null!=Mo[e])return Mo[e];"transition"!==e&&"transform"!==e||(t[e]=e in ho.style);for(var n=0;n<Do.length&&(Mo[e]=Do[n](e,ho.style,t),!Mo[e]);n++);try{ho.style[e]=""}catch(e){return!1}return Mo[e]}var Uo,qo={},Wo={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},$o=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Vo(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?jo(t):", "+jo(n))||t||n}function Ho(e,t){var n=t;if(!Uo||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=qo[r])return qo[r];try{Uo.style[e]=n}catch(e){return qo[r]=!1,!1}if(Wo[e])n=n.replace($o,Vo);else if(""===Uo.style[e]&&("-ms-flex"===(n=ao+n)&&(Uo.style[e]="-ms-flexbox"),Uo.style[e]=n,""===Uo.style[e]))return qo[r]=!1,!1;return Uo.style[e]="",qo[r]=n,qo[r]}Yn&&(Uo=document.createElement("p"));var Go,Ko=fa({plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=sr(e,{},n);return r[Sa]=t,r},onProcessStyle:function(e,t){if(Na in t||Sa in t)return e;var n={};for(var r in e){var a=e[r];"function"==typeof a&&(delete e[r],n[r]=a)}return t[Na]=n,e},onUpdate:function(e,t,n,r){var a=t,o=a[Sa];o&&(a.style=o(e)||{});var l=a[Na];if(l)for(var i in l)a.prop(i,l[i](e),r)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===Ca)return new _a(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,8))return new Ra(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),n.selector||!1!==n.scoped||(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,a=r?r[Ca]:null;if(a){for(var o in a)t.addRule(o,a[o],qn({},n,{selector:Oa(o,e.selector)}));delete r[Ca]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var a in r)if("@"===a[0]&&a.substr(0,7)===Ca){var o=Oa(a.substr(7),e.selector);t.addRule(o,r[a],qn({},n,{selector:o})),delete r[a]}}(e,t))}},function(){function e(e,t){return function(n,r){var a=e.getRule(r)||t&&t.getRule(r);return a?a.selector:r}}function t(e,t){for(var n=t.split(Ta),r=e.split(Ta),a="",o=0;o<n.length;o++)for(var l=n[o],i=0;i<r.length;i++){var s=r[i];a&&(a+=", "),a+=-1!==s.indexOf("&")?s.replace(Ia,l):l+" "+s}return a}function n(e,t,n){if(n)return qn({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var a=qn({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete a.name,a}return{onProcessStyle:function(r,a,o){if("style"!==a.type)return r;var l,i,s=a,c=s.options.parent;for(var u in r){var d=-1!==u.indexOf("&"),m="@"===u[0];if(d||m){if(l=n(s,c,l),d){var f=t(u,s.selector);i||(i=e(c,o)),f=f.replace(Aa,i);var p=s.key+"-"+u;"replaceRule"in c?c.replaceRule(p,r[u],qn({},l,{selector:f})):c.addRule(p,r[u],qn({},l,{selector:f}))}else m&&c.addRule(u,{},l).addRule(s.key,r[u],{selector:s.selector});delete r[u]}}return r}}}(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ba(e[t]);return e}return Ba(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=za(t);return t===r?e:(n.prop(r,e),null)}},function(e){void 0===e&&(e={});var t=Wa(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Va(r,e[r],t);return e},onChangeValue:function(e,n){return Va(n,e,t)}}}(),"undefined"==typeof window?null:function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var a=!1,o=jo(n);o&&o!==n&&(a=!0);var l=!1,i=Ho(o,ur(r));i&&i!==r&&(l=!0),(a||l)&&(a&&delete t[n],t[o||n]=i||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===ro?e:"@"+ao+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Ho(t,ur(e))||e}}}(),(Go=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n={},r=Object.keys(e).sort(Go),a=0;a<r.length;a++)n[r[a]]=e[r[a]];return n}})]}),Qo=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,a=void 0===r?"jss":r,o=e.seed,l=void 0===o?"":o,i=""===l?"":"".concat(l,"-"),s=0,c=function(){return s+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==ka.indexOf(e.key))return"Mui-".concat(e.key);var o="".concat(i).concat(r,"-").concat(e.key);return t.options.theme[xa]&&""===l?"".concat(o,"-").concat(c()):o}return"".concat(i).concat(a).concat(c())}}(),Jo={disableGeneration:!1,generateClassName:Qo,jss:Ko,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Xo=i.createContext(Jo),Yo=-1e9;function Zo(e){return e&&"object"===Zn(e)&&e.constructor===Object}function el(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?qn({},e):e;return Zo(e)&&Zo(t)&&Object.keys(t).forEach((function(a){"__proto__"!==a&&(Zo(t[a])&&a in e?r[a]=el(e[a],t[a],n):r[a]=t[a])})),r}const tl={};function nl(e,t){var n=e.state,r=e.theme,a=e.stylesOptions,o=e.stylesCreator,l=e.name;if(!a.disableGeneration){var i=va.get(a.sheetsManager,o,r);i||(i={refs:0,staticSheet:null,dynamicStyles:null},va.set(a.sheetsManager,o,r,i));var s=qn({},o.options,a,{theme:r,flip:"boolean"==typeof a.flip?a.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=a.sheetsRegistry;if(0===i.refs){var u;a.sheetsCache&&(u=va.get(a.sheetsCache,o,r));var d=o.create(r,l);u||((u=a.jss.createStyleSheet(d,qn({link:!1},s))).attach(),a.sheetsCache&&va.set(a.sheetsCache,o,r,u)),c&&c.add(u),i.staticSheet=u,i.dynamicStyles=ha(d)}if(i.dynamicStyles){var m=a.jss.createStyleSheet(i.dynamicStyles,qn({link:!0},s));m.update(t),m.attach(),n.dynamicSheet=m,n.classes=ba({baseClasses:i.staticSheet.classes,newClasses:m.classes}),c&&c.add(m)}else n.classes=i.staticSheet.classes;i.refs+=1}}function rl(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,r=t.classNamePrefix,a=t.Component,o=t.defaultTheme,l=void 0===o?tl:o,s=$n(t,["name","classNamePrefix","Component","defaultTheme"]),c=function(e){var t="function"==typeof e;return{create:function(n,r){var a;try{a=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return a;var o=n.overrides[r],l=qn({},a);return Object.keys(o).forEach((function(e){l[e]=el(l[e],o[e])})),l},options:{}}}(e),u=n||r||"makeStyles";return c.options={index:Yo+=1,name:n,meta:u,classNamePrefix:u},function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Ea()||l,r=qn({},i.useContext(Xo),s),o=i.useRef(),u=i.useRef();!function(a,l){var s,d,m=i.useRef([]),f=i.useMemo((function(){return{}}),l);m.current!==f&&(m.current=f,nl(d={name:n,state:{},stylesCreator:c,stylesOptions:r,theme:t},e),u.current=!1,o.current=d,s=function(){!function(e){var t=e.state,n=e.theme,r=e.stylesOptions,a=e.stylesCreator;if(!r.disableGeneration){var o=va.get(r.sheetsManager,a,n);o.refs-=1;var l=r.sheetsRegistry;0===o.refs&&(va.delete(r.sheetsManager,a,n),r.jss.removeStyleSheet(o.staticSheet),l&&l.remove(o.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),l&&l.remove(t.dynamicSheet))}}(d)}),i.useEffect((function(){return function(){s&&s()}}),[f])}(0,[t,c]),i.useEffect((function(){u.current&&function(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}(o.current,e),u.current=!0}));var d=function(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var a=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,a=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,a=!0),a&&(r.cacheClasses.value=ba({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}(o.current,e.classes,a);return d}}function al(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var a,o=t.props[n];for(a in o)void 0===r[a]&&(r[a]=o[a]);return r}var ol=["xs","sm","md","lg","xl"];function ll(e,t,n){return(t=er(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function il(e,t,n){var r;return qn({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return console.warn(["Material-UI: theme.mixins.gutters() is deprecated.","You can use the source of the mixin directly:","\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n      },\n      "].join("\n")),qn({paddingLeft:t(2),paddingRight:t(2)},n,ll({},e.up("sm"),qn({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},ll(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),ll(r,e.up("sm"),{minHeight:64}),r)},n)}function sl(e){for(var t="https://mui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}const cl={black:"#000",white:"#fff"},ul={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},dl={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},ml={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},fl={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},pl={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},hl={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},bl={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};function gl(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function vl(e){if(e.type)return e;if("#"===e.charAt(0))return vl(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(sl(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function yl(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function El(e){var t="hsl"===(e=vl(e)).type?vl(function(e){var t=(e=vl(e)).values,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return a-o*Math.max(Math.min(t-3,9-t,1),-1)},i="rgb",s=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(i+="a",s.push(t[3])),yl({type:i,values:s})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function xl(e,t){return e=vl(e),t=gl(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,yl(e)}var kl={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:cl.white,default:ul[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},wl={text:{primary:cl.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:ul[800],default:"#303030"},action:{active:cl.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Nl(e,t,n,r){var a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=vl(e),t=gl(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return yl(e)}(e.main,a):"dark"===t&&(e.dark=function(e,t){if(e=vl(e),t=gl(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return yl(e)}(e.main,o)))}function Sl(e){return Math.round(1e5*e)/1e5}function Cl(e){return Sl(e)}var _l={textTransform:"uppercase"},Rl='"Roboto", "Helvetica", "Arial", sans-serif';function Pl(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,a=void 0===r?Rl:r,o=n.fontSize,l=void 0===o?14:o,i=n.fontWeightLight,s=void 0===i?300:i,c=n.fontWeightRegular,u=void 0===c?400:c,d=n.fontWeightMedium,m=void 0===d?500:d,f=n.fontWeightBold,p=void 0===f?700:f,h=n.htmlFontSize,b=void 0===h?16:h,g=n.allVariants,v=n.pxToRem,y=$n(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),E=l/14,x=v||function(e){return"".concat(e/b*E,"rem")},k=function(e,t,n,r,o){return qn({fontFamily:a,fontWeight:e,fontSize:x(t),lineHeight:n},a===Rl?{letterSpacing:"".concat(Sl(r/t),"em")}:{},o,g)},w={h1:k(s,96,1.167,-1.5),h2:k(s,60,1.2,-.5),h3:k(u,48,1.167,0),h4:k(u,34,1.235,.25),h5:k(u,24,1.334,0),h6:k(m,20,1.6,.15),subtitle1:k(u,16,1.75,.15),subtitle2:k(m,14,1.57,.1),body1:k(u,16,1.5,.15),body2:k(u,14,1.43,.15),button:k(m,14,1.75,.4,_l),caption:k(u,12,1.66,.4),overline:k(u,12,2.66,1,_l)};return el(qn({htmlFontSize:b,pxToRem:x,round:Cl,fontFamily:a,fontSize:l,fontWeightLight:s,fontWeightRegular:u,fontWeightMedium:m,fontWeightBold:p},w),y,{clone:!1})}function Ol(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const Tl=["none",Ol(0,2,1,-1,0,1,1,0,0,1,3,0),Ol(0,3,1,-2,0,2,2,0,0,1,5,0),Ol(0,3,3,-2,0,3,4,0,0,1,8,0),Ol(0,2,4,-1,0,4,5,0,0,1,10,0),Ol(0,3,5,-1,0,5,8,0,0,1,14,0),Ol(0,3,5,-1,0,6,10,0,0,1,18,0),Ol(0,4,5,-2,0,7,10,1,0,2,16,1),Ol(0,5,5,-3,0,8,10,1,0,3,14,2),Ol(0,5,6,-3,0,9,12,1,0,3,16,2),Ol(0,6,6,-3,0,10,14,1,0,4,18,3),Ol(0,6,7,-4,0,11,15,1,0,4,20,3),Ol(0,7,8,-4,0,12,17,2,0,5,22,4),Ol(0,7,8,-4,0,13,19,2,0,5,24,4),Ol(0,7,9,-4,0,14,21,2,0,5,26,4),Ol(0,8,9,-5,0,15,22,2,0,6,28,5),Ol(0,8,10,-5,0,16,24,2,0,6,30,5),Ol(0,8,11,-5,0,17,26,2,0,6,32,5),Ol(0,9,11,-5,0,18,28,2,0,7,34,6),Ol(0,9,12,-6,0,19,29,2,0,7,36,6),Ol(0,10,13,-6,0,20,31,3,0,8,38,7),Ol(0,10,13,-6,0,21,33,3,0,8,40,7),Ol(0,10,14,-6,0,22,35,3,0,8,42,7),Ol(0,11,14,-7,0,23,36,3,0,9,44,8),Ol(0,11,15,-7,0,24,38,3,0,9,46,8)],Il={borderRadius:4};function Al(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,l,i=[],s=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);s=!0);}catch(e){c=!0,a=e}finally{try{if(!s&&null!=n.return&&(l=n.return(),Object(l)!==l))return}finally{if(c)throw a}}return i}}(e,t)||Ga(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Fl={xs:0,sm:600,md:960,lg:1280,xl:1920},Dl={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(Fl[e],"px)")}};const Ll=function(e,t){return t?el(e,t,{clone:!1}):e};var Ml={m:"margin",p:"padding"},zl={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Bl={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},jl=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=function(e){if(e.length>2){if(!Bl[e])return[e];e=Bl[e]}var t=Al(e.split(""),2),n=t[0],r=t[1],a=Ml[n],o=zl[r]||"";return Array.isArray(o)?o.map((function(e){return a+e})):[a+o]}(e)),t[e]}}(),Ul=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function ql(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function Wl(e){var t=ql(e.theme);return Object.keys(e).map((function(n){if(-1===Ul.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(jl(n),t),a=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||Dl;return t.reduce((function(e,a,o){return e[r.up(r.keys[o])]=n(t[o]),e}),{})}if("object"===Zn(t)){var a=e.theme.breakpoints||Dl;return Object.keys(t).reduce((function(e,r){return e[a.up(r)]=n(t[r]),e}),{})}return n(t)}(e,a,r)})).reduce(Ll,{})}Wl.propTypes={},Wl.filterProps=Ul;var $l={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Vl={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Hl(e){return"".concat(Math.round(e),"ms")}const Gl={easing:$l,duration:Vl,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?Vl.standard:n,a=t.easing,o=void 0===a?$l.easeInOut:a,l=t.delay,i=void 0===l?0:l;return $n(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:Hl(r)," ").concat(o," ").concat("string"==typeof i?i:Hl(i))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Kl={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};const Ql=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,a=void 0===r?{}:r,o=e.palette,l=void 0===o?{}:o,i=e.spacing,s=e.typography,c=void 0===s?{}:s,u=$n(e,["breakpoints","mixins","palette","spacing","typography"]),d=function(e){var t=e.primary,n=void 0===t?{light:dl[300],main:dl[500],dark:dl[700]}:t,r=e.secondary,a=void 0===r?{light:ml.A200,main:ml.A400,dark:ml.A700}:r,o=e.error,l=void 0===o?{light:fl[300],main:fl[500],dark:fl[700]}:o,i=e.warning,s=void 0===i?{light:pl[300],main:pl[500],dark:pl[700]}:i,c=e.info,u=void 0===c?{light:hl[300],main:hl[500],dark:hl[700]}:c,d=e.success,m=void 0===d?{light:bl[300],main:bl[500],dark:bl[700]}:d,f=e.type,p=void 0===f?"light":f,h=e.contrastThreshold,b=void 0===h?3:h,g=e.tonalOffset,v=void 0===g?.2:g,y=$n(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function E(e){var t=function(e,t){var n=El(e),r=El(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,wl.text.primary)>=b?wl.text.primary:kl.text.primary;return t}var x=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=qn({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(sl(4,t));if("string"!=typeof e.main)throw new Error(sl(5,JSON.stringify(e.main)));return Nl(e,"light",n,v),Nl(e,"dark",r,v),e.contrastText||(e.contrastText=E(e.main)),e},k={dark:wl,light:kl};return el(qn({common:cl,type:p,primary:x(n),secondary:x(a,"A400","A200","A700"),error:x(l),warning:x(s),info:x(u),success:x(m),grey:ul,contrastThreshold:b,getContrastText:E,augmentColor:x,tonalOffset:v},k[p]),y)}(l),m=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,a=void 0===r?"px":r,o=e.step,l=void 0===o?5:o,i=$n(e,["values","unit","step"]);function s(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function c(e,t){var r=ol.indexOf(t);return r===ol.length-1?s(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(a,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[ol[r+1]]?n[ol[r+1]]:t)-l/100).concat(a,")")}return qn({keys:ol,values:n,up:s,down:function(e){var t=ol.indexOf(e)+1,r=n[ol[t]];return t===ol.length?s("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-l/100).concat(a,")")},between:c,only:function(e){return c(e,e)},width:function(e){return n[e]}},i)}(n),f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=ql({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}(i),p=el({breakpoints:m,direction:"ltr",mixins:il(m,f,a),overrides:{},palette:d,props:{},shadows:Tl,typography:Pl(d,c),spacing:f,shape:Il,transitions:Gl,zIndex:Kl},u),h=arguments.length,b=new Array(h>1?h-1:0),g=1;g<h;g++)b[g-1]=arguments[g];return b.reduce((function(e,t){return el(e,t)}),p)}(),Jl=function(e,t){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r=t.defaultTheme,a=t.withTheme,o=void 0!==a&&a,l=t.name,s=$n(t,["defaultTheme","withTheme","name"]),c=l,u=rl(e,qn({defaultTheme:r,Component:n,name:l||n.displayName,classNamePrefix:c},s)),d=i.forwardRef((function(e,t){e.classes;var a,s=e.innerRef,c=$n(e,["classes","innerRef"]),d=u(qn({},n.defaultProps,e)),m=c;return("string"==typeof l||o)&&(a=Ea()||r,l&&(m=al({theme:a,name:l,props:c})),o&&!m.theme&&(m.theme=a)),i.createElement(n,qn({ref:s||t,classes:d},m))}));return Jn()(d,n),d}}(e,qn({defaultTheme:Ql},t))};function Xl(e){if("string"!=typeof e)throw new Error(sl(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Yl(e,t){return i.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}var Zl=i.createContext();const ei=Zl;var ti=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.className,o=e.color,l=void 0===o?"primary":o,s=e.component,c=void 0===s?"div":s,u=e.disabled,d=void 0!==u&&u,m=e.error,f=void 0!==m&&m,p=e.fullWidth,h=void 0!==p&&p,b=e.focused,g=e.hiddenLabel,v=void 0!==g&&g,y=e.margin,E=void 0===y?"none":y,x=e.required,k=void 0!==x&&x,w=e.size,N=e.variant,S=void 0===N?"standard":N,C=$n(e,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),_=i.useState((function(){var e=!1;return n&&i.Children.forEach(n,(function(t){if(Yl(t,["Input","Select"])){var n=Yl(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)}})),e})),R=_[0],P=_[1],O=i.useState((function(){var e=!1;return n&&i.Children.forEach(n,(function(t){Yl(t,["Input","Select"])&&Kn(t.props,!0)&&(e=!0)})),e})),T=O[0],I=O[1],A=i.useState(!1),F=A[0],D=A[1],L=void 0!==b?b:F;d&&L&&D(!1);var M=i.useCallback((function(){I(!0)}),[]),z={adornedStart:R,setAdornedStart:P,color:l,disabled:d,error:f,filled:T,focused:L,fullWidth:h,hiddenLabel:v,margin:("small"===w?"dense":void 0)||E,onBlur:function(){D(!1)},onEmpty:i.useCallback((function(){I(!1)}),[]),onFilled:M,onFocus:function(){D(!0)},registerEffect:void 0,required:k,variant:S};return i.createElement(ei.Provider,{value:z},i.createElement(c,qn({className:Hn(r.root,a,"none"!==E&&r["margin".concat(Xl(E))],h&&r.fullWidth),ref:t},C),n))}));const ni=Jl({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(ti);var ri=i.forwardRef((function(e,t){var n=e.classes,r=e.className,a=e.row,o=void 0!==a&&a,l=$n(e,["classes","className","row"]);return i.createElement("div",qn({className:Hn(n.root,r,o&&n.row),ref:t},l))}));const ai=Jl({root:{display:"flex",flexDirection:"column",flexWrap:"wrap"},row:{flexDirection:"row"}},{name:"MuiFormGroup"})(ri);var oi=[0,1,2,3,4,5,6,7,8,9,10],li=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function ii(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var si=i.forwardRef((function(e,t){var n=e.alignContent,r=void 0===n?"stretch":n,a=e.alignItems,o=void 0===a?"stretch":a,l=e.classes,s=e.className,c=e.component,u=void 0===c?"div":c,d=e.container,m=void 0!==d&&d,f=e.direction,p=void 0===f?"row":f,h=e.item,b=void 0!==h&&h,g=e.justify,v=e.justifyContent,y=void 0===v?"flex-start":v,E=e.lg,x=void 0!==E&&E,k=e.md,w=void 0!==k&&k,N=e.sm,S=void 0!==N&&N,C=e.spacing,_=void 0===C?0:C,R=e.wrap,P=void 0===R?"wrap":R,O=e.xl,T=void 0!==O&&O,I=e.xs,A=void 0!==I&&I,F=e.zeroMinWidth,D=void 0!==F&&F,L=$n(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","justifyContent","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),M=Hn(l.root,s,m&&[l.container,0!==_&&l["spacing-xs-".concat(String(_))]],b&&l.item,D&&l.zeroMinWidth,"row"!==p&&l["direction-xs-".concat(String(p))],"wrap"!==P&&l["wrap-xs-".concat(String(P))],"stretch"!==o&&l["align-items-xs-".concat(String(o))],"stretch"!==r&&l["align-content-xs-".concat(String(r))],"flex-start"!==(g||y)&&l["justify-content-xs-".concat(String(g||y))],!1!==A&&l["grid-xs-".concat(String(A))],!1!==S&&l["grid-sm-".concat(String(S))],!1!==w&&l["grid-md-".concat(String(w))],!1!==x&&l["grid-lg-".concat(String(x))],!1!==T&&l["grid-xl-".concat(String(T))]);return i.createElement(u,qn({className:M,ref:t},L))})),ci=Jl((function(e){return qn({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-content-xs-center":{justifyContent:"center"},"justify-content-xs-flex-end":{justifyContent:"flex-end"},"justify-content-xs-space-between":{justifyContent:"space-between"},"justify-content-xs-space-around":{justifyContent:"space-around"},"justify-content-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return oi.forEach((function(t){var r=e.spacing(t);0!==r&&(n["spacing-".concat("xs","-").concat(t)]={margin:"-".concat(ii(r,2)),width:"calc(100% + ".concat(ii(r),")"),"& > $item":{padding:ii(r,2)}})})),n}(e),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var r={};li.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var a="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:a,flexGrow:0,maxWidth:a}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?qn(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t}),{}))}),{name:"MuiGrid"})(si);const ui=ci;function di(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e}),{})}function mi(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function fi(e,t){return i.useMemo((function(){return null==e&&null==t?null:function(n){mi(e,n),mi(t,n)}}),[e,t])}function pi(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];var l=this;clearTimeout(t),t=setTimeout((function(){e.apply(l,a)}),n)}return r.clear=function(){clearTimeout(t)},r}function hi(e,t){return parseInt(e[t],10)||0}var bi="undefined"!=typeof window?i.useLayoutEffect:i.useEffect,gi={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},vi=i.forwardRef((function(e,t){var n=e.onChange,r=e.rows,a=e.rowsMax,o=e.rowsMin,l=e.maxRows,s=e.minRows,c=void 0===s?1:s,u=e.style,d=e.value,m=$n(e,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),f=l||a,p=r||o||c,h=i.useRef(null!=d).current,b=i.useRef(null),g=fi(t,b),v=i.useRef(null),y=i.useRef(0),E=i.useState({}),x=E[0],k=E[1],w=i.useCallback((function(){var t=b.current,n=window.getComputedStyle(t),r=v.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var a=n["box-sizing"],o=hi(n,"padding-bottom")+hi(n,"padding-top"),l=hi(n,"border-bottom-width")+hi(n,"border-top-width"),i=r.scrollHeight-o;r.value="x";var s=r.scrollHeight-o,c=i;p&&(c=Math.max(Number(p)*s,c)),f&&(c=Math.min(Number(f)*s,c));var u=(c=Math.max(c,s))+("border-box"===a?o+l:0),d=Math.abs(c-i)<=1;k((function(e){return y.current<20&&(u>0&&Math.abs((e.outerHeightStyle||0)-u)>1||e.overflow!==d)?(y.current+=1,{overflow:d,outerHeightStyle:u}):e}))}),[f,p,e.placeholder]);return i.useEffect((function(){var e=pi((function(){y.current=0,w()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[w]),bi((function(){w()})),i.useEffect((function(){y.current=0}),[d]),i.createElement(i.Fragment,null,i.createElement("textarea",qn({value:d,onChange:function(e){y.current=0,h||w(),n&&n(e)},ref:g,rows:p,style:qn({height:x.outerHeightStyle,overflow:x.overflow?"hidden":null},u)},m)),i.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:v,tabIndex:-1,style:qn({},gi,u)}))}));const yi=vi;var Ei="undefined"==typeof window?i.useEffect:i.useLayoutEffect,xi=i.forwardRef((function(e,t){var n=e["aria-describedby"],r=e.autoComplete,a=e.autoFocus,o=e.classes,l=e.className,s=(e.color,e.defaultValue),c=e.disabled,u=e.endAdornment,d=(e.error,e.fullWidth),m=void 0!==d&&d,f=e.id,p=e.inputComponent,h=void 0===p?"input":p,b=e.inputProps,g=void 0===b?{}:b,v=e.inputRef,y=(e.margin,e.multiline),E=void 0!==y&&y,x=e.name,k=e.onBlur,w=e.onChange,N=e.onClick,S=e.onFocus,C=e.onKeyDown,_=e.onKeyUp,R=e.placeholder,P=e.readOnly,O=e.renderSuffix,T=e.rows,I=e.rowsMax,A=e.rowsMin,F=e.maxRows,D=e.minRows,L=e.startAdornment,M=e.type,z=void 0===M?"text":M,B=e.value,j=$n(e,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","maxRows","minRows","startAdornment","type","value"]),U=null!=g.value?g.value:B,q=i.useRef(null!=U).current,W=i.useRef(),$=i.useCallback((function(e){}),[]),V=fi(g.ref,$),H=fi(v,V),G=fi(W,H),K=i.useState(!1),Q=K[0],J=K[1],X=i.useContext(Zl),Y=di({props:e,muiFormControl:X,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});Y.focused=X?X.focused:Q,i.useEffect((function(){!X&&c&&Q&&(J(!1),k&&k())}),[X,c,Q,k]);var Z=X&&X.onFilled,ee=X&&X.onEmpty,te=i.useCallback((function(e){Kn(e)?Z&&Z():ee&&ee()}),[Z,ee]);Ei((function(){q&&te({value:U})}),[U,te,q]),i.useEffect((function(){te(W.current)}),[]);var ne=h,re=qn({},g,{ref:G});return"string"!=typeof ne?re=qn({inputRef:G,type:z},re,{ref:null}):E?!T||F||D||I||A?(re=qn({minRows:T||D,rowsMax:I,maxRows:F},re),ne=yi):ne="textarea":re=qn({type:z},re),i.useEffect((function(){X&&X.setAdornedStart(Boolean(L))}),[X,L]),i.createElement("div",qn({className:Hn(o.root,o["color".concat(Xl(Y.color||"primary"))],l,Y.disabled&&o.disabled,Y.error&&o.error,m&&o.fullWidth,Y.focused&&o.focused,X&&o.formControl,E&&o.multiline,L&&o.adornedStart,u&&o.adornedEnd,"dense"===Y.margin&&o.marginDense),onClick:function(e){W.current&&e.currentTarget===e.target&&W.current.focus(),N&&N(e)},ref:t},j),L,i.createElement(ei.Provider,{value:null},i.createElement(ne,qn({"aria-invalid":Y.error,"aria-describedby":n,autoComplete:r,autoFocus:a,defaultValue:s,disabled:Y.disabled,id:f,onAnimationStart:function(e){te("mui-auto-fill-cancel"===e.animationName?W.current:{value:"x"})},name:x,placeholder:R,readOnly:P,required:Y.required,rows:T,value:U,onKeyDown:C,onKeyUp:_},re,{className:Hn(o.input,g.className,Y.disabled&&o.disabled,E&&o.inputMultiline,Y.hiddenLabel&&o.inputHiddenLabel,L&&o.inputAdornedStart,u&&o.inputAdornedEnd,"search"===z&&o.inputTypeSearch,"dense"===Y.margin&&o.inputMarginDense),onBlur:function(e){k&&k(e),g.onBlur&&g.onBlur(e),X&&X.onBlur?X.onBlur(e):J(!1)},onChange:function(e){if(!q){var t=e.target||W.current;if(null==t)throw new Error(sl(1));te({value:t.value})}for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];g.onChange&&g.onChange.apply(g,[e].concat(r)),w&&w.apply(void 0,[e].concat(r))},onFocus:function(e){Y.disabled?e.stopPropagation():(S&&S(e),g.onFocus&&g.onFocus(e),X&&X.onFocus?X.onFocus(e):J(!0))}}))),u,O?O(qn({},Y,{startAdornment:L})):null)}));const ki=Jl((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},a={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{},"@keyframes mui-auto-fill-cancel":{}},root:qn({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(xi);var wi=i.forwardRef((function(e,t){var n=e.disableUnderline,r=e.classes,a=e.fullWidth,o=void 0!==a&&a,l=e.inputComponent,s=void 0===l?"input":l,c=e.multiline,u=void 0!==c&&c,d=e.type,m=void 0===d?"text":d,f=$n(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.createElement(ki,qn({classes:qn({},r,{root:Hn(r.root,!n&&r.underline),underline:null}),fullWidth:o,inputComponent:s,multiline:u,ref:t,type:m},f))}));wi.muiName="Input";const Ni=Jl((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(t)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},marginDense:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}}),{name:"MuiInput"})(wi);var Si=i.forwardRef((function(e,t){var n=e.disableUnderline,r=e.classes,a=e.fullWidth,o=void 0!==a&&a,l=e.inputComponent,s=void 0===l?"input":l,c=e.multiline,u=void 0!==c&&c,d=e.type,m=void 0===d?"text":d,f=$n(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.createElement(ki,qn({classes:qn({},r,{root:Hn(r.root,!n&&r.underline),underline:null}),fullWidth:o,inputComponent:s,multiline:u,ref:t,type:m},f))}));Si.muiName="Input";const Ci=Jl((function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiFilledInput"})(Si);function _i(){return Ea()||Ql}var Ri=i.forwardRef((function(e,t){e.children;var n=e.classes,r=e.className,a=e.label,o=e.labelWidth,l=e.notched,s=e.style,c=$n(e,["children","classes","className","label","labelWidth","notched","style"]),u="rtl"===_i().direction?"right":"left";if(void 0!==a)return i.createElement("fieldset",qn({"aria-hidden":!0,className:Hn(n.root,r),ref:t,style:s},c),i.createElement("legend",{className:Hn(n.legendLabelled,l&&n.legendNotched)},a?i.createElement("span",null,a):i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})));var d=o>0?.75*o+8:.01;return i.createElement("fieldset",qn({"aria-hidden":!0,style:qn(ll({},"padding".concat(Xl(u)),8),s),className:Hn(n.root,r),ref:t},c),i.createElement("legend",{className:n.legend,style:{width:l?d:.01}},i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}));const Pi=Jl((function(e){return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden"},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})},legendLabelled:{display:"block",width:"auto",textAlign:"left",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),"& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},legendNotched:{maxWidth:1e3,transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}}),{name:"PrivateNotchedOutline"})(Ri);var Oi=i.forwardRef((function(e,t){var n=e.classes,r=e.fullWidth,a=void 0!==r&&r,o=e.inputComponent,l=void 0===o?"input":o,s=e.label,c=e.labelWidth,u=void 0===c?0:c,d=e.multiline,m=void 0!==d&&d,f=e.notched,p=e.type,h=void 0===p?"text":p,b=$n(e,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return i.createElement(ki,qn({renderSuffix:function(e){return i.createElement(Pi,{className:n.notchedOutline,label:s,labelWidth:u,notched:void 0!==f?f:Boolean(e.startAdornment||e.filled||e.focused)})},classes:qn({},n,{root:Hn(n.root,n.underline),notchedOutline:null}),fullWidth:a,inputComponent:l,multiline:m,ref:t,type:h},b))}));Oi.muiName="Input";const Ti=Jl((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:e.shape.borderRadius,"&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:e.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:t},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiOutlinedInput"})(Oi);function Ii(){return i.useContext(ei)}var Ai=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.className,o=(e.color,e.component),l=void 0===o?"label":o,s=(e.disabled,e.error,e.filled,e.focused,e.required,$n(e,["children","classes","className","color","component","disabled","error","filled","focused","required"])),c=di({props:e,muiFormControl:Ii(),states:["color","required","focused","disabled","error","filled"]});return i.createElement(l,qn({className:Hn(r.root,r["color".concat(Xl(c.color||"primary"))],a,c.disabled&&r.disabled,c.error&&r.error,c.filled&&r.filled,c.focused&&r.focused,c.required&&r.required),ref:t},s),n,c.required&&i.createElement("span",{"aria-hidden":!0,className:Hn(r.asterisk,c.error&&r.error)}," ","*"))}));const Fi=Jl((function(e){return{root:qn({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(Ai);var Di=i.forwardRef((function(e,t){var n=e.classes,r=e.className,a=e.disableAnimation,o=void 0!==a&&a,l=(e.margin,e.shrink),s=(e.variant,$n(e,["classes","className","disableAnimation","margin","shrink","variant"])),c=Ii(),u=l;void 0===u&&c&&(u=c.filled||c.focused||c.adornedStart);var d=di({props:e,muiFormControl:c,states:["margin","variant"]});return i.createElement(Fi,qn({"data-shrink":u,className:Hn(n.root,r,c&&n.formControl,!o&&n.animated,u&&n.shrink,"dense"===d.margin&&n.marginDense,{filled:n.filled,outlined:n.outlined}[d.variant]),classes:{focused:n.focused,disabled:n.disabled,error:n.error,required:n.required,asterisk:n.asterisk},ref:t},s))}));const Li=Jl((function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}}),{name:"MuiInputLabel"})(Di);var Mi=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.className,o=e.component,l=void 0===o?"p":o,s=(e.disabled,e.error,e.filled,e.focused,e.margin,e.required,e.variant,$n(e,["children","classes","className","component","disabled","error","filled","focused","margin","required","variant"])),c=di({props:e,muiFormControl:Ii(),states:["variant","margin","disabled","error","filled","focused","required"]});return i.createElement(l,qn({className:Hn(r.root,("filled"===c.variant||"outlined"===c.variant)&&r.contained,a,c.disabled&&r.disabled,c.error&&r.error,c.filled&&r.filled,c.focused&&r.focused,c.required&&r.required,"dense"===c.margin&&r.marginDense),ref:t},s)," "===n?i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):n)}));const zi=Jl((function(e){return{root:qn({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{marginLeft:14,marginRight:14},focused:{},filled:{},required:{}}}),{name:"MuiFormHelperText"})(Mi);function Bi(e){return e&&e.ownerDocument||document}function ji(e){return Bi(e).defaultView||window}function Ui(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];e.apply(this,r),t.apply(this,r)}}),(function(){}))}a(363);var qi="undefined"!=typeof window?i.useLayoutEffect:i.useEffect;const Wi=i.forwardRef((function(e,t){var n=e.children,r=e.container,a=e.disablePortal,o=void 0!==a&&a,l=e.onRendered,s=i.useState(null),c=s[0],d=s[1],m=fi(i.isValidElement(n)?n.ref:null,t);return qi((function(){o||d(function(e){return e="function"==typeof e?e():e,u.findDOMNode(e)}(r)||document.body)}),[r,o]),qi((function(){if(c&&!o)return mi(t,c),function(){mi(t,null)}}),[t,c,o]),qi((function(){l&&(c||o)&&l()}),[l,c,o]),o?i.isValidElement(n)?i.cloneElement(n,{ref:m}):n:c?u.createPortal(n,c):c}));var $i="undefined"!=typeof window?i.useLayoutEffect:i.useEffect;function Vi(e){var t=i.useRef(e);return $i((function(){t.current=e})),i.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}function Hi(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function Gi(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Ki(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function Qi(e,t,n){var r=arguments.length>4?arguments[4]:void 0,a=[t,n].concat(Ka(arguments.length>3&&void 0!==arguments[3]?arguments[3]:[])),o=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===a.indexOf(e)&&-1===o.indexOf(e.tagName)&&Gi(e,r)}))}function Ji(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}var Xi=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return nr(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Gi(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);Qi(t,e.mountNode,e.modalRef,r,!0);var a=Ji(this.containers,(function(e){return e.container===t}));return-1!==a?(this.containers[a].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=Ji(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=function(e,t){var n,r=[],a=[],o=e.container;if(!t.disableScrollLock){if(function(e){var t=Bi(e);return t.body===e?ji(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(o)){var l=Hi();r.push({value:o.style.paddingRight,key:"padding-right",el:o}),o.style["padding-right"]="".concat(Ki(o)+l,"px"),n=Bi(o).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){a.push(e.style.paddingRight),e.style.paddingRight="".concat(Ki(e)+l,"px")}))}var i=o.parentElement,s="HTML"===i.nodeName&&"scroll"===window.getComputedStyle(i)["overflow-y"]?i:o;r.push({value:s.style.overflow,key:"overflow",el:s}),s.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){a[t]?e.style.paddingRight=a[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=Ji(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Gi(e.modalRef,!0),Qi(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var a=r.modals[r.modals.length-1];a.modalRef&&Gi(a.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();const Yi=function(e){var t=e.children,n=e.disableAutoFocus,r=void 0!==n&&n,a=e.disableEnforceFocus,o=void 0!==a&&a,l=e.disableRestoreFocus,s=void 0!==l&&l,c=e.getDoc,d=e.isEnabled,m=e.open,f=i.useRef(),p=i.useRef(null),h=i.useRef(null),b=i.useRef(),g=i.useRef(null),v=i.useCallback((function(e){g.current=u.findDOMNode(e)}),[]),y=fi(t.ref,v),E=i.useRef();return i.useEffect((function(){E.current=m}),[m]),!E.current&&m&&"undefined"!=typeof window&&(b.current=c().activeElement),i.useEffect((function(){if(m){var e=Bi(g.current);r||!g.current||g.current.contains(e.activeElement)||(g.current.hasAttribute("tabIndex")||g.current.setAttribute("tabIndex",-1),g.current.focus());var t=function(){null!==g.current&&(e.hasFocus()&&!o&&d()&&!f.current?g.current&&!g.current.contains(e.activeElement)&&g.current.focus():f.current=!1)},n=function(t){!o&&d()&&9===t.keyCode&&e.activeElement===g.current&&(f.current=!0,t.shiftKey?h.current.focus():p.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var a=setInterval((function(){t()}),50);return function(){clearInterval(a),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),s||(b.current&&b.current.focus&&b.current.focus(),b.current=null)}}}),[r,o,s,d,m]),i.createElement(i.Fragment,null,i.createElement("div",{tabIndex:0,ref:p,"data-test":"sentinelStart"}),i.cloneElement(t,{ref:y}),i.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelEnd"}))};var Zi={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}};const es=i.forwardRef((function(e,t){var n=e.invisible,r=void 0!==n&&n,a=e.open,o=$n(e,["invisible","open"]);return a?i.createElement("div",qn({"aria-hidden":!0,ref:t},o,{style:qn({},Zi.root,r?Zi.invisible:{},o.style)})):null}));var ts=new Xi;const ns=i.forwardRef((function(e,t){var n=Ea(),r=al({name:"MuiModal",props:qn({},e),theme:n}),a=r.BackdropComponent,o=void 0===a?es:a,l=r.BackdropProps,s=r.children,c=r.closeAfterTransition,d=void 0!==c&&c,m=r.container,f=r.disableAutoFocus,p=void 0!==f&&f,h=r.disableBackdropClick,b=void 0!==h&&h,g=r.disableEnforceFocus,v=void 0!==g&&g,y=r.disableEscapeKeyDown,E=void 0!==y&&y,x=r.disablePortal,k=void 0!==x&&x,w=r.disableRestoreFocus,N=void 0!==w&&w,S=r.disableScrollLock,C=void 0!==S&&S,_=r.hideBackdrop,R=void 0!==_&&_,P=r.keepMounted,O=void 0!==P&&P,T=r.manager,I=void 0===T?ts:T,A=r.onBackdropClick,F=r.onClose,D=r.onEscapeKeyDown,L=r.onRendered,M=r.open,z=$n(r,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),B=i.useState(!0),j=B[0],U=B[1],q=i.useRef({}),W=i.useRef(null),$=i.useRef(null),V=fi($,t),H=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(r),G=function(){return Bi(W.current)},K=function(){return q.current.modalRef=$.current,q.current.mountNode=W.current,q.current},Q=function(){I.mount(K(),{disableScrollLock:C}),$.current.scrollTop=0},J=Vi((function(){var e=function(e){return e="function"==typeof e?e():e,u.findDOMNode(e)}(m)||G().body;I.add(K(),e),$.current&&Q()})),X=i.useCallback((function(){return I.isTopModal(K())}),[I]),Y=Vi((function(e){W.current=e,e&&(L&&L(),M&&X()?Q():Gi($.current,!0))})),Z=i.useCallback((function(){I.remove(K())}),[I]);if(i.useEffect((function(){return function(){Z()}}),[Z]),i.useEffect((function(){M?J():H&&d||Z()}),[M,Z,H,d,J]),!O&&!M&&(!H||j))return null;var ee=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(n||{zIndex:Kl}),te={};return void 0===s.props.tabIndex&&(te.tabIndex=s.props.tabIndex||"-1"),H&&(te.onEnter=Ui((function(){U(!1)}),s.props.onEnter),te.onExited=Ui((function(){U(!0),d&&Z()}),s.props.onExited)),i.createElement(Wi,{ref:Y,container:m,disablePortal:k},i.createElement("div",qn({ref:V,onKeyDown:function(e){"Escape"===e.key&&X()&&(D&&D(e),E||(e.stopPropagation(),F&&F(e,"escapeKeyDown")))},role:"presentation"},z,{style:qn({},ee.root,!M&&j?ee.hidden:{},z.style)}),R?null:i.createElement(o,qn({open:M,onClick:function(e){e.target===e.currentTarget&&(A&&A(e),!b&&F&&F(e,"backdropClick"))}},l)),i.createElement(Yi,{disableEnforceFocus:v,disableAutoFocus:p,disableRestoreFocus:N,getDoc:G,isEnabled:X,open:M},i.cloneElement(s,te))))})),rs=i.createContext(null);var as="unmounted",os="exited",ls="entering",is="entered",ss="exiting",cs=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var a,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(a=os,r.appearStatus=ls):a=is:a=t.unmountOnExit||t.mountOnEnter?as:os,r.state={status:a},r.nextCallback=null,r}ar(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===as?{status:os}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==ls&&n!==is&&(t=ls):n!==ls&&n!==is||(t=ss)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===ls){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:u.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===os&&this.setState({status:as})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,a=this.props.nodeRef?[r]:[u.findDOMNode(this),r],o=a[0],l=a[1],i=this.getTimeouts(),s=r?i.appear:i.enter;e||n?(this.props.onEnter(o,l),this.safeSetState({status:ls},(function(){t.props.onEntering(o,l),t.onTransitionEnd(s,(function(){t.safeSetState({status:is},(function(){t.props.onEntered(o,l)}))}))}))):this.safeSetState({status:is},(function(){t.props.onEntered(o)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:u.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:ss},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:os},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:os},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:u.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=a[0],l=a[1];this.props.addEndListener(o,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===as)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Wn(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.createElement(rs.Provider,{value:null},"function"==typeof n?n(e,r):i.cloneElement(i.Children.only(n),r))},t}(i.Component);function us(){}cs.contextType=rs,cs.propTypes={},cs.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:us,onEntering:us,onEntered:us,onExit:us,onExiting:us,onExited:us},cs.UNMOUNTED=as,cs.EXITED=os,cs.ENTERING=ls,cs.ENTERED=is,cs.EXITING=ss;const ds=cs;function ms(e,t){var n=e.timeout,r=e.style,a=void 0===r?{}:r;return{duration:a.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:a.transitionDelay}}function fs(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var ps={entering:{opacity:1,transform:fs(1)},entered:{opacity:1,transform:"none"}},hs=i.forwardRef((function(e,t){var n=e.children,r=e.disableStrictModeCompat,a=void 0!==r&&r,o=e.in,l=e.onEnter,s=e.onEntered,c=e.onEntering,u=e.onExit,d=e.onExited,m=e.onExiting,f=e.style,p=e.timeout,h=void 0===p?"auto":p,b=e.TransitionComponent,g=void 0===b?ds:b,v=$n(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),y=i.useRef(),E=i.useRef(),x=_i(),k=x.unstable_strictMode&&!a,w=i.useRef(null),N=fi(n.ref,t),S=fi(k?w:void 0,N),C=function(e){return function(t,n){if(e){var r=Al(k?[w.current,t]:[t,n],2),a=r[0],o=r[1];void 0===o?e(a):e(a,o)}}},_=C(c),R=C((function(e,t){!function(e){e.scrollTop}(e);var n,r=ms({style:f,timeout:h},{mode:"enter"}),a=r.duration,o=r.delay;"auto"===h?(n=x.transitions.getAutoHeightDuration(e.clientHeight),E.current=n):n=a,e.style.transition=[x.transitions.create("opacity",{duration:n,delay:o}),x.transitions.create("transform",{duration:.666*n,delay:o})].join(","),l&&l(e,t)})),P=C(s),O=C(m),T=C((function(e){var t,n=ms({style:f,timeout:h},{mode:"exit"}),r=n.duration,a=n.delay;"auto"===h?(t=x.transitions.getAutoHeightDuration(e.clientHeight),E.current=t):t=r,e.style.transition=[x.transitions.create("opacity",{duration:t,delay:a}),x.transitions.create("transform",{duration:.666*t,delay:a||.333*t})].join(","),e.style.opacity="0",e.style.transform=fs(.75),u&&u(e)})),I=C(d);return i.useEffect((function(){return function(){clearTimeout(y.current)}}),[]),i.createElement(g,qn({appear:!0,in:o,nodeRef:k?w:void 0,onEnter:R,onEntered:P,onEntering:_,onExit:T,onExited:I,onExiting:O,addEndListener:function(e,t){var n=k?e:t;"auto"===h&&(y.current=setTimeout(n,E.current||0))},timeout:"auto"===h?null:h},v),(function(e,t){return i.cloneElement(n,qn({style:qn({opacity:0,transform:fs(.75),visibility:"exited"!==e||o?void 0:"hidden"},ps[e],f,n.props.style),ref:S},t))}))}));hs.muiSupportAuto=!0;const bs=hs;var gs=i.forwardRef((function(e,t){var n=e.classes,r=e.className,a=e.component,o=void 0===a?"div":a,l=e.square,s=void 0!==l&&l,c=e.elevation,u=void 0===c?1:c,d=e.variant,m=void 0===d?"elevation":d,f=$n(e,["classes","className","component","square","elevation","variant"]);return i.createElement(o,qn({className:Hn(n.root,r,"outlined"===m?n.outlined:n["elevation".concat(u)],!s&&n.rounded),ref:t},f))}));const vs=Jl((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),qn({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(gs);function ys(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Es(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function xs(e){return[e.horizontal,e.vertical].map((function(e){return"number"==typeof e?"".concat(e,"px"):e})).join(" ")}function ks(e){return"function"==typeof e?e():e}var ws=i.forwardRef((function(e,t){var n=e.action,r=e.anchorEl,a=e.anchorOrigin,o=void 0===a?{vertical:"top",horizontal:"left"}:a,l=e.anchorPosition,s=e.anchorReference,c=void 0===s?"anchorEl":s,d=e.children,m=e.classes,f=e.className,p=e.container,h=e.elevation,b=void 0===h?8:h,g=e.getContentAnchorEl,v=e.marginThreshold,y=void 0===v?16:v,E=e.onEnter,x=e.onEntered,k=e.onEntering,w=e.onExit,N=e.onExited,S=e.onExiting,C=e.open,_=e.PaperProps,R=void 0===_?{}:_,P=e.transformOrigin,O=void 0===P?{vertical:"top",horizontal:"left"}:P,T=e.TransitionComponent,I=void 0===T?bs:T,A=e.transitionDuration,F=void 0===A?"auto":A,D=e.TransitionProps,L=void 0===D?{}:D,M=$n(e,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","className","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),z=i.useRef(),B=i.useCallback((function(e){if("anchorPosition"===c)return l;var t=ks(r),n=(t&&1===t.nodeType?t:Bi(z.current).body).getBoundingClientRect(),a=0===e?o.vertical:"center";return{top:n.top+ys(n,a),left:n.left+Es(n,o.horizontal)}}),[r,o.horizontal,o.vertical,l,c]),j=i.useCallback((function(e){var t=0;if(g&&"anchorEl"===c){var n=g(e);if(n&&e.contains(n)){var r=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentElement).scrollTop;return r}(e,n);t=n.offsetTop+n.clientHeight/2-r||0}}return t}),[o.vertical,c,g]),U=i.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:ys(e,O.vertical)+t,horizontal:Es(e,O.horizontal)}}),[O.horizontal,O.vertical]),q=i.useCallback((function(e){var t=j(e),n={width:e.offsetWidth,height:e.offsetHeight},a=U(n,t);if("none"===c)return{top:null,left:null,transformOrigin:xs(a)};var o=B(t),l=o.top-a.vertical,i=o.left-a.horizontal,s=l+n.height,u=i+n.width,d=ji(ks(r)),m=d.innerHeight-y,f=d.innerWidth-y;if(l<y){var p=l-y;l-=p,a.vertical+=p}else if(s>m){var h=s-m;l-=h,a.vertical+=h}if(i<y){var b=i-y;i-=b,a.horizontal+=b}else if(u>f){var g=u-f;i-=g,a.horizontal+=g}return{top:"".concat(Math.round(l),"px"),left:"".concat(Math.round(i),"px"),transformOrigin:xs(a)}}),[r,c,B,j,U,y]),W=i.useCallback((function(){var e=z.current;if(e){var t=q(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}}),[q]),$=i.useCallback((function(e){z.current=u.findDOMNode(e)}),[]);i.useEffect((function(){C&&W()})),i.useImperativeHandle(n,(function(){return C?{updatePosition:function(){W()}}:null}),[C,W]),i.useEffect((function(){if(C){var e=pi((function(){W()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[C,W]);var V=F;"auto"!==F||I.muiSupportAuto||(V=void 0);var H=p||(r?Bi(ks(r)).body:void 0);return i.createElement(ns,qn({container:H,open:C,ref:t,BackdropProps:{invisible:!0},className:Hn(m.root,f)},M),i.createElement(I,qn({appear:!0,in:C,onEnter:E,onEntered:x,onExit:w,onExited:N,onExiting:S,timeout:V},L,{onEntering:Ui((function(e,t){k&&k(e,t),W()}),L.onEntering)}),i.createElement(vs,qn({elevation:b,ref:$},R,{className:Hn(m.paper,R.className)}),d)))}));const Ns=Jl({root:{},paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}},{name:"MuiPopover"})(ws),Ss=i.createContext({});var Cs=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.className,o=e.component,l=void 0===o?"ul":o,s=e.dense,c=void 0!==s&&s,u=e.disablePadding,d=void 0!==u&&u,m=e.subheader,f=$n(e,["children","classes","className","component","dense","disablePadding","subheader"]),p=i.useMemo((function(){return{dense:c}}),[c]);return i.createElement(Ss.Provider,{value:p},i.createElement(l,qn({className:Hn(r.root,a,c&&r.dense,!d&&r.padding,m&&r.subheader),ref:t},f),m,n))}));const _s=Jl({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(Cs);function Rs(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ps(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Os(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function Ts(e,t,n,r,a,o){for(var l=!1,i=a(e,t,!!t&&n);i;){if(i===e.firstChild){if(l)return;l=!0}var s=!r&&(i.disabled||"true"===i.getAttribute("aria-disabled"));if(i.hasAttribute("tabindex")&&Os(i,o)&&!s)return void i.focus();i=a(e,i,n)}}var Is="undefined"==typeof window?i.useEffect:i.useLayoutEffect,As=i.forwardRef((function(e,t){var n=e.actions,r=e.autoFocus,a=void 0!==r&&r,o=e.autoFocusItem,l=void 0!==o&&o,s=e.children,c=e.className,d=e.disabledItemsFocusable,m=void 0!==d&&d,f=e.disableListWrap,p=void 0!==f&&f,h=e.onKeyDown,b=e.variant,g=void 0===b?"selectedMenu":b,v=$n(e,["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"]),y=i.useRef(null),E=i.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Is((function(){a&&y.current.focus()}),[a]),i.useImperativeHandle(n,(function(){return{adjustStyleForScrollbar:function(e,t){var n=!y.current.style.width;if(e.clientHeight<y.current.clientHeight&&n){var r="".concat(Hi(),"px");y.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,y.current.style.width="calc(100% + ".concat(r,")")}return y.current}}}),[]);var x=fi(i.useCallback((function(e){y.current=u.findDOMNode(e)}),[]),t),k=-1;i.Children.forEach(s,(function(e,t){i.isValidElement(e)&&(e.props.disabled||("selectedMenu"===g&&e.props.selected||-1===k)&&(k=t))}));var w=i.Children.map(s,(function(e,t){if(t===k){var n={};return l&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===g&&(n.tabIndex=0),i.cloneElement(e,n)}return e}));return i.createElement(_s,qn({role:"menu",ref:x,className:c,onKeyDown:function(e){var t=y.current,n=e.key,r=Bi(t).activeElement;if("ArrowDown"===n)e.preventDefault(),Ts(t,r,p,m,Rs);else if("ArrowUp"===n)e.preventDefault(),Ts(t,r,p,m,Ps);else if("Home"===n)e.preventDefault(),Ts(t,null,p,m,Rs);else if("End"===n)e.preventDefault(),Ts(t,null,p,m,Ps);else if(1===n.length){var a=E.current,o=n.toLowerCase(),l=performance.now();a.keys.length>0&&(l-a.lastTime>500?(a.keys=[],a.repeating=!0,a.previousKeyMatched=!0):a.repeating&&o!==a.keys[0]&&(a.repeating=!1)),a.lastTime=l,a.keys.push(o);var i=r&&!a.repeating&&Os(r,a);a.previousKeyMatched&&(i||Ts(t,r,!1,m,Rs,a))?e.preventDefault():a.previousKeyMatched=!1}h&&h(e)},tabIndex:a?0:-1},v),w)}));const Fs=As;var Ds={vertical:"top",horizontal:"right"},Ls={vertical:"top",horizontal:"left"},Ms=i.forwardRef((function(e,t){var n=e.autoFocus,r=void 0===n||n,a=e.children,o=e.classes,l=e.disableAutoFocusItem,s=void 0!==l&&l,c=e.MenuListProps,d=void 0===c?{}:c,m=e.onClose,f=e.onEntering,p=e.open,h=e.PaperProps,b=void 0===h?{}:h,g=e.PopoverClasses,v=e.transitionDuration,y=void 0===v?"auto":v,E=e.TransitionProps,x=(E=void 0===E?{}:E).onEntering,k=$n(E,["onEntering"]),w=e.variant,N=void 0===w?"selectedMenu":w,S=$n(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"]),C=_i(),_=r&&!s&&p,R=i.useRef(null),P=i.useRef(null),O=-1;i.Children.map(a,(function(e,t){i.isValidElement(e)&&(e.props.disabled||("menu"!==N&&e.props.selected||-1===O)&&(O=t))}));var T=i.Children.map(a,(function(e,t){return t===O?i.cloneElement(e,{ref:function(t){P.current=u.findDOMNode(t),mi(e.ref,t)}}):e}));return i.createElement(Ns,qn({getContentAnchorEl:function(){return P.current},classes:g,onClose:m,TransitionProps:qn({onEntering:function(e,t){R.current&&R.current.adjustStyleForScrollbar(e,C),f&&f(e,t),x&&x(e,t)}},k),anchorOrigin:"rtl"===C.direction?Ds:Ls,transformOrigin:"rtl"===C.direction?Ds:Ls,PaperProps:qn({},b,{classes:qn({},b.classes,{root:o.paper})}),open:p,ref:t,transitionDuration:y},S),i.createElement(Fs,qn({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),m&&m(e,"tabKeyDown"))},actions:R,autoFocus:r&&(-1===O||s),autoFocusItem:_,variant:N},d,{className:Hn(o.list,d.className)}),T))}));const zs=Jl({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},{name:"MuiMenu"})(Ms);function Bs(e){var t=e.controlled,n=e.default,r=(e.name,e.state,i.useRef(void 0!==t).current),a=i.useState(n),o=a[0],l=a[1];return[r?t:o,i.useCallback((function(e){r||l(e)}),[])]}function js(e,t){return"object"===Zn(t)&&null!==t?e===t:String(e)===String(t)}const Us=i.forwardRef((function(e,t){var n=e["aria-label"],r=e.autoFocus,a=e.autoWidth,o=e.children,l=e.classes,s=e.className,c=e.defaultValue,u=e.disabled,d=e.displayEmpty,m=e.IconComponent,f=e.inputRef,p=e.labelId,h=e.MenuProps,b=void 0===h?{}:h,g=e.multiple,v=e.name,y=e.onBlur,E=e.onChange,x=e.onClose,k=e.onFocus,w=e.onOpen,N=e.open,S=e.readOnly,C=e.renderValue,_=e.SelectDisplayProps,R=void 0===_?{}:_,P=e.tabIndex,O=(e.type,e.value),T=e.variant,I=void 0===T?"standard":T,A=$n(e,["aria-label","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"]),F=Al(Bs({controlled:O,default:c,name:"Select"}),2),D=F[0],L=F[1],M=i.useRef(null),z=i.useState(null),B=z[0],j=z[1],U=i.useRef(null!=N).current,q=i.useState(),W=q[0],$=q[1],V=i.useState(!1),H=V[0],G=V[1],K=fi(t,f);i.useImperativeHandle(K,(function(){return{focus:function(){B.focus()},node:M.current,value:D}}),[B,D]),i.useEffect((function(){r&&B&&B.focus()}),[r,B]),i.useEffect((function(){if(B){var e=Bi(B).getElementById(p);if(e){var t=function(){getSelection().isCollapsed&&B.focus()};return e.addEventListener("click",t),function(){e.removeEventListener("click",t)}}}}),[p,B]);var Q,J,X=function(e,t){e?w&&w(t):x&&x(t),U||($(a?null:B.clientWidth),G(e))},Y=i.Children.toArray(o),Z=function(e){return function(t){var n;if(g||X(!1,t),g){n=Array.isArray(D)?D.slice():[];var r=D.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;e.props.onClick&&e.props.onClick(t),D!==n&&(L(n),E&&(t.persist(),Object.defineProperty(t,"target",{writable:!0,value:{value:n,name:v}}),E(t,e)))}},ee=null!==B&&(U?N:H);delete A["aria-invalid"];var te=[],ne=!1;(Kn({value:D})||d)&&(C?Q=C(D):ne=!0);var re=Y.map((function(e){if(!i.isValidElement(e))return null;var t;if(g){if(!Array.isArray(D))throw new Error(sl(2));(t=D.some((function(t){return js(t,e.props.value)})))&&ne&&te.push(e.props.children)}else(t=js(D,e.props.value))&&ne&&(J=e.props.children);return i.cloneElement(e,{"aria-selected":t?"true":void 0,onClick:Z(e),onKeyUp:function(t){" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));ne&&(Q=g?te.join(", "):J);var ae,oe=W;!a&&U&&B&&(oe=B.clientWidth),ae=void 0!==P?P:u?null:0;var le=R.id||(v?"mui-component-select-".concat(v):void 0);return i.createElement(i.Fragment,null,i.createElement("div",qn({className:Hn(l.root,l.select,l.selectMenu,l[I],s,u&&l.disabled),ref:j,tabIndex:ae,role:"button","aria-disabled":u?"true":void 0,"aria-expanded":ee?"true":void 0,"aria-haspopup":"listbox","aria-label":n,"aria-labelledby":[p,le].filter(Boolean).join(" ")||void 0,onKeyDown:function(e){S||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),X(!0,e))},onMouseDown:u||S?null:function(e){0===e.button&&(e.preventDefault(),B.focus(),X(!0,e))},onBlur:function(e){!ee&&y&&(e.persist(),Object.defineProperty(e,"target",{writable:!0,value:{value:D,name:v}}),y(e))},onFocus:k},R,{id:le}),function(e){return null==e||"string"==typeof e&&!e.trim()}(Q)?i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):Q),i.createElement("input",qn({value:Array.isArray(D)?D.join(","):D,name:v,ref:M,"aria-hidden":!0,onChange:function(e){var t=Y.map((function(e){return e.props.value})).indexOf(e.target.value);if(-1!==t){var n=Y[t];L(n.props.value),E&&E(e,n)}},tabIndex:-1,className:l.nativeInput,autoFocus:r},A)),i.createElement(m,{className:Hn(l.icon,l["icon".concat(Xl(I))],ee&&l.iconOpen,u&&l.disabled)}),i.createElement(zs,qn({id:"menu-".concat(v||""),anchorEl:B,open:ee,onClose:function(e){X(!1,e)}},b,{MenuListProps:qn({"aria-labelledby":p,role:"listbox",disableListWrap:!0},b.MenuListProps),PaperProps:qn({},b.PaperProps,{style:qn({minWidth:oe},null!=b.PaperProps?b.PaperProps.style:null)})}),re))}));var qs=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.className,o=e.color,l=void 0===o?"inherit":o,s=e.component,c=void 0===s?"svg":s,u=e.fontSize,d=void 0===u?"medium":u,m=e.htmlColor,f=e.titleAccess,p=e.viewBox,h=void 0===p?"0 0 24 24":p,b=$n(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return i.createElement(c,qn({className:Hn(r.root,a,"inherit"!==l&&r["color".concat(Xl(l))],"default"!==d&&"medium"!==d&&r["fontSize".concat(Xl(d))]),focusable:"false",viewBox:h,color:m,"aria-hidden":!f||void 0,role:f?"img":void 0,ref:t},b),n,f?i.createElement("title",null,f):null)}));qs.muiName="SvgIcon";const Ws=Jl((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(qs);function $s(e,t){var n=function(t,n){return i.createElement(Ws,qn({ref:n},t),e)};return n.muiName=Ws.muiName,i.memo(i.forwardRef(n))}const Vs=$s(i.createElement("path",{d:"M7 10l5 5 5-5z"})),Hs=i.forwardRef((function(e,t){var n=e.classes,r=e.className,a=e.disabled,o=e.IconComponent,l=e.inputRef,s=e.variant,c=void 0===s?"standard":s,u=$n(e,["classes","className","disabled","IconComponent","inputRef","variant"]);return i.createElement(i.Fragment,null,i.createElement("select",qn({className:Hn(n.root,n.select,n[c],r,a&&n.disabled),disabled:a,ref:l||t},u)),e.multiple?null:i.createElement(o,{className:Hn(n.icon,n["icon".concat(Xl(c))],a&&n.disabled)}))}));var Gs=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper},"&&":{paddingRight:24}},filled:{"&&":{paddingRight:32}},outlined:{borderRadius:e.shape.borderRadius,"&&":{paddingRight:32}},selectMenu:{height:"auto",minHeight:"1.1876em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",pointerEvents:"none",color:e.palette.action.active,"&$disabled":{color:e.palette.action.disabled}},iconOpen:{transform:"rotate(180deg)"},iconFilled:{right:7},iconOutlined:{right:7},nativeInput:{bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%"}}},Ks=i.createElement(Ni,null),Qs=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.IconComponent,o=void 0===a?Vs:a,l=e.input,s=void 0===l?Ks:l,c=e.inputProps,u=(e.variant,$n(e,["children","classes","IconComponent","input","inputProps","variant"])),d=di({props:e,muiFormControl:Ii(),states:["variant"]});return i.cloneElement(s,qn({inputComponent:Hs,inputProps:qn({children:n,classes:r,IconComponent:o,variant:d.variant,type:void 0},c,s?s.props.inputProps:{}),ref:t},u))}));Qs.muiName="Select",Jl(Gs,{name:"MuiNativeSelect"})(Qs);var Js=Gs,Xs=i.createElement(Ni,null),Ys=i.createElement(Ci,null),Zs=i.forwardRef((function e(t,n){var r=t.autoWidth,a=void 0!==r&&r,o=t.children,l=t.classes,s=t.displayEmpty,c=void 0!==s&&s,u=t.IconComponent,d=void 0===u?Vs:u,m=t.id,f=t.input,p=t.inputProps,h=t.label,b=t.labelId,g=t.labelWidth,v=void 0===g?0:g,y=t.MenuProps,E=t.multiple,x=void 0!==E&&E,k=t.native,w=void 0!==k&&k,N=t.onClose,S=t.onOpen,C=t.open,_=t.renderValue,R=t.SelectDisplayProps,P=t.variant,O=void 0===P?"standard":P,T=$n(t,["autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"]),I=w?Hs:Us,A=di({props:t,muiFormControl:Ii(),states:["variant"]}).variant||O,F=f||{standard:Xs,outlined:i.createElement(Ti,{label:h,labelWidth:v}),filled:Ys}[A];return i.cloneElement(F,qn({inputComponent:I,inputProps:qn({children:o,IconComponent:d,variant:A,type:void 0,multiple:x},w?{id:m}:{autoWidth:a,displayEmpty:c,labelId:b,MenuProps:y,onClose:N,onOpen:S,open:C,renderValue:_,SelectDisplayProps:qn({id:m},R)},p,{classes:p?ba({baseClasses:l,newClasses:p.classes,Component:e}):l},f?f.props.inputProps:{}),ref:n},T))}));Zs.muiName="Select";const ec=Jl(Js,{name:"MuiSelect"})(Zs);var tc={standard:Ni,filled:Ci,outlined:Ti},nc=i.forwardRef((function(e,t){var n=e.autoComplete,r=e.autoFocus,a=void 0!==r&&r,o=e.children,l=e.classes,s=e.className,c=e.color,u=void 0===c?"primary":c,d=e.defaultValue,m=e.disabled,f=void 0!==m&&m,p=e.error,h=void 0!==p&&p,b=e.FormHelperTextProps,g=e.fullWidth,v=void 0!==g&&g,y=e.helperText,E=e.hiddenLabel,x=e.id,k=e.InputLabelProps,w=e.inputProps,N=e.InputProps,S=e.inputRef,C=e.label,_=e.multiline,R=void 0!==_&&_,P=e.name,O=e.onBlur,T=e.onChange,I=e.onFocus,A=e.placeholder,F=e.required,D=void 0!==F&&F,L=e.rows,M=e.rowsMax,z=e.maxRows,B=e.minRows,j=e.select,U=void 0!==j&&j,q=e.SelectProps,W=e.type,$=e.value,V=e.variant,H=void 0===V?"standard":V,G=$n(e,["autoComplete","autoFocus","children","classes","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","maxRows","minRows","select","SelectProps","type","value","variant"]),K={};if("outlined"===H&&(k&&void 0!==k.shrink&&(K.notched=k.shrink),C)){var Q,J=null!==(Q=null==k?void 0:k.required)&&void 0!==Q?Q:D;K.label=i.createElement(i.Fragment,null,C,J&&" *")}U&&(q&&q.native||(K.id=void 0),K["aria-describedby"]=void 0);var X=y&&x?"".concat(x,"-helper-text"):void 0,Y=C&&x?"".concat(x,"-label"):void 0,Z=tc[H],ee=i.createElement(Z,qn({"aria-describedby":X,autoComplete:n,autoFocus:a,defaultValue:d,fullWidth:v,multiline:R,name:P,rows:L,rowsMax:M,maxRows:z,minRows:B,type:W,value:$,id:x,inputRef:S,onBlur:O,onChange:T,onFocus:I,placeholder:A,inputProps:w},K,N));return i.createElement(ni,qn({className:Hn(l.root,s),disabled:f,error:h,fullWidth:v,hiddenLabel:E,ref:t,required:D,color:u,variant:H},G),C&&i.createElement(Li,qn({htmlFor:x,id:Y},k),C),U?i.createElement(ec,qn({"aria-describedby":X,id:x,labelId:Y,value:$,input:ee},q),o):ee,y&&i.createElement(zi,qn({id:X},b),y))}));const rc=Jl({root:{}},{name:"MuiTextField"})(nc),ac=i.createContext(),oc=i.forwardRef((function(e,t){var n=e.actions,r=e.children,a=e.name,o=e.value,l=e.onChange,s=$n(e,["actions","children","name","value","onChange"]),c=i.useRef(null),u=Al(Bs({controlled:o,default:e.defaultValue,name:"RadioGroup"}),2),d=u[0],m=u[1];i.useImperativeHandle(n,(function(){return{focus:function(){var e=c.current.querySelector("input:not(:disabled):checked");e||(e=c.current.querySelector("input:not(:disabled)")),e&&e.focus()}}}),[]);var f,p,h,b,g,v=fi(t,c),y=(f=a,p=i.useState(f),h=p[0],b=p[1],g=f||h,i.useEffect((function(){null==h&&b("mui-".concat(Math.round(1e5*Math.random())))}),[h]),g);return i.createElement(ac.Provider,{value:{name:y,onChange:function(e){m(e.target.value),l&&l(e,e.target.value)},value:d}},i.createElement(ai,qn({role:"radiogroup",ref:v},s),r))}));var lc={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},ic=i.forwardRef((function(e,t){var n=e.align,r=void 0===n?"inherit":n,a=e.classes,o=e.className,l=e.color,s=void 0===l?"initial":l,c=e.component,u=e.display,d=void 0===u?"initial":u,m=e.gutterBottom,f=void 0!==m&&m,p=e.noWrap,h=void 0!==p&&p,b=e.paragraph,g=void 0!==b&&b,v=e.variant,y=void 0===v?"body1":v,E=e.variantMapping,x=void 0===E?lc:E,k=$n(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),w=c||(g?"p":x[y]||lc[y])||"span";return i.createElement(w,qn({className:Hn(a.root,o,"inherit"!==y&&a[y],"initial"!==s&&a["color".concat(Xl(s))],h&&a.noWrap,f&&a.gutterBottom,g&&a.paragraph,"inherit"!==r&&a["align".concat(Xl(r))],"initial"!==d&&a["display".concat(Xl(d))]),ref:t},k))}));const sc=Jl((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(ic);var cc=i.forwardRef((function(e,t){e.checked;var n=e.classes,r=e.className,a=e.control,o=e.disabled,l=(e.inputRef,e.label),s=e.labelPlacement,c=void 0===s?"end":s,u=(e.name,e.onChange,e.value,$n(e,["checked","classes","className","control","disabled","inputRef","label","labelPlacement","name","onChange","value"])),d=Ii(),m=o;void 0===m&&void 0!==a.props.disabled&&(m=a.props.disabled),void 0===m&&d&&(m=d.disabled);var f={disabled:m};return["checked","name","onChange","value","inputRef"].forEach((function(t){void 0===a.props[t]&&void 0!==e[t]&&(f[t]=e[t])})),i.createElement("label",qn({className:Hn(n.root,r,"end"!==c&&n["labelPlacement".concat(Xl(c))],m&&n.disabled),ref:t},u),i.cloneElement(a,f),i.createElement(sc,{component:"span",className:Hn(n.label,m&&n.disabled)},l))}));const uc=Jl((function(e){return{root:{display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,"&$disabled":{cursor:"default"}},labelPlacementStart:{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},labelPlacementTop:{flexDirection:"column-reverse",marginLeft:16},labelPlacementBottom:{flexDirection:"column",marginLeft:16},disabled:{},label:{"&$disabled":{color:e.palette.text.disabled}}}}),{name:"MuiFormControlLabel"})(cc);var dc=!0,mc=!1,fc=null,pc={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function hc(e){e.metaKey||e.altKey||e.ctrlKey||(dc=!0)}function bc(){dc=!1}function gc(){"hidden"===this.visibilityState&&mc&&(dc=!0)}function vc(e){var t,n,r,a=e.target;try{return a.matches(":focus-visible")}catch(e){}return dc||(n=(t=a).type,!("INPUT"!==(r=t.tagName)||!pc[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function yc(){mc=!0,window.clearTimeout(fc),fc=window.setTimeout((function(){mc=!1}),100)}function Ec(){return{isFocusVisible:vc,onBlurVisible:yc,ref:i.useCallback((function(e){var t,n=u.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",hc,!0),t.addEventListener("mousedown",bc,!0),t.addEventListener("pointerdown",bc,!0),t.addEventListener("touchstart",bc,!0),t.addEventListener("visibilitychange",gc,!0))}),[])}}function xc(e,t){var n=Object.create(null);return e&&i.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,i.isValidElement)(e)?t(e):e}(e)})),n}function kc(e,t,n){return null!=n[t]?n[t]:e.props[t]}function wc(e,t,n){var r=xc(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,a=Object.create(null),o=[];for(var l in e)l in t?o.length&&(a[l]=o,o=[]):o.push(l);var i={};for(var s in t){if(a[s])for(r=0;r<a[s].length;r++){var c=a[s][r];i[a[s][r]]=n(c)}i[s]=n(s)}for(r=0;r<o.length;r++)i[o[r]]=n(o[r]);return i}(t,r);return Object.keys(a).forEach((function(o){var l=a[o];if((0,i.isValidElement)(l)){var s=o in t,c=o in r,u=t[o],d=(0,i.isValidElement)(u)&&!u.props.in;!c||s&&!d?c||!s||d?c&&s&&(0,i.isValidElement)(u)&&(a[o]=(0,i.cloneElement)(l,{onExited:n.bind(null,l),in:u.props.in,exit:kc(l,"exit",e),enter:kc(l,"enter",e)})):a[o]=(0,i.cloneElement)(l,{in:!1}):a[o]=(0,i.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:kc(l,"exit",e),enter:kc(l,"enter",e)})}})),a}var Nc=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Sc=function(e){function t(t,n){var r,a=(r=e.call(this,t,n)||this).handleExited.bind(or(r));return r.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},r}ar(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,a=t.children,o=t.handleExited;return{children:t.firstRender?(n=e,r=o,xc(n.children,(function(e){return(0,i.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:kc(e,"appear",n),enter:kc(e,"enter",n),exit:kc(e,"exit",n)})}))):wc(e,a,o),firstRender:!1}},n.handleExited=function(e,t){var n=xc(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=qn({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Wn(e,["component","childFactory"]),a=this.state.contextValue,o=Nc(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i.createElement(rs.Provider,{value:a},o):i.createElement(rs.Provider,{value:a},i.createElement(t,r,o))},t}(i.Component);Sc.propTypes={},Sc.defaultProps={component:"div",childFactory:function(e){return e}};const Cc=Sc;var _c="undefined"==typeof window?i.useEffect:i.useLayoutEffect;const Rc=function(e){var t=e.classes,n=e.pulsate,r=void 0!==n&&n,a=e.rippleX,o=e.rippleY,l=e.rippleSize,s=e.in,c=e.onExited,u=void 0===c?function(){}:c,d=e.timeout,m=i.useState(!1),f=m[0],p=m[1],h=Hn(t.ripple,t.rippleVisible,r&&t.ripplePulsate),b={width:l,height:l,top:-l/2+o,left:-l/2+a},g=Hn(t.child,f&&t.childLeaving,r&&t.childPulsate),v=Vi(u);return _c((function(){if(!s){p(!0);var e=setTimeout(v,d);return function(){clearTimeout(e)}}}),[v,s,d]),i.createElement("span",{className:h,style:b},i.createElement("span",{className:g}))};var Pc=i.forwardRef((function(e,t){var n=e.center,r=void 0!==n&&n,a=e.classes,o=e.className,l=$n(e,["center","classes","className"]),s=i.useState([]),c=s[0],u=s[1],d=i.useRef(0),m=i.useRef(null);i.useEffect((function(){m.current&&(m.current(),m.current=null)}),[c]);var f=i.useRef(!1),p=i.useRef(null),h=i.useRef(null),b=i.useRef(null);i.useEffect((function(){return function(){clearTimeout(p.current)}}),[]);var g=i.useCallback((function(e){var t=e.pulsate,n=e.rippleX,r=e.rippleY,o=e.rippleSize,l=e.cb;u((function(e){return[].concat(Ka(e),[i.createElement(Rc,{key:d.current,classes:a,timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o})])})),d.current+=1,m.current=l}),[a]),v=i.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,a=t.pulsate,o=void 0!==a&&a,l=t.center,i=void 0===l?r||t.pulsate:l,s=t.fakeElement,c=void 0!==s&&s;if("mousedown"===e.type&&f.current)f.current=!1;else{"touchstart"===e.type&&(f.current=!0);var u,d,m,v=c?null:b.current,y=v?v.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(i||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(y.width/2),d=Math.round(y.height/2);else{var E=e.touches?e.touches[0]:e,x=E.clientX,k=E.clientY;u=Math.round(x-y.left),d=Math.round(k-y.top)}if(i)(m=Math.sqrt((2*Math.pow(y.width,2)+Math.pow(y.height,2))/3))%2==0&&(m+=1);else{var w=2*Math.max(Math.abs((v?v.clientWidth:0)-u),u)+2,N=2*Math.max(Math.abs((v?v.clientHeight:0)-d),d)+2;m=Math.sqrt(Math.pow(w,2)+Math.pow(N,2))}e.touches?null===h.current&&(h.current=function(){g({pulsate:o,rippleX:u,rippleY:d,rippleSize:m,cb:n})},p.current=setTimeout((function(){h.current&&(h.current(),h.current=null)}),80)):g({pulsate:o,rippleX:u,rippleY:d,rippleSize:m,cb:n})}}),[r,g]),y=i.useCallback((function(){v({},{pulsate:!0})}),[v]),E=i.useCallback((function(e,t){if(clearTimeout(p.current),"touchend"===e.type&&h.current)return e.persist(),h.current(),h.current=null,void(p.current=setTimeout((function(){E(e,t)})));h.current=null,u((function(e){return e.length>0?e.slice(1):e})),m.current=t}),[]);return i.useImperativeHandle(t,(function(){return{pulsate:y,start:v,stop:E}}),[y,v,E]),i.createElement("span",qn({className:Hn(a.root,o),ref:b},l),i.createElement(Cc,{component:null,exit:!0},c))}));const Oc=Jl((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(i.memo(Pc));var Tc=i.forwardRef((function(e,t){var n=e.action,r=e.buttonRef,a=e.centerRipple,o=void 0!==a&&a,l=e.children,s=e.classes,c=e.className,d=e.component,m=void 0===d?"button":d,f=e.disabled,p=void 0!==f&&f,h=e.disableRipple,b=void 0!==h&&h,g=e.disableTouchRipple,v=void 0!==g&&g,y=e.focusRipple,E=void 0!==y&&y,x=e.focusVisibleClassName,k=e.onBlur,w=e.onClick,N=e.onFocus,S=e.onFocusVisible,C=e.onKeyDown,_=e.onKeyUp,R=e.onMouseDown,P=e.onMouseLeave,O=e.onMouseUp,T=e.onTouchEnd,I=e.onTouchMove,A=e.onTouchStart,F=e.onDragLeave,D=e.tabIndex,L=void 0===D?0:D,M=e.TouchRippleProps,z=e.type,B=void 0===z?"button":z,j=$n(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),U=i.useRef(null),q=i.useRef(null),W=i.useState(!1),$=W[0],V=W[1];p&&$&&V(!1);var H=Ec(),G=H.isFocusVisible,K=H.onBlurVisible,Q=H.ref;function J(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:v;return Vi((function(r){return t&&t(r),!n&&q.current&&q.current[e](r),!0}))}i.useImperativeHandle(n,(function(){return{focusVisible:function(){V(!0),U.current.focus()}}}),[]),i.useEffect((function(){$&&E&&!b&&q.current.pulsate()}),[b,E,$]);var X=J("start",R),Y=J("stop",F),Z=J("stop",O),ee=J("stop",(function(e){$&&e.preventDefault(),P&&P(e)})),te=J("start",A),ne=J("stop",T),re=J("stop",I),ae=J("stop",(function(e){$&&(K(e),V(!1)),k&&k(e)}),!1),oe=Vi((function(e){U.current||(U.current=e.currentTarget),G(e)&&(V(!0),S&&S(e)),N&&N(e)})),le=function(){var e=u.findDOMNode(U.current);return m&&"button"!==m&&!("A"===e.tagName&&e.href)},ie=i.useRef(!1),se=Vi((function(e){E&&!ie.current&&$&&q.current&&" "===e.key&&(ie.current=!0,e.persist(),q.current.stop(e,(function(){q.current.start(e)}))),e.target===e.currentTarget&&le()&&" "===e.key&&e.preventDefault(),C&&C(e),e.target===e.currentTarget&&le()&&"Enter"===e.key&&!p&&(e.preventDefault(),w&&w(e))})),ce=Vi((function(e){E&&" "===e.key&&q.current&&$&&!e.defaultPrevented&&(ie.current=!1,e.persist(),q.current.stop(e,(function(){q.current.pulsate(e)}))),_&&_(e),w&&e.target===e.currentTarget&&le()&&" "===e.key&&!e.defaultPrevented&&w(e)})),ue=m;"button"===ue&&j.href&&(ue="a");var de={};"button"===ue?(de.type=B,de.disabled=p):("a"===ue&&j.href||(de.role="button"),de["aria-disabled"]=p);var me=fi(r,t),fe=fi(Q,U),pe=fi(me,fe),he=i.useState(!1),be=he[0],ge=he[1];i.useEffect((function(){ge(!0)}),[]);var ve=be&&!b&&!p;return i.createElement(ue,qn({className:Hn(s.root,c,$&&[s.focusVisible,x],p&&s.disabled),onBlur:ae,onClick:w,onFocus:oe,onKeyDown:se,onKeyUp:ce,onMouseDown:X,onMouseLeave:ee,onMouseUp:Z,onDragLeave:Y,onTouchEnd:ne,onTouchMove:re,onTouchStart:te,ref:pe,tabIndex:p?-1:L},de,j),l,ve?i.createElement(Oc,qn({ref:q,center:o},M)):null)}));const Ic=Jl({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Tc);var Ac=i.forwardRef((function(e,t){var n=e.edge,r=void 0!==n&&n,a=e.children,o=e.classes,l=e.className,s=e.color,c=void 0===s?"default":s,u=e.disabled,d=void 0!==u&&u,m=e.disableFocusRipple,f=void 0!==m&&m,p=e.size,h=void 0===p?"medium":p,b=$n(e,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return i.createElement(Ic,qn({className:Hn(o.root,l,"default"!==c&&o["color".concat(Xl(c))],d&&o.disabled,"small"===h&&o["size".concat(Xl(h))],{start:o.edgeStart,end:o.edgeEnd}[r]),centerRipple:!0,focusRipple:!f,disabled:d,ref:t},b),i.createElement("span",{className:o.label},a))}));const Fc=Jl((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:xl(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(Ac);var Dc=i.forwardRef((function(e,t){var n=e.autoFocus,r=e.checked,a=e.checkedIcon,o=e.classes,l=e.className,s=e.defaultChecked,c=e.disabled,u=e.icon,d=e.id,m=e.inputProps,f=e.inputRef,p=e.name,h=e.onBlur,b=e.onChange,g=e.onFocus,v=e.readOnly,y=e.required,E=e.tabIndex,x=e.type,k=e.value,w=$n(e,["autoFocus","checked","checkedIcon","classes","className","defaultChecked","disabled","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"]),N=Al(Bs({controlled:r,default:Boolean(s),name:"SwitchBase",state:"checked"}),2),S=N[0],C=N[1],_=Ii(),R=c;_&&void 0===R&&(R=_.disabled);var P="checkbox"===x||"radio"===x;return i.createElement(Fc,qn({component:"span",className:Hn(o.root,l,S&&o.checked,R&&o.disabled),disabled:R,tabIndex:null,role:void 0,onFocus:function(e){g&&g(e),_&&_.onFocus&&_.onFocus(e)},onBlur:function(e){h&&h(e),_&&_.onBlur&&_.onBlur(e)},ref:t},w),i.createElement("input",qn({autoFocus:n,checked:r,defaultChecked:s,className:o.input,disabled:R,id:P&&d,name:p,onChange:function(e){var t=e.target.checked;C(t),b&&b(e,t)},readOnly:v,ref:f,required:y,tabIndex:E,type:x,value:k},m)),S?a:u)}));const Lc=Jl({root:{padding:9},checked:{},disabled:{},input:{cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1}},{name:"PrivateSwitchBase"})(Dc),Mc=$s(i.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"})),zc=$s(i.createElement("path",{d:"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"})),Bc=Jl((function(e){return{root:{position:"relative",display:"flex","&$checked $layer":{transform:"scale(1)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.shortest})}},layer:{left:0,position:"absolute",transform:"scale(0)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeIn,duration:e.transitions.duration.shortest})},checked:{}}}),{name:"PrivateRadioButtonIcon"})((function(e){var t=e.checked,n=e.classes,r=e.fontSize;return i.createElement("div",{className:Hn(n.root,t&&n.checked)},i.createElement(Mc,{fontSize:r}),i.createElement(zc,{fontSize:r,className:n.layer}))}));var jc=i.createElement(Bc,{checked:!0}),Uc=i.createElement(Bc,null),qc=i.forwardRef((function(e,t){var n=e.checked,r=e.classes,a=e.color,o=void 0===a?"secondary":a,l=e.name,s=e.onChange,c=e.size,u=void 0===c?"medium":c,d=$n(e,["checked","classes","color","name","onChange","size"]),m=i.useContext(ac),f=n,p=Ui(s,m&&m.onChange),h=l;return m&&(void 0===f&&(f=m.value===e.value),void 0===h&&(h=m.name)),i.createElement(Lc,qn({color:o,type:"radio",icon:i.cloneElement(Uc,{fontSize:"small"===u?"small":"medium"}),checkedIcon:i.cloneElement(jc,{fontSize:"small"===u?"small":"medium"}),classes:{root:Hn(r.root,r["color".concat(Xl(o))]),checked:r.checked,disabled:r.disabled},name:h,checked:f,onChange:p,ref:t},d))}));const Wc=Jl((function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}}),{name:"MuiRadio"})(qc),$c=$s(i.createElement("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"})),Vc=$s(i.createElement("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"})),Hc=$s(i.createElement("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}));var Gc=i.createElement(Vc,null),Kc=i.createElement($c,null),Qc=i.createElement(Hc,null),Jc=i.forwardRef((function(e,t){var n=e.checkedIcon,r=void 0===n?Gc:n,a=e.classes,o=e.color,l=void 0===o?"secondary":o,s=e.icon,c=void 0===s?Kc:s,u=e.indeterminate,d=void 0!==u&&u,m=e.indeterminateIcon,f=void 0===m?Qc:m,p=e.inputProps,h=e.size,b=void 0===h?"medium":h,g=$n(e,["checkedIcon","classes","color","icon","indeterminate","indeterminateIcon","inputProps","size"]),v=d?f:c,y=d?f:r;return i.createElement(Lc,qn({type:"checkbox",classes:{root:Hn(a.root,a["color".concat(Xl(l))],d&&a.indeterminate),checked:a.checked,disabled:a.disabled},color:l,inputProps:qn({"data-indeterminate":d},p),icon:i.cloneElement(v,{fontSize:void 0===v.props.fontSize&&"small"===b?b:v.props.fontSize}),checkedIcon:i.cloneElement(y,{fontSize:void 0===y.props.fontSize&&"small"===b?b:y.props.fontSize}),ref:t},g))}));const Xc=Jl((function(e){return{root:{color:e.palette.text.secondary},checked:{},disabled:{},indeterminate:{},colorPrimary:{"&$checked":{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}},colorSecondary:{"&$checked":{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"&$disabled":{color:e.palette.action.disabled}}}}),{name:"MuiCheckbox"})(Jc);var Yc=i.forwardRef((function(e,t){var n=e.children,r=e.classes,a=e.className,o=e.color,l=void 0===o?"default":o,s=e.component,c=void 0===s?"button":s,u=e.disabled,d=void 0!==u&&u,m=e.disableElevation,f=void 0!==m&&m,p=e.disableFocusRipple,h=void 0!==p&&p,b=e.endIcon,g=e.focusVisibleClassName,v=e.fullWidth,y=void 0!==v&&v,E=e.size,x=void 0===E?"medium":E,k=e.startIcon,w=e.type,N=void 0===w?"button":w,S=e.variant,C=void 0===S?"text":S,_=$n(e,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),R=k&&i.createElement("span",{className:Hn(r.startIcon,r["iconSize".concat(Xl(x))])},k),P=b&&i.createElement("span",{className:Hn(r.endIcon,r["iconSize".concat(Xl(x))])},b);return i.createElement(Ic,qn({className:Hn(r.root,r[C],a,"inherit"===l?r.colorInherit:"default"!==l&&r["".concat(C).concat(Xl(l))],"medium"!==x&&[r["".concat(C,"Size").concat(Xl(x))],r["size".concat(Xl(x))]],f&&r.disableElevation,d&&r.disabled,y&&r.fullWidth),component:c,disabled:d,focusRipple:!h,focusVisibleClassName:Hn(r.focusVisible,g),ref:t,type:N},_),i.createElement("span",{className:r.label},R,n,P))}));const Zc=Jl((function(e){return{root:qn({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:xl(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(xl(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:xl(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(xl(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:xl(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(Yc),eu=function(e){let{formData:t,id:n,setShowResponse:r}=e;const[a,o]=(0,i.useState)([]);let l=t.filter((e=>e.id===n));l=l[0];const s=(e,t)=>{const n=[...a];n[e]=t.target.value,o(n)};return i.createElement("form",{onSubmit:e=>{e.preventDefault();const r=a.map(((e,r)=>{const a=t.filter((e=>e.id===n))[0].questions[r];return{questionText:a.questionText,answerType:a.answerType,formId:n,response:e}}));console.log(r)}},i.createElement(ni,{component:"fieldset"},i.createElement(ai,null,i.createElement("h2",null,l.title),null===(c=l.questions)||void 0===c?void 0:c.map(((e,t)=>i.createElement(ui,{container:!0,key:t,spacing:2},i.createElement("div",{className:"question-box"},i.createElement(ui,{item:!0,xs:12},i.createElement("p",{className:"question-text"},t+1,".",e.questionText)),i.createElement(ui,{item:!0,xs:12},"input"===e.answerType&&i.createElement(rc,{type:"text",fullWidth:!0,className:"questions",value:a[t]||"",onChange:e=>s(t,e)}),"radio"===e.answerType&&i.createElement(oc,{"aria-label":"radio-".concat(t),name:"radio-".concat(t),value:a[t]||"",onChange:e=>s(t,e)},e.options.map(((e,t)=>i.createElement(uc,{key:t,value:e,control:i.createElement(Wc,null),label:e})))),"checkbox"===e.answerType&&i.createElement(ai,null,e.options.map(((e,n)=>{var r;return i.createElement(uc,{key:n,control:i.createElement(Xc,{checked:(null===(r=a[t])||void 0===r?void 0:r.includes(e))||!1,onChange:e=>s(t,e),name:"checkbox-".concat(t),value:e}),label:e})})))))))),i.createElement("div",{className:"button-container"},i.createElement(Zc,{type:"submit",variant:"contained",color:"primary"},"Submit"),i.createElement(Zc,{type:"submit",variant:"contained",color:"primary",onClick:()=>r(!1)},"Back")))));var c},tu={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)},nu=function(e,t,n){if(tu.randomUUID&&!t&&!e)return tu.randomUUID();var r=(e=e||{}).random||(e.rng||In)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=r[a];return t}return Dn(r)};var ru="undefined"==typeof window?i.useEffect:i.useLayoutEffect,au=i.forwardRef((function(e,t){var n=e.alignItems,r=void 0===n?"center":n,a=e.autoFocus,o=void 0!==a&&a,l=e.button,s=void 0!==l&&l,c=e.children,d=e.classes,m=e.className,f=e.component,p=e.ContainerComponent,h=void 0===p?"li":p,b=e.ContainerProps,g=(b=void 0===b?{}:b).className,v=$n(b,["className"]),y=e.dense,E=void 0!==y&&y,x=e.disabled,k=void 0!==x&&x,w=e.disableGutters,N=void 0!==w&&w,S=e.divider,C=void 0!==S&&S,_=e.focusVisibleClassName,R=e.selected,P=void 0!==R&&R,O=$n(e,["alignItems","autoFocus","button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]),T=i.useContext(Ss),I={dense:E||T.dense||!1,alignItems:r},A=i.useRef(null);ru((function(){o&&A.current&&A.current.focus()}),[o]);var F=i.Children.toArray(c),D=F.length&&Yl(F[F.length-1],["ListItemSecondaryAction"]),L=fi(i.useCallback((function(e){A.current=u.findDOMNode(e)}),[]),t),M=qn({className:Hn(d.root,m,I.dense&&d.dense,!N&&d.gutters,C&&d.divider,k&&d.disabled,s&&d.button,"center"!==r&&d.alignItemsFlexStart,D&&d.secondaryAction,P&&d.selected),disabled:k},O),z=f||"li";return s&&(M.component=f||"div",M.focusVisibleClassName=Hn(d.focusVisible,_),z=Ic),D?(z=M.component||f?z:"div","li"===h&&("li"===z?z="div":"li"===M.component&&(M.component="div")),i.createElement(Ss.Provider,{value:I},i.createElement(h,qn({className:Hn(d.container,g),ref:L},v),i.createElement(z,M,F),F.pop()))):i.createElement(Ss.Provider,{value:I},i.createElement(z,qn({ref:L},M),F))}));const ou=Jl((function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,"&$focusVisible":{backgroundColor:e.palette.action.selected},"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected},"&$disabled":{opacity:.5}},container:{position:"relative"},focusVisible:{},dense:{paddingTop:4,paddingBottom:4},alignItemsFlexStart:{alignItems:"flex-start"},disabled:{},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:{paddingLeft:16,paddingRight:16},button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:48},selected:{}}}),{name:"MuiListItem"})(au);var lu=i.forwardRef((function(e,t){var n,r=e.classes,a=e.className,o=e.component,l=void 0===o?"li":o,s=e.disableGutters,c=void 0!==s&&s,u=e.ListItemClasses,d=e.role,m=void 0===d?"menuitem":d,f=e.selected,p=e.tabIndex,h=$n(e,["classes","className","component","disableGutters","ListItemClasses","role","selected","tabIndex"]);return e.disabled||(n=void 0!==p?p:-1),i.createElement(ou,qn({button:!0,role:m,tabIndex:n,component:l,selected:f,disableGutters:c,classes:qn({dense:r.dense},u),className:Hn(r.root,a,f&&r.selected,!c&&r.gutters),ref:t},h))}));const iu=Jl((function(e){return{root:qn({},e.typography.body1,ll({minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",width:"auto",overflow:"hidden",whiteSpace:"nowrap"},e.breakpoints.up("sm"),{minHeight:"auto"})),gutters:{},selected:{},dense:qn({},e.typography.body2,{minHeight:"auto"})}}),{name:"MuiMenuItem"})(lu),su=function(e){return rl(e,qn({defaultTheme:Ql},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}))}((e=>({formContainer:{marginBottom:e.spacing(2),padding:e.spacing(2),borderRadius:"25px",width:"50vw",margin:"auto",marginTop:"1rem"},questionContainer:{marginBottom:e.spacing(2),display:"flex",flexDirection:"column",borderRadius:"25px",border:"1.5px solid grey",padding:"2rem"},questionTop:{display:"flex",gap:".5rem"},optionContainer:{display:"flex",alignItems:"center",marginBottom:e.spacing(1)},addButton:{marginLeft:e.spacing(2),width:"50%",marginBottom:"10px",marginTop:"10px"},deleteButton:{marginLeft:e.spacing(2)}}))),cu=()=>{const e="https://localhost:7040/api/";let t=Z();const[n,r]=(0,i.useState)(!1),[a,o]=(0,i.useState)(""),[l,s]=(0,i.useState)(null),c=te(),u=su(),[d,m]=(0,i.useState)(!1),[f,p]=(0,i.useState)([{title:a,id:c.id,questions:[{id:nu(),questionText:"",answerType:"",options:[{id:nu(),optionText:""}]}]}]);(0,i.useEffect)((()=>{(async t=>{try{return(await Rn.get(e+"form/"+t)).data}catch(e){throw console.error("Error al hacer la solicitud:",e),e}})(c.id).then((e=>{p([e]),document.getElementById("title_final").value=e.title,s(e.id)})).catch((e=>console.error("Error al obtener los datos:",e))),localStorage.setItem("forms",JSON.stringify(f))}),[f]);const h=(e,t,n,r)=>{p((a=>a.map((a=>a.id===e?{...a,questions:a.questions.map((e=>e.id===t?{...e,options:e.options.map((e=>e.id===n?{...e,optionText:r}:e))}:e))}:a))))},b=(e,t)=>{p((n=>n.map((n=>n.id===e?{...n,questions:n.questions.map((e=>e.id===t?{...e,options:[...e.options,{id:nu(),optionText:""}]}:e))}:n))))},g=(e,t)=>{p((n=>n.map((n=>n.id===e?{...n,questions:n.questions.filter((e=>e.id!==t))}:n))))};return i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Formularios de evaluación"),i.createElement("ul",{class:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{class:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",class:"text-muted text-hover-primary"},"Home")),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Formulario de Evaluación"),i.createElement("li",{class:"breadcrumb-item"},i.createElement("span",{class:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{class:"breadcrumb-item text-muted"},"Vista"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"button-container"},!n&&i.createElement("button",{className:"btn btn-primary btn-lg float-end",onClick:()=>{l?Rn.put(e+"form"+l,JSON.stringify(f[0]),{headers:{"Content-Type":"application/json"}}).then((function(e){e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),t("/form")):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{m(!0)})):Rn.post(e+"form",JSON.stringify(f[0]),{headers:{"Content-Type":"application/json"}}).then((function(e){e?(swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),t("/form")):swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{m(!0)}))}},"Grabar Formulario"),!n&&d&&i.createElement(Zc,{variant:"contained",color:"primary",onClick:()=>{r(!0)}},"Abrir Formulario")),!n&&f.map((e=>i.createElement("div",{key:e.id,className:u.formContainer},i.createElement("input",{className:"form-control form-control-lg form-control-solid",type:"text",id:"title_final",placeholder:"Ingresar un título",onChange:e=>(e=>{p((t=>[{...t[0],title:e.target.value},...t.slice(1)]))})(e)}),e.questions.map((t=>i.createElement("div",{key:t.id,className:u.questionContainer},i.createElement("div",{className:u.questionTop},i.createElement(rc,{label:"Ingrese la pregunta",value:t.questionText,onChange:n=>((e,t,n)=>{p((r=>r.map((r=>r.id===e?{...r,questions:r.questions.map((e=>e.id===t?{...e,questionText:n}:e))}:r))))})(e.id,t.id,n.target.value),fullWidth:!0}),i.createElement(ni,{fullWidth:!0},i.createElement(Li,{id:"answer-type-label-".concat(t.id)},"Tipo de Respuesta"),i.createElement(ec,{labelId:"answer-type-label-".concat(t.id),value:t.answerType,onChange:n=>((e,t,n)=>{p((r=>r.map((r=>r.id===e?{...r,questions:r.questions.map((e=>e.id===t?{...e,answerType:n,options:[]}:e))}:r))))})(e.id,t.id,n.target.value)},i.createElement(iu,{value:""},"Seleccionar"),i.createElement(iu,{value:"input"},"Cuadro de Texto"),i.createElement(iu,{value:"checkbox"},"Selección Multiple"),i.createElement(iu,{value:"radio"},"Una sola opción")))),"checkbox"===t.answerType&&i.createElement(i.Fragment,null,i.createElement(sc,{variant:"subtitle2"}),t.options.map(((n,r)=>i.createElement("div",{className:u.optionContainer},i.createElement(rc,{key:n.id,label:"Opción ".concat(r+1),value:n.optionText,onChange:r=>h(e.id,t.id,n.id,r.target.value)}),i.createElement(Zc,{variant:"outlined",color:"secondary",size:"small",className:u.deleteButton,onClick:()=>g(e.id,t.id)},i.createElement("i",{className:"bi bi-trash"}))))),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>b(e.id,t.id),className:u.addButton},i.createElement("i",{className:"bi bi-file-earmark-plus"}),"Agregar Opción")),"radio"===t.answerType&&i.createElement(i.Fragment,null,t.options.map(((n,r)=>i.createElement("div",{key:r,className:u.optionContainer},i.createElement(rc,{label:"Option ".concat(r+1),value:n.optionText,key:n.id,onChange:r=>h(e.id,t.id,n.id,r.target.value)}),i.createElement(Zc,{variant:"outlined",color:"secondary",size:"small",className:u.deleteButton,onClick:()=>g(e.id,t.id)},i.createElement("i",{className:"bi bi-trash"}))))),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>b(e.id,t.id),className:u.addButton},i.createElement("i",{className:"bi bi-file-earmark-plus"}),"Agregar opción")),"input"===t.answerType&&i.createElement("input",{className:"short-text",type:"text",disabled:!0}),i.createElement("div",null,i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>g(e.id,t.id),className:u.deleteButton},i.createElement("i",{className:"bi bi-trash"})),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>((e,t)=>{const n={...f.find((t=>t.id===e)).questions.find((e=>e.id===t))};n.id=nu(),p((t=>t.map((t=>t.id===e?{...t,questions:[...t.questions,n]}:t))))})(e.id,t.id),className:u.addButton},i.createElement("i",{className:"bi bi-copy"})))))),i.createElement(Zc,{variant:"outlined",color:"primary",size:"small",onClick:()=>(e=>{const t={id:nu(),questionText:"Pregunta ",answerType:"",options:[]};p((n=>n.map((n=>n.id===e?{...n,questions:[...n.questions,t]}:n))))})(e.id)},i.createElement("i",{className:"bi bi-file-earmark-plus"}),"Agregar nueva Pregunta")))),n&&d&&i.createElement(eu,{formData:f,id:c.id,setShowResponse:r}))))},uu=()=>i.createElement(i.Fragment,null,i.createElement(cu,null)),du=()=>{const e=Z();var t,n,r;(0,i.useEffect)((()=>{n=document.querySelector("#kt_sign_in_form"),r=document.querySelector("#kt_sign_in_submit"),a()}),[]);const a=()=>{t=FormValidation.formValidation(n,{fields:{username:{validators:{notEmpty:{message:"El usuario es requerido"}}},password:{validators:{notEmpty:{message:"La contraseña es requerida"}}}},plugins:{trigger:new FormValidation.plugins.Trigger,bootstrap:new FormValidation.plugins.Bootstrap5({rowSelector:".fv-row",eleInvalidClass:"",eleValidClass:""})}})};return i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-root",id:"kt_app_root"},i.createElement("div",{className:"d-flex flex-column flex-lg-row flex-column-fluid"},i.createElement("div",{className:"d-flex flex-column flex-lg-row-fluid w-lg-50 p-10 order-2 order-lg-1"},i.createElement("div",{className:"d-flex flex-center flex-column flex-lg-row-fluid"},i.createElement("div",{className:"w-lg-500px p-10"},i.createElement("form",{className:"form w-100",noValidate:"novalidate",id:"kt_sign_in_form",onSubmit:a=>{a.preventDefault(),t.validate().then((function(t){if("Valid"==t){r.setAttribute("data-kt-indicator","on"),r.disabled=!0;var a=Object.fromEntries(new FormData(n));Rn.post("https://localhost:7040/api/auth/login",a,{headers:{"Content-Type":"application/json"}}).then((function(t){t?(localStorage.setItem("username",a.username),n.reset(),swal.fire({text:"¡Has iniciado sesión correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}}),e("/")):swal.fire({text:"Lo sentimos, el usuario o la contraseña son incorrectos, inténtalo de nuevo..",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{r.removeAttribute("data-kt-indicator"),r.disabled=!1}))}else swal.fire({text:"Sorry, looks like there are some errors detected, please try again.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}})}))},action:"#"},i.createElement("div",{className:"text-center mb-11"},i.createElement("h1",{className:"text-gray-900 fw-bolder mb-3"},"Iniciar Sesión")),i.createElement("div",{className:"fv-row mb-8"},i.createElement("input",{type:"text",placeholder:"Ingresar usuario",name:"username",autoComplete:"off",className:"form-control bg-transparent"})),i.createElement("div",{className:"fv-row mb-3"},i.createElement("input",{type:"password",placeholder:"Ingresar contraseña",name:"password",autoComplete:"off",className:"form-control bg-transparent"})),i.createElement("div",{className:"d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8"},i.createElement("div",null)),i.createElement("div",{className:"d-grid mb-10"},i.createElement("button",{type:"submit",id:"kt_sign_in_submit",className:"btn btn-primary"},i.createElement("span",{className:"indicator-label"},"Ingresar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))),i.createElement("div",{className:"w-lg-500px d-flex flex-stack px-10 mx-auto"},i.createElement("div",{className:"me-10"},i.createElement("button",{className:"btn btn-flex btn-link btn-color-gray-700 btn-active-color-primary rotate fs-base","data-kt-menu-trigger":"click","data-kt-menu-placement":"bottom-start","data-kt-menu-offset":"0px, 0px"},i.createElement("img",{"data-kt-element":"current-lang-flag",className:"w-20px h-20px rounded me-3",src:"assets/media/flags/ecuador.svg",alt:""}),i.createElement("span",{"data-kt-element":"current-lang-name",className:"me-1"},"Español"),i.createElement("span",{className:"d-flex flex-center rotate-180"},i.createElement("i",{className:"ki-outline ki-down fs-5 text-muted m-0"}))),i.createElement("div",{className:"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-800 menu-state-bg-light-primary fw-semibold w-200px py-4 fs-7","data-kt-menu":"true",id:"kt_auth_lang_menu"},i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"English"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/united-states.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"English"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"Spanish"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/ecuador.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"Spanish"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"German"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/germany.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"German"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"Japanese"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/japan.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"Japanese"))),i.createElement("div",{className:"menu-item px-3"},i.createElement("a",{href:"#",className:"menu-link d-flex px-5","data-kt-lang":"French"},i.createElement("span",{className:"symbol symbol-20px me-4"},i.createElement("img",{"data-kt-element":"lang-flag",className:"rounded-1",src:"assets/media/flags/france.svg",alt:""})),i.createElement("span",{"data-kt-element":"lang-name"},"French"))))))),i.createElement("div",{className:"d-flex flex-lg-row-fluid w-lg-50 bgi-size-cover bgi-position-center order-1 order-lg-2"},i.createElement("div",{className:"d-flex flex-column flex-center py-7 py-lg-15 px-5 px-md-15 w-100"},i.createElement("a",{href:"index.html",className:"mb-0 mb-lg-12"},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-60px h-lg-75px"})),i.createElement("img",{className:"d-none d-lg-block mx-auto w-275px w-md-50 w-xl-500px mb-10 mb-lg-20",src:"assets/media/misc/auth-screens.png",alt:""}),i.createElement("h1",{className:"d-none d-lg-block text-grey fs-2qx fw-bolder text-center mb-7"},"Rápido, Eficiente y Productivo"))))))},mu=()=>i.createElement(i.Fragment,null),fu=()=>i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_footer",className:"app-footer"},i.createElement("div",{className:"app-container container-fluid d-flex flex-column flex-md-row flex-center flex-md-stack py-3"},i.createElement("div",{className:"text-gray-900 order-2 order-md-1"},i.createElement("span",{className:"text-muted fw-semibold me-1"},"2024©"),i.createElement("a",{className:"text-gray-800 text-hover-primary"},"Marketing & Delivery"))))),pu=()=>i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_header",className:"app-header d-flex flex-column flex-stack"},i.createElement("div",{className:"d-flex flex-stack flex-grow-1"},i.createElement("div",{className:"app-header-logo d-flex align-items-center ps-lg-12",id:"kt_app_header_logo"},i.createElement("div",{id:"kt_app_sidebar_toggle",className:"app-sidebar-toggle btn btn-sm btn-icon bg-body btn-color-gray-500 btn-active-color-primary w-30px h-30px ms-n2 me-4 d-none d-lg-flex","data-kt-toggle":"true","data-kt-toggle-state":"active","data-kt-toggle-target":"body","data-kt-toggle-name":"app-sidebar-minimize"},i.createElement("i",{className:"ki-outline ki-abstract-14 fs-3 mt-1"})),i.createElement("div",{className:"btn btn-icon btn-active-color-primary w-35px h-35px ms-3 me-2 d-flex d-lg-none",id:"kt_app_sidebar_mobile_toggle"},i.createElement("i",{className:"ki-outline ki-abstract-14 fs-2"})),i.createElement("a",{href:"/",className:"app-sidebar-logo"},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-35px theme-light-show"}),i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-35px theme-dark-show"}))),i.createElement("div",{className:"app-navbar flex-grow-1 justify-content-end",id:"kt_app_header_navbar"},i.createElement("div",{className:"app-navbar-item d-flex align-items-stretch flex-lg-grow-1"}),i.createElement("div",{className:"app-navbar-item ms-2 ms-lg-6",id:"kt_header_user_menu_toggle"},i.createElement("div",{className:"cursor-pointer symbol symbol-circle symbol-30px symbol-lg-45px","data-kt-menu-trigger":"{default: 'click', lg: 'hover'}","data-kt-menu-attach":"parent","data-kt-menu-placement":"bottom-end"},i.createElement("img",{src:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png",alt:"user"})),i.createElement("div",{className:"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-800 menu-state-bg menu-state-color fw-semibold py-4 fs-6 w-275px","data-kt-menu":"true"},i.createElement("div",{className:"menu-item px-3"},i.createElement("div",{className:"menu-content d-flex align-items-center px-3"},i.createElement("div",{className:"symbol symbol-50px me-5"},i.createElement("img",{alt:"Logo",src:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"})),i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"fw-bold d-flex align-items-center fs-5"},"Max Prueba",i.createElement("span",{className:"badge badge-light-success fw-bold fs-8 px-2 py-1 ms-2"},"GG")),i.createElement("a",{href:"#",className:"fw-semibold text-muted text-hover-primary fs-7"},"max@mad.com")))),i.createElement("div",{className:"menu-item px-5"},i.createElement("a",{href:"/login",className:"menu-link px-5"},"Cerrar Sesión")))),i.createElement("div",{className:"app-navbar-item ms-2 ms-lg-6 me-lg-6"},i.createElement("a",{href:"/login",className:"btn btn-icon btn-custom btn-color-gray-600 btn-active-color-primary w-35px h-35px w-md-40px h-md-40px"},i.createElement("i",{className:"ki-outline ki-exit-right fs-1"}))))),i.createElement("div",{className:"app-header-separator"}))),hu=()=>i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_sidebar",className:"app-sidebar flex-column","data-kt-drawer":"true","data-kt-drawer-name":"app-sidebar","data-kt-drawer-activate":"{default: true, lg: false}","data-kt-drawer-overlay":"true","data-kt-drawer-width":"250px","data-kt-drawer-direction":"start","data-kt-drawer-toggle":"#kt_app_sidebar_mobile_toggle"},i.createElement("div",{className:"app-sidebar-wrapper"},i.createElement("div",{id:"kt_app_sidebar_wrapper",className:"hover-scroll-y my-5 my-lg-2 mx-4","data-kt-scroll":"true","data-kt-scroll-activate":"{default: false, lg: true}","data-kt-scroll-height":"auto","data-kt-scroll-dependencies":"#kt_app_header","data-kt-scroll-wrappers":"#kt_app_sidebar_wrapper","data-kt-scroll-offset":"5px"},i.createElement("div",{id:"#kt_app_sidebar_menu","data-kt-menu":"true","data-kt-menu-expand":"false",className:"app-sidebar-menu-primary menu menu-column menu-rounded menu-sub-indention menu-state-bullet-primary px-3 mb-5"},i.createElement("div",{"data-kt-menu-trigger":"click",className:"menu-item here show menu-accordion"},i.createElement("span",{className:"menu-link"},i.createElement("span",{className:"menu-icon"},i.createElement("i",{className:"ki-outline ki-briefcase fs-2"})),i.createElement("span",{className:"menu-title"},"Recursos Humanos"),i.createElement("span",{className:"menu-arrow"})),i.createElement("div",{className:"menu-sub menu-sub-accordion"},i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/usuarios",title:"Gestión de Usuarios","data-bs-toggle":"tooltip","data-bs-trigger":"hover","data-bs-dismiss":"click","data-bs-placement":"right"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Gestión de Usuarios"))),i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/candidatos",title:"Reclutamiento de personal","data-bs-toggle":"tooltip","data-bs-trigger":"hover","data-bs-dismiss":"click","data-bs-placement":"right"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Reclutamiento"))),i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/form",title:"Reclutamiento de personal","data-bs-toggle":"tooltip","data-bs-trigger":"hover","data-bs-dismiss":"click","data-bs-placement":"right"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Formularios de evaluación"))),i.createElement("div",{className:"menu-item"},i.createElement("a",{className:"menu-link",href:"/roles"},i.createElement("span",{className:"menu-bullet"},i.createElement("span",{className:"bullet bullet-dot"})),i.createElement("span",{className:"menu-title"},"Roles y Permisos")))))))))),bu=()=>i.createElement(i.Fragment,null,i.createElement("div",{className:"app-page flex-column flex-column-fluid",id:"kt_app_page"},i.createElement(pu,null),i.createElement("div",{className:"app-wrapper flex-column flex-row-fluid",id:"kt_app_wrapper"},i.createElement(hu,null),i.createElement("div",{className:"app-main flex-column flex-row-fluid",id:"kt_app_main"},i.createElement("div",{className:"d-flex flex-column flex-column-fluid"},i.createElement(mu,null),i.createElement(de,null)),i.createElement(fu,null))))),gu="https://localhost:7040/api/";var vu,yu,Eu;const xu=e=>{let{formFields:t,actionUrl:n,preloadedData:r}=e;Z();const[a,o]=(0,i.useState)((()=>{const e={};return t.forEach((t=>{"array"===t.type?e[t.name]=r[t.name]||[{...t.fields.reduce(((e,t)=>({...e,[t.name]:""})),{})}]:"checkbox"===t.type?e[t.name]=r[t.name]||!1:"file"===t.type?e[t.name]=r[t.name]||null:e[t.name]=r[t.name]||""})),e})),[l,s]=(0,i.useState)(0),c=async e=>(await Rn.get(e)).data;return(0,i.useEffect)((()=>{Eu=document.querySelector("#kt_hunt_submit"),(()=>{const e=t.length;let n=0;t.forEach((e=>{"array"===e.type?a[e.name].length>0&&n++:"checkbox"===e.type?a[e.name]&&n++:"file"===e.type?null!==a[e.name]&&n++:""!==a[e.name]&&n++})),s(Math.round(n/e*100))})()}),[a,t]),i.createElement("div",{className:"container d-flex justify-content-center"},i.createElement("form",{action:n,onSubmit:e=>{e.preventDefault();let t=new FormData;for(let e in a)a.hasOwnProperty(e)&&(a[e]instanceof File?t.append(e,a[e]):"object"==typeof a[e]?t.append(e,JSON.stringify(a[e])):t.append(e,a[e]));Eu.setAttribute("data-kt-indicator","on"),Eu.disabled=!0,Rn.post(gu+"postulante",t,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){console.log("response",e),e?swal.fire({text:"¡Se grabo el registro de forma exitosa!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok, got it!",customClass:{confirmButton:"btn btn-primary"}}):swal.fire({text:"Lo sentimos, hubo un error al grabar, inténtalo de nuevo..",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{Eu.removeAttribute("data-kt-indicator"),Eu.disabled=!1}))},className:"w-100",style:{maxWidth:"1024px"}},i.createElement("h3",{className:"mb-4"},"HOJA DE VIDA"),((e,t,n,r,a,o)=>i.createElement(i.Fragment,null,t.map(((t,l)=>"array"===t.type?i.createElement("div",{key:l,className:"w-100"},((e,t,n,r,a,o,l)=>i.createElement("div",{className:"mb-20 mt-5"},i.createElement("div",{className:"d-flex justify-content-between align-items-center mb-3"},i.createElement("h2",{className:"mb-4"},l),i.createElement("button",{type:"button",className:"btn btn-primary",onClick:()=>n(o)},i.createElement("i",{className:"fas fa-plus"}))),e.map(((e,n)=>i.createElement("div",{key:n,className:"row align-items-end mb-3"},a.map(((r,a)=>i.createElement("div",{key:a,className:"form-group col-12 col-md-3"},i.createElement("label",{className:"fw-semibold form-label text-gray-800 text-hover-primary fw-bold"},r.label,":"),"select"===r.type?i.createElement("select",{name:r.name,value:e[r.name]||"",className:"form-control form-select form-select-solid",onChange:e=>t(e,o,n,r.name)},r.options.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))):"checkbox"===r.type?i.createElement("div",{className:"form-check"},i.createElement("input",{type:"checkbox",name:r.name,checked:e[r.name]||!1,className:"form-check-input",onChange:e=>t({target:{name:r.name,value:e.target.checked}},o,n,r.name)}),i.createElement("label",{className:"form-check-label form-label required fw-semibold"},r.label)):i.createElement("input",{type:r.type,name:r.name,value:e[r.name]||"",className:"form-control form-control-solid",onChange:e=>t(e,o,n,r.name)})))),i.createElement("div",{className:"col-12 col-md-1 d-flex align-items-end"},i.createElement("button",{type:"button",className:"btn btn-danger",onClick:()=>r(o,n)},i.createElement("i",{className:"fas fa-trash"}))))))))(e[t.name],r,a,o,t.fields,t.name,t.label)):i.createElement("div",{key:l,className:"mb-5"},i.createElement("h2",{className:"mb-4"},t.group),i.createElement("div",{className:"row justify-content-center"},t.fields.map(((t,r)=>i.createElement("div",{key:r,className:"form-group col-12 col-md-4 mb-3"},i.createElement("label",{className:"form-label"},t.label,":"),"select"===t.type?i.createElement("select",{name:t.name,value:e[t.name]||"",className:"form-control form-control-solid",onChange:n},t.options.map(((e,t)=>i.createElement("option",{key:t,value:e.id},e.value)))):"checkbox"===t.type?i.createElement("div",{className:"form-check"},i.createElement("input",{type:"checkbox",name:t.name,checked:e[t.name]||!1,className:"form-check-input",onChange:e=>n({target:{name:t.name,value:e.target.checked}})})):"file"===t.type?i.createElement(i.Fragment,null,i.createElement("div",{className:"fv-row mb-7"},i.createElement("div",{className:"image-input image-input-outline image-input-placeholder","data-kt-image-input":"true"},i.createElement("div",{id:"image-input-wrapper",className:"image-input-wrapper w-125px h-125px",style:{backgroundImage:"url(assets/media/avatars/blank.png)"}}),i.createElement("label",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"change","data-bs-toggle":"tooltip","aria-label":"Change avatar","data-bs-original-title":"Change avatar","data-kt-initialized":"1"},i.createElement("i",{className:"ki-outline ki-pencil fs-7 ms-9"}),i.createElement("input",{type:"file",name:t.name,className:"form-control form-control-solid",onChange:e=>n({target:{name:t.name,value:e.target.files[0]}})})),i.createElement("span",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"cancel","data-bs-toggle":"tooltip","aria-label":"Cancel avatar","data-bs-original-title":"Cancel avatar","data-kt-initialized":"1"},i.createElement("i",{className:"ki-outline ki-cross fs-2"}),"                                ")))):i.createElement("input",{type:t.type,name:t.name,value:e[t.name]||"",className:"form-control form-control-solid",onChange:n}))))))))))(a,t,(e=>{const{name:t,value:n}=e.target;if(o({...a,[t]:n}),"foto"===t&&console.log(n),"provinciaID"===t&&(e=>{vu=e;var t=document.getElementsByName("cantonID")[0],n=document.getElementsByName("parroquiaID")[0];t.length=0,n.length=0,e&&""!==e&&c(gu+"divisionpolitica/provincias/"+e+"/cantones").then((e=>{document.getElementsByName("parroquiaID")[0].length=0,t.add(new Option("",""));for(let n=0;n<e.length;n++)t.add(new Option(e[n].value,e[n].id));o((e=>({...e,parroquiaID:"",cantonID:""})))}))})(n),"cantonID"===t&&(e=>{yu=e;var t=document.getElementsByName("parroquiaID")[0];t.length=0,e&&""!==e&&c(gu+"divisionpolitica/provincias/"+vu+"/cantones/"+yu+"/parroquias").then((e=>{t.add(new Option("",""));for(let n=0;n<e.length;n++)t.add(new Option(e[n].value,e[n].id));o((e=>({...e,parroquiaID:""})))}))})(n),"foto"===t){var r=document.getElementById("image-input-wrapper");const e=n,t=new FileReader;t.onloadend=()=>{r.style.backgroundImage="url("+t.result+")"},e&&t.readAsDataURL(e)}}),((e,t,n,r)=>{const{name:l,value:i}=e.target,s=a[t].map(((e,t)=>t===n?{...e,[r||l]:i}:e));o({...a,[t]:s})}),(e=>{const n=t.find((t=>t.name===e)).fields.reduce(((e,t)=>(e[t.name]="checkbox"!==t.type&&"",e)),{});o({...a,[e]:[...a[e],n]})}),((e,t)=>{o({...a,[e]:a[e].filter(((e,n)=>n!==t))})})),i.createElement("button",{type:"submit",id:"kt_hunt_submit",className:"btn btn-primary"},"Enviar")))},ku=()=>{const e="https://localhost:7040/api/",[t,n]=(0,i.useState)([]),[r,a]=(0,i.useState)([]),[o,l]=(0,i.useState)([]),[s,c]=(0,i.useState)([]),[u,d]=(0,i.useState)([]),[m,f]=(0,i.useState)([]),[p,h]=(0,i.useState)([]),[b,g]=(0,i.useState)([]),[v,y]=(0,i.useState)(!0),E=async(e,t)=>{const n=await Rn.get(e);var r=[];r.push({id:"",value:""}),t(r.concat(n.data))},x=e+"hunted";(0,i.useEffect)((()=>{(async()=>{await E(e+"divisionpolitica/provincias",n),await E(e+"divisionpolitica/provincias/1/cantones",a),await E(e+"divisionpolitica/provincias/1/cantones/1/parroquias",l),await E(e+"estadocivil",c),await E(e+"gradoescolaridad",d),await E(e+"niveltecnologia",f),await E(e+"tipoparticipacion",h),await E(e+"tipotecnologia",g),y(!1)})()}),[]);const k=[{group:"Foto",fields:[{name:"foto",label:"Foto del Postulante",type:"file"}]},{group:"1. DATOS PERSONALES DEL POSTULANTE",fields:[{name:"cargo",label:"Cargo al que se postula",type:"text"},{name:"telefonoCelular",label:"Telefono Celular",type:"text"},{name:"numeroWhatsapp",label:"Número de Whatsapp",type:"text"},{name:"nombres",label:"Nombres",type:"text"},{name:"apellidos",label:"Apellidos",type:"text"},{name:"ci",label:"C.I.",type:"text"},{name:"provinciaID",label:"Provincia",type:"select",options:t},{name:"cantonID",label:"Cantón",type:"select",options:r},{name:"parroquiaID",label:"Parroquia",type:"select",options:o},{name:"direccion",label:"Dirección",type:"text"},{name:"callePrincipal",label:"Calle Principal",type:"text"},{name:"nroCalle",label:"Nº",type:"text"},{name:"calleSecundaria",label:"Calle Secunddaria",type:"text"},{name:"fechaNacimiento",label:"Fecha de Nacimiento",type:"date"},{name:"lugarNacimiento",label:"Lugar",type:"text"},{name:"estadoCivilID",label:"Estado Civil",type:"select",options:s},{name:"sabeConducir",label:"Sabe Conducir",type:"select",options:[{id:1,value:"Si"},{id:2,value:"No"}]},{name:"tipoLicencia",label:"Tipo de licencia",type:"text"},{name:"direcciónElectrónica",label:"Dirección Electrónica",type:"text"}]},{group:"A. DEL CONYUGUE o DEL COMPAÑERO",fields:[{name:"nombreConyugue",label:"Nombre",type:"text"},{name:"cc",label:"C.C.",type:"text"},{name:"fechaNacimientoConyugue",label:"Fecha de Nacimiento",type:"date"},{name:"lugar",label:"Lugar",type:"text"},{name:"ocupacion",label:"Ocupación",type:"text"},{name:"telefono",label:"Teléfono",type:"text"},{name:"nombreEmpresa",label:"Nombre de Empresa donde Labura",type:"text"}]},{type:"array",name:"hijos_ar",label:"B. HIJOS DEL POSTULANTE",group:"B. HIJOS DEL POSTULANTE",fields:[{name:"nombres",label:"Nombres",type:"text"},{name:"apellidos",label:"Apellidos",type:"text"},{name:"fechaNacimiento",label:"Fecha de Nacimiento",type:"date"},{name:"gradoEscolaridad",label:"Grado de Escolaridad",type:"select",options:u},{name:"institucion",label:"Institución",type:"text"}]},{type:"array",name:"educacion_ar",label:"2. EDUCACIÓN",group:"2. EDUCACIÓN",fields:[{name:"tipoEducacion",label:"TIPO",type:"select",options:u},{name:"institucion",label:"Institucion",type:"text"},{name:"nivel",label:"Nivel o Curso",type:"text"},{name:"tituloObtenido",label:"TÍTULO OBTENIDO",type:"text"},{name:"fechaGraduacion",label:"Fecha de Graduación",type:"date"}]},{type:"array",name:"otrosEstudios_ar",label:"A. Otros Estudios relacionados al cargo: Nota (congresos, cursos, seminarios, simposios y talleres en los cuales haya participado)",group:"A. Otros Estudios relacionados al cargo: Nota (congresos, cursos, seminarios, simposios y talleres en los cuales haya participado)",fields:[{name:"tipoEducacion",label:"Tipo",type:"text"},{name:"nombreCurso",label:"Nombre del Curso",type:"text"},{name:"institucionOtros",label:"Institucion",type:"text"},{name:"fechaOtros",label:"Fecha",type:"date"},{name:"duracion",label:"Duración",type:"text"},{name:"participacion",label:"Participación",type:"text",type:"select",options:p}]},{type:"array",name:"experienciaLaboral_ar",label:"3. EXPERIENCIA LABORAL",group:"3. EXPERIENCIA LABORAL",fields:[{name:"empresa",label:"Empresa / Institución",type:"text"},{name:"cargo",label:"Cargo",type:"text"},{name:"fechaInicio",label:"Fecha de Inicio",type:"date"},{name:"fechaFin",label:"Fecha de Fin",type:"date"},{name:"functiones",label:"Funciones desempeñadas",type:"text"},{name:"jefeInmediato",label:"Jefe Inmediato",type:"text"}]},{type:"array",name:"tecnologia_ar",label:"4. TECNOLOGÍA: Seleccione el nivel en que considere, maneja cada una de las aplicaciones o herramientas tecnológicas.",group:"4. TECNOLOGÍA: Seleccione el nivel en que considere, maneja cada una de las aplicaciones o herramientas tecnológicas.",fields:[{name:"tipoTecnologia",label:"Tipo de tenologías",type:"select",options:b},{name:"nivel",label:"Nivel",type:"select",options:m},,]},{group:"",fields:[{name:"autorizacion",label:"Autorización a Market & Delivery a revisar la Información personal.",type:"checkbox"}]}];return v?i.createElement("div",null,"Cargando..."):i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-center text-center p-10"},i.createElement("div",{className:"card card-flush w-lg-750px py-5"},i.createElement("div",{className:"card-body"},i.createElement("div",{className:"mb-14"},i.createElement("a",{href:"#",className:""},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-40px"}))),i.createElement(xu,{formFields:k,actionUrl:x,preloadedData:{}})))))},wu=()=>i.createElement(i.Fragment,null,i.createElement("div",{className:"d-flex flex-column flex-center flex-column-fluid"},i.createElement("div",{className:"d-flex flex-column flex-center text-center p-10"},i.createElement("div",{className:"card card-flush w-lg-650px py-5"},i.createElement("div",{className:"card-body py-15 py-lg-20"},i.createElement("div",{className:"mb-14"},i.createElement("a",{href:"#",className:""},i.createElement("img",{alt:"Logo",src:"https://i.imgur.com/URGcVWR.png",className:"h-40px"}))),i.createElement("h1",{className:"fw-bolder text-gray-900 mb-5"},"Se gabró de forma exitosa su postulación."),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500 mb-8"},"Por favor valide su correo, ya que se",i.createElement("br",null),"requiere que haga la siguiente prueba."),i.createElement("div",{className:"mb-11"},i.createElement("a",{href:"/metronic8/demo39/index.html",className:"btn btn-sm btn-primary"},"Ir a la prueba")),i.createElement("div",{className:"mb-0"},i.createElement("img",{src:"/metronic8/demo39/assets/media/auth/membership.png",className:"mw-100 mh-300px theme-light-show",alt:""}),i.createElement("img",{src:"/metronic8/demo39/assets/media/auth/membership-dark.png",className:"mw-100 mh-300px theme-dark-show",alt:""}))))))),Nu=()=>{var e;const t="https://localhost:7040/api/";(0,i.useEffect)((()=>{e=document.getElementById("kt_modal_add_user"),new bootstrap.Modal(e),s(t+"postulante").then((e=>{r(e),console.log(e)}))}),[]);const[n,r]=(0,i.useState)([]),[a,o]=(0,i.useState)({postulanteID:"",cedula:"",nombre:"",fechaEntrevista:"",fechaContacto:"",tipoContacto:"",numeroContacto:"",apruebaRevisionDocumental:0,continua:0,aprueba:0,fechaContactoJefeInmediato:"",fechaCapacitacion:""}),l=e=>{const{name:t,value:n,type:r,checked:a}=e.target;o((e=>({...e,[t]:"checkbox"===r?a:n})))},s=(X(),async e=>(await Rn.get(e)).data);return i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Reclutamiento"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Reclutamiento"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card"},i.createElement("div",{className:"card-header border-0 pt-6"},i.createElement("div",{className:"card-title"},i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("i",{className:"ki-outline ki-magnifier fs-3 position-absolute ms-5"}),i.createElement("input",{type:"text","data-kt-user-table-filter":"search",className:"form-control form-control-solid w-250px ps-13",style:{width:"450px!important"},placeholder:"Buscar por nombre y/o documento de identidad"}))),i.createElement("div",{className:"card-toolbar"},i.createElement("div",{className:"d-flex justify-content-end","data-kt-user-table-toolbar":"base"},i.createElement("button",{type:"button",className:"btn btn-light-primary me-3",onClick:()=>{console.log("exportar","waa"),(async()=>{try{const e=await Rn.get(t+"postulante/excel",{responseType:"blob"}),n=window.URL.createObjectURL(new Blob([e.data])),r=document.createElement("a");r.href=n,r.download="reporte_reclutamiento.xlsx",document.body.appendChild(r),r.click(),r.remove(),window.URL.revokeObjectURL(n)}catch(e){console.error("Error:",e)}})()}},i.createElement("i",{className:"ki-outline ki-exit-up fs-2"}),"Exportar"),i.createElement("button",{type:"button",className:"btn btn-primary",onClick:e=>{e.preventDefault(),window.open("http://localhost:3000/inscribirse","_blank")}},i.createElement("i",{className:"ki-outline ki-plus fs-2"}),"Agregar Candidato")),i.createElement("div",{className:"d-flex justify-content-end align-items-center d-none","data-kt-user-table-toolbar":"selected"},i.createElement("div",{className:"fw-bold me-5"},i.createElement("span",{className:"me-2","data-kt-user-table-select":"selected_count"}),"Seleccionado"),i.createElement("button",{type:"button",className:"btn btn-danger","data-kt-user-table-select":"delete_selected"},"Desactivar Seleccionados")),i.createElement("div",{className:"modal fade",id:"kt_modal_export_users",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Exportar Candidatos"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 mx-xl-15 my-7"},i.createElement("form",{id:"kt_modal_export_users_form",className:"form",action:"#"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"required fs-6 fw-semibold form-label mb-2"},"Seleccionar un Formato de exportación:"),i.createElement("select",{name:"format","data-control":"select2","data-placeholder":"Seleccionar formato","data-hide-search":"true",className:"form-select form-select-solid fw-bold"},i.createElement("option",null),i.createElement("option",{value:"excel"},"Excel"))),i.createElement("div",{className:"text-center"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Enviar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_add_user",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header",id:"kt_modal_add_user_header"},i.createElement("h2",{className:"fw-bold"},"Seguimiento"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body px-5 my-7"},i.createElement("form",{id:"kt_modal_add_user_form",className:"form",onSubmit:e=>{e.preventDefault();const n={...a,apruebaRevisionDocumental:a.apruebaRevisionDocumental?1:0,continua:a.continua?1:0,aprueba:a.aprueba?1:0};Rn.put(t+"postulante/"+a.postulanteID,n,{headers:{"Content-Type":"application/json"}}).then((function(e){if(console.log("response",e),e){swal.fire({text:"El formulario ha sido enviado correctamente!",icon:"success",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}}),s(t+"postulante").then((e=>{r(e)})),s(t+"update/"+a.postulanteID).then((e=>console.log(e)));const e=document.getElementById("kt_modal_add_user");bootstrap.Modal.getInstance(e).hide()}else swal.fire({text:"Lo sentimos, ocurrió un error al procesar la información, inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).catch((function(e){console.log("error",e),swal.fire({text:"Lo sentimos, parece que se han detectado algunos errores. Inténtalo de nuevo.",icon:"error",buttonsStyling:!1,confirmButtonText:"Ok",customClass:{confirmButton:"btn btn-primary"}})})).then((()=>{}))}},i.createElement("div",{className:"d-flex flex-column scroll-y px-5 px-lg-10",id:"kt_modal_add_user_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"true","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_add_user_header","data-kt-scroll-wrappers":"#kt_modal_add_user_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Cédula"),i.createElement("input",{type:"text",name:"cedula",value:a.cedula,onChange:l,placeholder:"Cédula",className:"form-control form-control-solid mb-3 mb-lg-0"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Nombre"),i.createElement("input",{type:"text",name:"nombre",value:a.nombre,onChange:l,placeholder:"Nombre",className:"form-control form-control-solid mb-3 mb-lg-0"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Entrevista"),i.createElement("input",{type:"date",name:"fechaEntrevista",value:a.fechaEntrevista,onChange:l,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Entrevista"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Contacto"),i.createElement("input",{type:"date",name:"fechaContacto",value:a.fechaContacto,onChange:l,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Contacto"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Tipo de Contacto"),i.createElement("select",{name:"language","aria-label":"Seleccionar un Tipo de Contacto...","data-control":"select2","data-placeholder":"Seleccionar un Tipo de Contacto...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un Tipo de Contacto..."),i.createElement("option",{value:"telefono"},"Telefono "),i.createElement("option",{value:"whatsapp"},"Whatsapp"))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Número de Contacto"),i.createElement("input",{type:"text",name:"numeroContacto",value:a.numeroContacto,onChange:l,placeholder:"Número de Contacto",className:"form-control form-control-solid mb-3 mb-lg-0"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"col-form-label fw-semibold fs-6"},"Aprueba  Revisión Documental"),i.createElement("div",{className:"form-check form-check-solid form-switch form-check-custom fv-row"},i.createElement("input",{className:"form-check-input w-45px h-30px",type:"checkbox",name:"apruebaRevisionDocumental",checked:a.apruebaRevisionDocumental,onChange:l}),i.createElement("label",{className:"form-check-label",htmlFor:"aprueba"}))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"col-form-label fw-semibold fs-6"},"Continua"),i.createElement("div",{className:"form-check form-check-solid form-switch form-check-custom fv-row"},i.createElement("input",{className:"form-check-input w-45px h-30px",type:"checkbox",name:"continua",checked:a.continua,onChange:l}),i.createElement("label",{className:"form-check-label",htmlFor:"continua"}))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"col-form-label fw-semibold fs-6"},"Aprueba"),i.createElement("div",{className:"form-check form-check-solid form-switch form-check-custom fv-row"},i.createElement("input",{className:"form-check-input w-45px h-30px",type:"checkbox",name:"aprueba",checked:a.aprueba,onChange:l}),i.createElement("label",{className:"form-check-label",htmlFor:"aprueba"}))),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Contacto Jefe Inmediato"),i.createElement("input",{type:"date",name:"fechaContactoJefeInmediato",value:a.fechaContactoJefeInmediato,onChange:l,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Contacto Jefe Inmediato"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Fecha de Capacitación"),i.createElement("input",{type:"date",name:"fechaCapacitacion",value:a.fechaCapacitacion,onChange:l,className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Fecha de Capacitación"}))),i.createElement("div",{className:"text-center pt-10"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))))),i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-7 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Cargo"),i.createElement("th",{className:"min-w-125px"},"Cédula"),i.createElement("th",{className:"min-w-125px"},"Nombre"),i.createElement("th",{className:"min-w-125px"},"Fecha de Contacto"),i.createElement("th",{className:"min-w-125px"},"Continua"),i.createElement("th",{className:"min-w-125px"},"Aprobación"),i.createElement("th",{className:"min-w-125px"},"Revisión Documental"),i.createElement("th",{className:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},n.length>0&&i.createElement(i.Fragment,null,n.map(((e,t)=>{var n;return i.createElement("tr",{key:t},i.createElement("td",null,e.cargo),i.createElement("td",null,e.ci),i.createElement("td",null,e.nombres),i.createElement("td",null,null===(n=e.fechaContacto)||void 0===n?void 0:n.substring(0,10)),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},1==e.continua?"SI":"NO")),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},1==e.aprueba?"SI":"NO")),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},1==e.apruebaRevisionDocumental?"SI":"NO")),i.createElement("td",{className:"text-end"},i.createElement("button",{type:"button",className:"btn btn-light-primary me-3","data-bs-toggle":"modal",onClick:()=>(e=>{o((t=>{var n,r,a,o;return{...t,postulanteID:e.postulanteID,cedula:e.ci,nombre:e.nombres+" "+e.apellidos,fechaEntrevista:null===(n=e.fechaEntrevista)||void 0===n?void 0:n.substring(0,10),fechaContacto:null===(r=e.fechaContacto)||void 0===r?void 0:r.substring(0,10),tipoContacto:e.tipoContacto,numeroContacto:e.numContacto,apruebaRevisionDocumental:e.apruebaRevisionDocumental,continua:e.continua,aprueba:e.aprueba,fechaContactoJefeInmediato:null===(a=e.fechaContactoJefeInmediato)||void 0===a?void 0:a.substring(0,10),fechaCapacitacion:null===(o=e.fechaCapacitacion)||void 0===o?void 0:o.substring(0,10)}}))})(e),"data-bs-backdrop":"static","data-bs-target":"#kt_modal_add_user"},"Seguimiento")))}))))))))))},Su=()=>{const e=Z(),[t,n]=(0,i.useState)([]);return(0,i.useEffect)((()=>{(async e=>(await Rn.get("https://localhost:7040/api/users")).data)().then((e=>{n(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Lista de Usuarios"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Users"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"})))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card"},i.createElement("div",{className:"card-header border-0 pt-6"},i.createElement("div",{className:"card-title"},i.createElement("div",{className:"d-flex align-items-center position-relative my-1"},i.createElement("i",{className:"ki-outline ki-magnifier fs-3 position-absolute ms-5"}),i.createElement("input",{type:"text","data-kt-user-table-filter":"search",className:"form-control form-control-solid w-250px ps-13",style:{width:"450px!important"},placeholder:"Buscar por nombre y/o documento de identidad"}))),i.createElement("div",{className:"card-toolbar"},i.createElement("div",{className:"d-flex justify-content-end","data-kt-user-table-toolbar":"base"},i.createElement("button",{type:"button",className:"btn btn-light-primary me-3","data-kt-menu-trigger":"click","data-kt-menu-placement":"bottom-end"},i.createElement("i",{className:"ki-outline ki-filter fs-2"}),"Filtros"),i.createElement("div",{className:"menu menu-sub menu-sub-dropdown w-300px w-md-325px","data-kt-menu":"true"},i.createElement("div",{className:"px-7 py-5"},i.createElement("div",{className:"fs-5 text-gray-900 fw-bold"},"Opciones de Filtrado")),i.createElement("div",{className:"separator border-gray-200"}),i.createElement("div",{className:"px-7 py-5","data-kt-user-table-filter":"form"},i.createElement("div",{className:"mb-10"},i.createElement("label",{className:"form-label fs-6 fw-semibold"},"Fecha de Ingreso:"),i.createElement("input",{className:"form-control form-control-solid d-none",placeholder:"Escoger una fecha",id:"kt_modal_create_campaign_datepicker"})),i.createElement("div",{className:"d-flex justify-content-end"},i.createElement("button",{type:"reset",className:"btn btn-light btn-active-light-primary fw-semibold me-2 px-6","data-kt-menu-dismiss":"true","data-kt-user-table-filter":"reset"},"Limpiar"),i.createElement("button",{type:"submit",className:"btn btn-primary fw-semibold px-6","data-kt-menu-dismiss":"true","data-kt-user-table-filter":"filter"},"Aplicar")))),i.createElement("button",{type:"button",className:"btn btn-light-primary me-3","data-bs-toggle":"modal","data-bs-target":"#kt_modal_export_users"},i.createElement("i",{className:"ki-outline ki-exit-up fs-2"}),"Exportar")),i.createElement("div",{className:"d-flex justify-content-end align-items-center d-none","data-kt-user-table-toolbar":"selected"},i.createElement("div",{className:"fw-bold me-5"},i.createElement("span",{className:"me-2","data-kt-user-table-select":"selected_count"}),"Seleccionado"),i.createElement("button",{type:"button",className:"btn btn-danger","data-kt-user-table-select":"delete_selected"},"Desactivar Seleccionados")),i.createElement("div",{className:"modal fade",id:"kt_modal_export_users",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header"},i.createElement("h2",{className:"fw-bold"},"Exportar Usuarios"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body scroll-y mx-5 mx-xl-15 my-7"},i.createElement("form",{id:"kt_modal_export_users_form",className:"form",action:"#"},i.createElement("div",{className:"fv-row mb-10"},i.createElement("label",{className:"required fs-6 fw-semibold form-label mb-2"},"Seleccionar un Formato de exportación:"),i.createElement("select",{name:"format","data-control":"select2","data-placeholder":"Seleccionar formato","data-hide-search":"true",className:"form-select form-select-solid fw-bold"},i.createElement("option",null),i.createElement("option",{value:"excel"},"Excel"),i.createElement("option",{value:"pdf"},"PDF"),i.createElement("option",{value:"cvs"},"CVS"))),i.createElement("div",{className:"text-center"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Enviar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))),i.createElement("div",{className:"modal fade",id:"kt_modal_add_user",tabIndex:"-1","aria-hidden":"true"},i.createElement("div",{className:"modal-dialog modal-dialog-centered mw-650px"},i.createElement("div",{className:"modal-content"},i.createElement("div",{className:"modal-header",id:"kt_modal_add_user_header"},i.createElement("h2",{className:"fw-bold"},"Agregar Usuario"),i.createElement("div",{className:"btn btn-icon btn-sm btn-active-icon-primary","data-kt-users-modal-action":"close"},i.createElement("i",{className:"ki-outline ki-cross fs-1"}))),i.createElement("div",{className:"modal-body px-5 my-7"},i.createElement("form",{id:"kt_modal_add_user_form",className:"form",action:"#"},i.createElement("div",{className:"d-flex flex-column scroll-y px-5 px-lg-10",id:"kt_modal_add_user_scroll","data-kt-scroll":"true","data-kt-scroll-activate":"true","data-kt-scroll-max-height":"auto","data-kt-scroll-dependencies":"#kt_modal_add_user_header","data-kt-scroll-wrappers":"#kt_modal_add_user_scroll","data-kt-scroll-offset":"300px"},i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Cargo"),i.createElement("input",{type:"text",name:"user_name",className:"form-control form-control-solid mb-3 mb-lg-0",placeholder:"Ingresa el nombre del cargo"})),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Jefe Asignado"),i.createElement("select",{name:"language","aria-label":"Seleccionar un jefe...","data-control":"select2","data-placeholder":"Seleccionar un jefe...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un jefe..."),i.createElement("option",{value:"id"},"Usuario1 - Jefe 1"),i.createElement("option",{value:"msa"},"Usuario2 - Jefe 2")),i.createElement("div",{className:"form-text"},"Seleccionar un jefe...")),i.createElement("div",{className:"fv-row mb-7"},i.createElement("label",{className:"required fw-semibold fs-6 mb-2"},"Tipod de Convenio"),i.createElement("select",{name:"language","aria-label":"Seleccionar un tipo de convenio...","data-control":"select2","data-placeholder":"Seleccionar un tipo de convenio...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un tipo de convenio..."),i.createElement("option",{value:"id"},"FUCAP "),i.createElement("option",{value:"msa"},"GECAP"),i.createElement("option",{value:"msa"},"MARKET"),i.createElement("option",{value:"msa"},"OTROS..")),i.createElement("div",{className:"form-text"},"Seleccionar un tipo de convenio...")),i.createElement("div",{className:"mb-5"},i.createElement("label",{className:"required fw-semibold fs-6 mb-5"},"Rol"),i.createElement("div",{className:"d-flex fv-row"},i.createElement("div",{className:"form-check form-check-custom form-check-solid"},i.createElement("input",{className:"form-check-input me-3",name:"user_role",type:"radio",value:"0",id:"kt_modal_update_role_option_0"}),i.createElement("label",{className:"form-check-label",htmlFor:"kt_modal_update_role_option_0"},i.createElement("div",{className:"fw-bold text-gray-800"},"Jefe de Grupo"),i.createElement("div",{className:"text-gray-600"},"Figura clave de un grupo de trabajo, encargado de dirigir el proceso de planificación, ejecución, control y supervisión de las labores")))),i.createElement("div",{className:"separator separator-dashed my-5"}))),i.createElement("div",{className:"text-center pt-10"},i.createElement("button",{type:"reset",className:"btn btn-light me-3","data-kt-users-modal-action":"cancel"},"Cancelar"),i.createElement("button",{type:"submit",className:"btn btn-primary","data-kt-users-modal-action":"submit"},i.createElement("span",{className:"indicator-label"},"Grabar"),i.createElement("span",{className:"indicator-progress"},"Cargando...",i.createElement("span",{className:"spinner-border spinner-border-sm align-middle ms-2"}))))))))))),i.createElement("div",{className:"card-body py-4 table-responsive"},i.createElement("table",{className:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{className:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{className:"min-w-125px"},"Usuario"),i.createElement("th",{className:"min-w-125px"},"Nombres"),i.createElement("th",{className:"min-w-125px"},"Estado"),i.createElement("th",{className:"min-w-125px"},"Correo"),i.createElement("th",{className:"min-w-125px"},"Cargo"),i.createElement("th",{className:"min-w-125px"},"Role Asignado"),i.createElement("th",{className:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{className:"text-gray-600 fw-semibold"},t.length>0&&i.createElement(i.Fragment,null,t.map(((t,n)=>i.createElement(i.Fragment,null,i.createElement("tr",{key:t.usuarioID},i.createElement("td",null,t.ci),i.createElement("td",{className:"d-flex align-items-center"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("a",{href:"account/settings.html",className:"text-gray-800 text-hover-primary mb-1"},t.nombres),i.createElement("span",null,t.apellidos))),i.createElement("td",null,"Activo"),i.createElement("td",null,t.direccionElectronica),i.createElement("td",null,t.cargo),i.createElement("td",null,i.createElement("span",{className:"badge badge-light-primary fs-7 m-1"},t.userRoles[0].role.roleName)),i.createElement("td",{className:"text-end"},i.createElement("a",{onClick:()=>(t=>{e("/usuarios/personal/"+t.userID)})(t),className:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm"},"Editar",i.createElement("i",{className:"ki-outline fs-5 ms-1"})))))))))))))))},Cu=()=>{let{userID:e}=te();const t=Z(),n="https://localhost:7040/api/",[r,a]=(0,i.useState)(""),[o,l]=(0,i.useState)({userID:e,nacionalidad:"",tipoDocuento:"",ci:"",nombres:"",apellidos:"",direccionElectronica:"",fechaNacimiento:null,edad:0,sexoID:0,estadoCivilID:"",urlImagen:""});(0,i.useEffect)((()=>{(async e=>(await Rn.get(e)).data)(n+"users/"+e).then((e=>{a(e),console.log(e),(e=>{if(console.log("archivo.length",e.archivos.length),e.archivos.length>0){const r=e.archivos.some((e=>1===e.tipoArchivoID));if(console.log("archivo",r),r){var t=n+"archivo"+r.ArchivoID;l((e=>({...e,urlImagen:t})))}}})(e)}))}),[]);const s=e=>{const{name:t,value:n,type:r,checked:a}=e.target;l((e=>({...e,[t]:"checkbox"===r?a:n})))};return i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Detalle"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"},i.createElement("a",{href:"/usuarios",className:"btn btn-flex btn-outline btn-color-gray-700 btn-active-color-primary bg-body h-40px fs-7 fw-bold"},"Regresar a Gestión de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:o.urlImagen?o.urlImagen:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png",alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},r.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),r.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),r.direccionElectronica)))),i.createElement("div",{className:"d-flex flex-wrap flex-stack"},i.createElement("div",{className:"d-flex flex-column flex-grow-1 pe-8"},i.createElement("div",{className:"d-flex flex-wrap"},i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"$"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Ganacias")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-down fs-3 text-danger me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Prospectos")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"%"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Tasa de Conversión")))),i.createElement("div",{className:"d-flex align-items-center w-200px w-sm-300px flex-column mt-3"},i.createElement("div",{className:"d-flex justify-content-between w-100 mt-auto mb-2"},i.createElement("span",{className:"fw-semibold fs-6 text-gray-500"},"Finalización de Perfil"),i.createElement("span",{className:"fw-bold fs-6"},"100%")),i.createElement("div",{className:"h-5px mx-3 w-100 bg-light mb-3"},i.createElement("div",{className:"bg-success rounded h-5px",role:"progressbar",style:{width:"50%"},"aria-valuenow":"50","aria-valuemin":"0","aria-valuemax":"100"})))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{t("/usuarios/personal/"+e)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{t("/usuarios/familiar/"+e)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{t("/usuarios/documentos/"+e)}},"Documentos"))))),i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{className:"card-title m-0"},i.createElement("h3",{className:"fw-bold m-0"},"Detalles del perfil"))),i.createElement("div",{id:"kt_account_settings_profile_details",className:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",className:"form"},i.createElement("div",{className:"card-body border-top p-9"},i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},"Foto"),i.createElement("div",{className:"col-lg-8"},i.createElement("div",{className:"image-input image-input-outline","data-kt-image-input":"true",style:{backgroundImage:o.urlImagen?o.urlImagen:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"}},i.createElement("div",{className:"image-input-wrapper w-125px h-125px",style:{backgroundImage:o.urlImagen?o.urlImagen:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png"}}),i.createElement("label",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"change","data-bs-toggle":"tooltip",title:"Change avatar"},i.createElement("i",{className:"ki-outline ki-pencil fs-7"}),i.createElement("input",{type:"file",name:"avatar",accept:".png, .jpg, .jpeg"}),i.createElement("input",{type:"hidden",name:"avatar_remove"})),i.createElement("span",{className:"btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow","data-kt-image-input-action":"cancel","data-bs-toggle":"tooltip",title:"Cancel avatar"},i.createElement("i",{className:"ki-outline ki-cross fs-2"}))),i.createElement("div",{className:"form-text"},"Tipos de Archivo permitido: png, jpg, jpeg."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nacionalidad"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"nacionalidad: ",className:"form-control form-control-lg form-control-solid",placeholder:"Nacionalidad",onChange:s,value:o.nacionalidad}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Tipo de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"tipoDocumento","aria-label":"Seleccionar un documento...",value:o.tipoDocumento,"data-control":"select2",onChange:s,"data-placeholder":"Seleccionar un documento...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar un documento..."),i.createElement("option",{value:"id"},"Cédula de Identidad"),i.createElement("option",{value:"msa"},"Pasaporte")),i.createElement("div",{className:"form-text"},"Seleccionar un documento..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Número de Documento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"ci",value:o.ci,className:"form-control form-control-lg form-control-solid",onChange:s,placeholder:"Ingrese su número de documento"}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Nombres y Apellidos"),i.createElement("div",{className:"col-lg-8"},i.createElement("div",{className:"row"},i.createElement("div",{className:"col-lg-6 fv-row"},i.createElement("input",{type:"text",name:"nombres",className:"form-control form-control-lg form-control-solid mb-3 mb-lg-0",onChange:s,placeholder:"Nombres",value:o.nombres})),i.createElement("div",{className:"col-lg-6 fv-row"},i.createElement("input",{type:"text",name:"apelldos",className:"form-control form-control-lg form-control-solid",onChange:s,placeholder:"Apellidos",value:o.apellidos}))))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Correo electrónico"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"text",name:"direccionElectronica",className:"form-control form-control-lg form-control-solid",onChange:s,placeholder:"Ingrese un correo electrónico",value:o.direccionElectronica}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Fecha de Nacimiento"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{className:"form-control form-control-solid flatpickr-input active",name:"fechaNacimiento",placeholder:"Escoger una fecha",onChange:s,type:"date",value:o.fechaNacimiento}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label fw-semibold fs-6"},i.createElement("span",{className:"required"},"Edad"),i.createElement("span",{className:"ms-1","data-bs-toggle":"tooltip",title:"Debe ser un número positivo y entero."},i.createElement("i",{className:"ki-outline ki-information-5 text-gray-500 fs-6"}))),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("input",{type:"tel",name:"edad",className:"form-control form-control-lg form-control-solid",onChange:s,placeholder:"Edad",value:o.edad}))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Sexo"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"language","aria-label":"Seleccionar género...","data-control":"select2",value:o.sexo,onChange:s,"data-placeholder":"Seleccionar género...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar género..."),i.createElement("option",{value:"M"},"Masculino"),i.createElement("option",{value:"F"},"Femenino")),i.createElement("div",{className:"form-text"},"Seleccionar género..."))),i.createElement("div",{className:"row mb-6"},i.createElement("label",{className:"col-lg-4 col-form-label required fw-semibold fs-6"},"Estado Civil"),i.createElement("div",{className:"col-lg-8 fv-row"},i.createElement("select",{name:"language","aria-label":"Seleccionar estado civil...","data-control":"select2",value:o.estadoCivilID,onChange:s,"data-placeholder":"Seleccionar estado civil...",className:"form-select form-select-solid form-select-lg"},i.createElement("option",{value:""},"Seleccionar estado civil..."),i.createElement("option",{value:"1"},"CASADO"),i.createElement("option",{value:"2"},"SOLTERO"),i.createElement("option",{value:"3"},"DIVORCIADO"),i.createElement("option",{value:"4"},"SEPARADO"),i.createElement("option",{value:"5"},"VIUDO"),i.createElement("option",{value:"6"},"COMPROMISO"),i.createElement("option",{value:"7"},"UNION DE HECHO")),i.createElement("div",{className:"form-text"},"Seleccionar estado civil...")))),i.createElement("div",{className:"card-footer d-flex justify-content-end py-6 px-9"},i.createElement("button",{type:"submit",className:"btn btn-primary",id:"kt_account_profile_details_submit"},"Grabar Cambios"))))))))},_u=()=>{let{id:e}=te();const t=Z(),[n,r]=(0,i.useState)("");return(0,i.useEffect)((()=>{(async e=>(await Rn.get(e)).data)("https://localhost:7040/api/users/"+userID).then((e=>{r(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Detalle"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"},i.createElement("a",{href:"/usuarios",className:"btn btn-flex btn-outline btn-color-gray-700 btn-active-color-primary bg-body h-40px fs-7 fw-bold"},"Regresar a Gestión de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png",alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},n.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),n.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),n.direccionElectronica)))),i.createElement("div",{className:"d-flex flex-wrap flex-stack"},i.createElement("div",{className:"d-flex flex-column flex-grow-1 pe-8"},i.createElement("div",{className:"d-flex flex-wrap"},i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"$"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Ganacias")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-down fs-3 text-danger me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Prospectos")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"%"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Tasa de Conversión")))),i.createElement("div",{className:"d-flex align-items-center w-200px w-sm-300px flex-column mt-3"},i.createElement("div",{className:"d-flex justify-content-between w-100 mt-auto mb-2"},i.createElement("span",{className:"fw-semibold fs-6 text-gray-500"},"Finalización de Perfil"),i.createElement("span",{className:"fw-bold fs-6"},"100%")),i.createElement("div",{className:"h-5px mx-3 w-100 bg-light mb-3"},i.createElement("div",{className:"bg-success rounded h-5px",role:"progressbar",style:{width:"50%"},"aria-valuenow":"50","aria-valuemin":"0","aria-valuemax":"100"})))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",onClick:()=>{t("/usuarios/personal/"+userID)}},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{t("/usuarios/familiar/"+userID)}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{t("/usuarios/documentos/"+userID)}},"Documentos"))))),i.createElement("div",{class:"card mb-5 mb-xl-10"},i.createElement("div",{class:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{class:"card-title m-0"},i.createElement("h3",{class:"fw-bold m-0"},"Detalles de la familia")),i.createElement("div",{class:"card-toolbar"},i.createElement("button",{class:"btn btn-flex btn-primary","data-bs-toggle":"modal","data-bs-target":"#kt_modal_users_search"},i.createElement("i",{class:"ki-outline ki-plus fs-2"}),"Agregar Familiar"))),i.createElement("div",{id:"kt_account_settings_profile_details",class:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",class:"form"},i.createElement("div",{class:"card-body py-4 table-responsive"},i.createElement("table",{class:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{class:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{class:"min-w-125px"},"Nombres"),i.createElement("th",{class:"min-w-125px"},"Apellidos"),i.createElement("th",{class:"min-w-125px"},"Parentezco"),i.createElement("th",{class:"min-w-125px"},"Telefono 1"),i.createElement("th",{class:"min-w-125px"},"Telefono 2"),i.createElement("th",{class:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{class:"text-gray-600 fw-semibold"},i.createElement("tr",null,i.createElement("td",{class:"d-flex align-items-center"},"Geraldin"),i.createElement("td",null),i.createElement("td",null,"Compromiso"),i.createElement("td",null,"9393939"),i.createElement("td",null),i.createElement("td",{class:"text-end"},i.createElement("a",{href:"#",class:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm","data-kt-menu-trigger":"click","data-kt-menu-placement":"bottom-end"},"Acciones",i.createElement("i",{class:"ki-outline ki-down fs-5 ms-1"})),i.createElement("div",{class:"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4","data-kt-menu":"true"},i.createElement("div",{class:"menu-item px-3"},i.createElement("a",{href:"account/settings.html",class:"menu-link px-3"},"Editar")),i.createElement("div",{class:"menu-item px-3"},i.createElement("a",{href:"#",class:"menu-link px-3","data-kt-users-table-filter":"delete_row"},"Eliminar"))))))))))))))},Ru=()=>{const e=Z(),t=X(),{state:n}=t,[r,a]=(0,i.useState)("");return console.log(n),(0,i.useEffect)((()=>{console.log(n),(async e=>(await Rn.get(e)).data)("https://localhost:7040/api/users/"+n).then((e=>{a(e),console.log(e)}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{id:"kt_app_toolbar",className:"app-toolbar pt-6 pb-2"},i.createElement("div",{id:"kt_app_toolbar_container",className:"app-container container-fluid d-flex align-items-stretch"},i.createElement("div",{className:"app-toolbar-wrapper d-flex flex-stack flex-wrap gap-4 w-100"},i.createElement("div",{className:"page-title d-flex flex-column justify-content-center gap-1 me-3"},i.createElement("h1",{className:"page-heading d-flex flex-column justify-content-center text-gray-900 fw-bold fs-3 m-0"},"Ajustes de Usuario"),i.createElement("ul",{className:"breadcrumb breadcrumb-separatorless fw-semibold fs-7 my-0"},i.createElement("li",{className:"breadcrumb-item text-muted"},i.createElement("a",{href:"index.html",className:"text-muted text-hover-primary"},"Home")),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Recursos Humanos"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Gestión de Usuarios"),i.createElement("li",{className:"breadcrumb-item"},i.createElement("span",{className:"bullet bg-gray-500 w-5px h-2px"})),i.createElement("li",{className:"breadcrumb-item text-muted"},"Detalle"))),i.createElement("div",{className:"d-flex align-items-center gap-2 gap-lg-3"},i.createElement("a",{href:"#",className:"btn btn-flex btn-outline btn-color-gray-700 btn-active-color-primary bg-body h-40px fs-7 fw-bold","data-bs-toggle":"modal","data-bs-target":"#kt_modal_view_users"},"Ir a Gestión de Usuario"))))),i.createElement("div",{id:"kt_app_content",className:"app-content flex-column-fluid"},i.createElement("div",{id:"kt_app_content_container",className:"app-container container-fluid"},i.createElement("div",{className:"card mb-5 mb-xl-10"},i.createElement("div",{className:"card-body pt-9 pb-0"},i.createElement("div",{className:"d-flex flex-wrap flex-sm-nowrap"},i.createElement("div",{className:"me-7 mb-4"},i.createElement("div",{className:"symbol symbol-100px symbol-lg-160px symbol-fixed position-relative"},i.createElement("img",{src:"https://demos.pixinvent.com/materialize-html-admin-template/assets/img/avatars/1.png",alt:"image"}))),i.createElement("div",{className:"flex-grow-1"},i.createElement("div",{className:"d-flex justify-content-between align-items-start flex-wrap mb-2"},i.createElement("div",{className:"d-flex flex-column"},i.createElement("div",{className:"d-flex align-items-center mb-2"},i.createElement("a",{href:"#",className:"text-gray-900 text-hover-primary fs-2 fw-bold me-1"},r.nombres),i.createElement("a",{href:"#"},i.createElement("i",{className:"ki-outline ki-verify fs-1 text-primary"}))),i.createElement("div",{className:"d-flex flex-wrap fw-semibold fs-6 mb-4 pe-2"},i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-profile-circle fs-4 me-1"}),"Asesor Comercial"),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary me-5 mb-2"},i.createElement("i",{className:"ki-outline ki-geolocation fs-4 me-1"}),r.callePrincipal),i.createElement("a",{href:"#",className:"d-flex align-items-center text-gray-500 text-hover-primary mb-2"},i.createElement("i",{className:"ki-outline ki-sms fs-4"}),r.direccionElectronica)))),i.createElement("div",{className:"d-flex flex-wrap flex-stack"},i.createElement("div",{className:"d-flex flex-column flex-grow-1 pe-8"},i.createElement("div",{className:"d-flex flex-wrap"},i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"$"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Ganacias")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-down fs-3 text-danger me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Prospectos")),i.createElement("div",{className:"border border-gray-300 border-dashed rounded min-w-125px py-3 px-4 me-6 mb-3"},i.createElement("div",{className:"d-flex align-items-center"},i.createElement("i",{className:"ki-outline ki-arrow-up fs-3 text-success me-2"}),i.createElement("div",{className:"fs-2 fw-bold","data-kt-countup":"true","data-kt-countup-value":"0","data-kt-countup-prefix":"%"},"0")),i.createElement("div",{className:"fw-semibold fs-6 text-gray-500"},"Tasa de Conversión")))),i.createElement("div",{className:"d-flex align-items-center w-200px w-sm-300px flex-column mt-3"},i.createElement("div",{className:"d-flex justify-content-between w-100 mt-auto mb-2"},i.createElement("span",{className:"fw-semibold fs-6 text-gray-500"},"Finalización de Perfil"),i.createElement("span",{className:"fw-bold fs-6"},"100%")),i.createElement("div",{className:"h-5px mx-3 w-100 bg-light mb-3"},i.createElement("div",{className:"bg-success rounded h-5px",role:"progressbar",style:{width:"50%"},"aria-valuenow":"50","aria-valuemin":"0","aria-valuemax":"100"})))))),i.createElement("ul",{className:"nav nav-stretch nav-line-tabs nav-line-tabs-2x border-transparent fs-5 fw-bold"},i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 ",href:"#"},"Información Personal")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5 active",onClick:()=>{e("/usuarios/familiar",{state:n})}},"Información Familiar")),i.createElement("li",{className:"nav-item mt-2"},i.createElement("a",{className:"nav-link text-active-primary ms-0 me-10 py-5",onClick:()=>{e("/usuarios/archivos",{state:n})}},"Documentos"))))),i.createElement("div",{class:"card mb-5 mb-xl-10"},i.createElement("div",{class:"card-header border-0 cursor-pointer",role:"button","data-bs-toggle":"collapse","data-bs-target":"#kt_account_profile_details","aria-expanded":"true","aria-controls":"kt_account_profile_details"},i.createElement("div",{class:"card-title m-0"},i.createElement("h3",{class:"fw-bold m-0"},"Detalles de la familia")),i.createElement("div",{class:"card-toolbar"},i.createElement("button",{class:"btn btn-flex btn-primary","data-bs-toggle":"modal","data-bs-target":"#kt_modal_users_search"},i.createElement("i",{class:"ki-outline ki-plus fs-2"}),"Agregar Familiar"))),i.createElement("div",{id:"kt_account_settings_profile_details",class:"collapse show"},i.createElement("form",{id:"kt_account_profile_details_form",class:"form"},i.createElement("div",{class:"card-body py-4"},i.createElement("table",{class:"table align-middle table-row-dashed fs-6 gy-5",id:"kt_table_users"},i.createElement("thead",null,i.createElement("tr",{class:"text-start text-muted fw-bold fs-7 text-uppercase gs-0"},i.createElement("th",{class:"min-w-125px"},"Nombres"),i.createElement("th",{class:"min-w-125px"},"Apellidos"),i.createElement("th",{class:"min-w-125px"},"Parentezco"),i.createElement("th",{class:"min-w-125px"},"Telefono 1"),i.createElement("th",{class:"min-w-125px"},"Telefono 2"),i.createElement("th",{class:"text-end min-w-100px"},"Acciones"))),i.createElement("tbody",{class:"text-gray-600 fw-semibold"},i.createElement("tr",null,i.createElement("td",{class:"d-flex align-items-center"},"Geraldin"),i.createElement("td",null),i.createElement("td",null,"Compromiso"),i.createElement("td",null,"9393939"),i.createElement("td",null),i.createElement("td",{class:"text-end"},i.createElement("a",{href:"#",class:"btn btn-light btn-active-light-primary btn-flex btn-center btn-sm","data-kt-menu-trigger":"click","data-kt-menu-placement":"bottom-end"},"Acciones",i.createElement("i",{class:"ki-outline ki-down fs-5 ms-1"})),i.createElement("div",{class:"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4","data-kt-menu":"true"},i.createElement("div",{class:"menu-item px-3"},i.createElement("a",{href:"account/settings.html",class:"menu-link px-3"},"Editar")),i.createElement("div",{class:"menu-item px-3"},i.createElement("a",{href:"#",class:"menu-link px-3","data-kt-users-table-filter":"delete_row"},"Eliminar"))))))))))))))},Pu=()=>i.createElement(i.Fragment,null,i.createElement(pe,null,i.createElement(me,{path:"/",element:i.createElement(du,null)}),i.createElement(me,{path:"/inscribirse",element:i.createElement(ku,null)}),i.createElement(me,{path:"/resultado",element:i.createElement(wu,null)}),i.createElement(me,{element:i.createElement(bu,null)},i.createElement(me,{exact:!0,path:"/dashboard",element:i.createElement(Ee,null)}),i.createElement(me,{exact:!0,path:"/roles",element:i.createElement(Pn,null)}),i.createElement(me,{exact:!0,path:"/candidatos",element:i.createElement(Nu,null)}),i.createElement(me,{exact:!0,path:"/usuarios",element:i.createElement(Su,null)}),i.createElement(me,{path:"/usuarios/personal/:userID",element:i.createElement(Cu,null)}),i.createElement(me,{path:"/usuarios/familiar/:userID",element:i.createElement(_u,null)}),i.createElement(me,{path:"/usuarios/archivos/:userID",element:i.createElement(Ru,null)}),i.createElement(me,{exact:!0,path:"/form",element:i.createElement(Un,null)}),i.createElement(me,{exact:!0,path:"/form/:id",element:i.createElement(uu,null)})))),Ou=()=>i.createElement(ge,null,i.createElement(Pu,null));var Tu=a(418),Iu=i,Au=Symbol.for("react-redux-context"),Fu="undefined"!=typeof globalThis?globalThis:{};function Du(){if(!Iu.createContext)return{};const e=Fu[Au]??(Fu[Au]=new Map);let t=e.get(Iu.createContext);return t||(t=Iu.createContext(null),e.set(Iu.createContext,t)),t}var Lu=Du();Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen"),Symbol.for("react.client.reference");var Mu={notify(){},get:()=>[]};var zu=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Bu="undefined"!=typeof navigator&&"ReactNative"===navigator.product,ju=zu||Bu?Iu.useLayoutEffect:Iu.useEffect;Object.defineProperty,Object.getOwnPropertyNames,Object.getOwnPropertySymbols,Object.getOwnPropertyDescriptor,Object.getPrototypeOf,Object.prototype;var Uu=function({store:e,context:t,children:n,serverState:r,stabilityCheck:a="once",identityFunctionCheck:o="once"}){const l=Iu.useMemo((()=>{const t=function(e,t){let n,r=Mu,a=0,o=!1;function l(){c.onStateChange&&c.onStateChange()}function i(){a++,n||(n=t?t.addNestedSub(l):e.subscribe(l),r=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){(()=>{let t=e;for(;t;)t.callback(),t=t.next})()},get(){const t=[];let n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let r=!0;const a=t={callback:n,next:null,prev:t};return a.prev?a.prev.next=a:e=a,function(){r&&null!==e&&(r=!1,a.next?a.next.prev=a.prev:t=a.prev,a.prev?a.prev.next=a.next:e=a.next)}}}}())}function s(){a--,n&&0===a&&(n(),n=void 0,r.clear(),r=Mu)}const c={addNestedSub:function(e){i();const t=r.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),s())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:l,isSubscribed:function(){return o},trySubscribe:function(){o||(o=!0,i())},tryUnsubscribe:function(){o&&(o=!1,s())},getListeners:()=>r};return c}(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0,stabilityCheck:a,identityFunctionCheck:o}}),[e,r,a,o]),i=Iu.useMemo((()=>e.getState()),[e]);ju((()=>{const{subscription:t}=l;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),i!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[l,i]);const s=t||Lu;return Iu.createElement(s.Provider,{value:l},n)};function qu(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}Tu.useSyncExternalStoreWithSelector,i.useSyncExternalStore;var Wu=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),$u=()=>Math.random().toString(36).substring(7).split("").join("."),Vu={INIT:`@@redux/INIT${$u()}`,REPLACE:`@@redux/REPLACE${$u()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${$u()}`};function Hu(e,t,n){if("function"!=typeof e)throw new Error(qu(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(qu(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(qu(1));return n(Hu)(e,t)}let r=e,a=t,o=new Map,l=o,i=0,s=!1;function c(){l===o&&(l=new Map,o.forEach(((e,t)=>{l.set(t,e)})))}function u(){if(s)throw new Error(qu(3));return a}function d(e){if("function"!=typeof e)throw new Error(qu(4));if(s)throw new Error(qu(5));let t=!0;c();const n=i++;return l.set(n,e),function(){if(t){if(s)throw new Error(qu(6));t=!1,c(),l.delete(n),o=null}}}function m(e){if(!function(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}(e))throw new Error(qu(7));if(void 0===e.type)throw new Error(qu(8));if("string"!=typeof e.type)throw new Error(qu(17));if(s)throw new Error(qu(9));try{s=!0,a=r(a,e)}finally{s=!1}return(o=l).forEach((e=>{e()})),e}return m({type:Vu.INIT}),{dispatch:m,subscribe:d,getState:u,replaceReducer:function(e){if("function"!=typeof e)throw new Error(qu(10));r=e,m({type:Vu.REPLACE})},[Wu]:function(){const e=d;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(qu(11));function n(){const e=t;e.next&&e.next(u())}return n(),{unsubscribe:e(n)}},[Wu](){return this}}}}}const Gu={questions:[],isFormSaved:!1,formResponses:[]},Ku=Hu((function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Gu,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"ADD_QUESTION":return{...e,questions:[...e.questions,t.payload]};case"ADD_FORM_FIELD":return{...e,questions:e.questions.map(((e,n)=>n===t.payload.questionIndex?{...e,formFields:[...e.formFields,t.payload.fieldType]}:e))};case"SAVE_FORM":return{...e,isFormSaved:!0};case"SAVE_FORM_RESPONSES":return{...e,formResponses:t.payload};default:return e}}),void 0,void 0);c.createRoot(document.getElementById("kt_app_root")).render(i.createElement(Uu,{store:Ku},i.createElement(Ou,null)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,